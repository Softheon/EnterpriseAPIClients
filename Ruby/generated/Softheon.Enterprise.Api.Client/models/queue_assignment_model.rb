# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Softheon.Enterprise.Api.Client
  module Models
    #
    # Defines properties and methods for Queue Assignment
    #
    class QueueAssignmentModel
      # @return [Integer] Gets or sets the unique queue identifier.
      attr_accessor :queue_id

      # @return [Integer] Gets or sets the user identifier.
      attr_accessor :user_id

      # @return [Integer] Gets or sets the group identifier.
      attr_accessor :group_id

      # @return [Enum] Gets or sets the queue assignment type. Possible values
      # include: 'Unspecified', 'Primary', 'Secondary'
      attr_accessor :type

      # @return [Integer] Gets or sets the sort order.
      attr_accessor :order

      # @return [Enum] Gets or sets the task sort column. Possible values
      # include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID',
      # 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
      # 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
      # 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID',
      # 'PreviousQueueID', 'NextQueueID', 'InsertionTime', 'ResolutionTime',
      # 'TaskFileAttachment', 'ReservedInt1', 'ReservedString1'
      attr_accessor :task_sort_column

      # @return [Enum] Gets or sets the state. Possible values include:
      # 'Unspecified', 'Inactive', 'Active'
      attr_accessor :state

      # @return [Enum] Gets or sets the type of the fetch. Possible values
      # include: 'Unspecified', 'Manual', 'Push'
      attr_accessor :fetch_type


      #
      # Mapper for QueueAssignmentModel class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'QueueAssignmentModel',
          type: {
            name: 'Composite',
            class_name: 'QueueAssignmentModel',
            model_properties: {
              queue_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'QueueID',
                constraints: {
                  InclusiveMaximum: 2147483647,
                  InclusiveMinimum: 1
                },
                type: {
                  name: 'Number'
                }
              },
              user_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'UserID',
                constraints: {
                  InclusiveMaximum: 2147483647,
                  InclusiveMinimum: 1
                },
                type: {
                  name: 'Number'
                }
              },
              group_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'GroupID',
                constraints: {
                  InclusiveMaximum: 2147483647,
                  InclusiveMinimum: 0
                },
                type: {
                  name: 'Number'
                }
              },
              type: {
                client_side_validation: true,
                required: false,
                serialized_name: 'Type',
                type: {
                  name: 'String'
                }
              },
              order: {
                client_side_validation: true,
                required: false,
                serialized_name: 'Order',
                type: {
                  name: 'Number'
                }
              },
              task_sort_column: {
                client_side_validation: true,
                required: false,
                serialized_name: 'TaskSortColumn',
                type: {
                  name: 'String'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'State',
                type: {
                  name: 'String'
                }
              },
              fetch_type: {
                client_side_validation: true,
                required: false,
                serialized_name: 'FetchType',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
