/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package softheon.enterprise.api.client;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import org.joda.time.DateTime;
import rx.Observable;
import softheon.enterprise.api.client.models.ApplicationModel;
import softheon.enterprise.api.client.models.AttachmentModel;
import softheon.enterprise.api.client.models.AttachmentVersionModel;
import softheon.enterprise.api.client.models.DrawerBase;
import softheon.enterprise.api.client.models.DrawerModel;
import softheon.enterprise.api.client.models.EntityContentModel;
import softheon.enterprise.api.client.models.EntityDefinitionBase;
import softheon.enterprise.api.client.models.EntityDefinitionModel;
import softheon.enterprise.api.client.models.EntityLinkModel;
import softheon.enterprise.api.client.models.EntityModel;
import softheon.enterprise.api.client.models.EventModel;
import softheon.enterprise.api.client.models.ExtensionModel;
import softheon.enterprise.api.client.models.FieldValidationModel;
import softheon.enterprise.api.client.models.FlowModel;
import softheon.enterprise.api.client.models.GetEntityBaseResponse;
import softheon.enterprise.api.client.models.GroupApplicationModel;
import softheon.enterprise.api.client.models.GroupBase;
import softheon.enterprise.api.client.models.GroupDrawerModel;
import softheon.enterprise.api.client.models.GroupModel;
import softheon.enterprise.api.client.models.GroupQueueModel;
import softheon.enterprise.api.client.models.GroupUserModel;
import softheon.enterprise.api.client.models.InsertEntityLinkRequestModel;
import softheon.enterprise.api.client.models.InsertEntityRequestModel;
import softheon.enterprise.api.client.models.InsertGroupRequestModel;
import softheon.enterprise.api.client.models.InsertNoteRequestModel;
import softheon.enterprise.api.client.models.InsertQueueAssignmentRequestModel;
import softheon.enterprise.api.client.models.InsertQueueRequestModel;
import softheon.enterprise.api.client.models.InsertTaskRequestModel;
import softheon.enterprise.api.client.models.InsertUserRequestModel;
import softheon.enterprise.api.client.models.LockModel;
import softheon.enterprise.api.client.models.NoteBase;
import softheon.enterprise.api.client.models.NoteModel;
import softheon.enterprise.api.client.models.QueueAssignmentModel;
import softheon.enterprise.api.client.models.QueueBase;
import softheon.enterprise.api.client.models.QueueModel;
import softheon.enterprise.api.client.models.TaskBase;
import softheon.enterprise.api.client.models.TaskModel;
import softheon.enterprise.api.client.models.UpdateAttachmentRequestModel;
import softheon.enterprise.api.client.models.UpdateEntityDefinitionRequestModel;
import softheon.enterprise.api.client.models.UpdateEntityLinkRequestModel;
import softheon.enterprise.api.client.models.UpdateEntityRequestModel;
import softheon.enterprise.api.client.models.UpdateLockRequestModel;
import softheon.enterprise.api.client.models.UserApplicationModel;
import softheon.enterprise.api.client.models.UserBase;
import softheon.enterprise.api.client.models.UserDrawerModel;
import softheon.enterprise.api.client.models.UserModel;
import softheon.enterprise.api.client.models.UserQueueModel;
import softheon.enterprise.api.client.models.WorkflowActionInitializeModel;
import softheon.enterprise.api.client.models.WorkflowActionModel;
import softheon.enterprise.api.client.models.WorkflowActionRouteModel;
import softheon.enterprise.api.client.models.WorkflowModel;
import softheon.enterprise.api.client.models.WorkflowQueueModel;
import com.microsoft.rest.RestClient;

/**
 * The interface for SoftheonEnterpriseAPI class.
 */
public interface SoftheonEnterpriseAPI {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://localhost:54963";

    /**
     * Accepts the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object acceptTask(WorkflowActionModel model);

    /**
     * Accepts the task.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> acceptTaskAsync(WorkflowActionModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Accepts the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> acceptTaskAsync(WorkflowActionModel model);

    /**
     * Accepts the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> acceptTaskWithServiceResponseAsync(WorkflowActionModel model);

    /**
     * Rejects the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object rejectTask(WorkflowActionModel model);

    /**
     * Rejects the task.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> rejectTaskAsync(WorkflowActionModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Rejects the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> rejectTaskAsync(WorkflowActionModel model);

    /**
     * Rejects the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> rejectTaskWithServiceResponseAsync(WorkflowActionModel model);

    /**
     * Suspends the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object suspendTask(WorkflowActionModel model);

    /**
     * Suspends the task.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> suspendTaskAsync(WorkflowActionModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Suspends the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> suspendTaskAsync(WorkflowActionModel model);

    /**
     * Suspends the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> suspendTaskWithServiceResponseAsync(WorkflowActionModel model);

    /**
     * Routes the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object routeTask(WorkflowActionRouteModel model);

    /**
     * Routes the task.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> routeTaskAsync(WorkflowActionRouteModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Routes the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> routeTaskAsync(WorkflowActionRouteModel model);

    /**
     * Routes the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> routeTaskWithServiceResponseAsync(WorkflowActionRouteModel model);

    /**
     * Overrides the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object overrideTask(WorkflowActionModel model);

    /**
     * Overrides the task.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> overrideTaskAsync(WorkflowActionModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Overrides the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> overrideTaskAsync(WorkflowActionModel model);

    /**
     * Overrides the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> overrideTaskWithServiceResponseAsync(WorkflowActionModel model);

    /**
     * Resets the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object resetTask(WorkflowActionModel model);

    /**
     * Resets the task.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> resetTaskAsync(WorkflowActionModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Resets the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> resetTaskAsync(WorkflowActionModel model);

    /**
     * Resets the task.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> resetTaskWithServiceResponseAsync(WorkflowActionModel model);

    /**
     * Initializes the Workflow.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object initializeEntityWorkflow(WorkflowActionInitializeModel model);

    /**
     * Initializes the Workflow.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> initializeEntityWorkflowAsync(WorkflowActionInitializeModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Initializes the Workflow.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> initializeEntityWorkflowAsync(WorkflowActionInitializeModel model);

    /**
     * Initializes the Workflow.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> initializeEntityWorkflowWithServiceResponseAsync(WorkflowActionInitializeModel model);

    /**
     * Gets a list of all available applications.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ApplicationModel&gt; object if successful.
     */
    List<ApplicationModel> getAllApplications();

    /**
     * Gets a list of all available applications.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ApplicationModel>> getAllApplicationsAsync(final ServiceCallback<List<ApplicationModel>> serviceCallback);

    /**
     * Gets a list of all available applications.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ApplicationModel&gt; object
     */
    Observable<List<ApplicationModel>> getAllApplicationsAsync();

    /**
     * Gets a list of all available applications.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<ApplicationModel>>> getAllApplicationsWithServiceResponseAsync();

    /**
     * Gets a single application by its unique identifier.
     *
     * @param id The unique application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationModel object if successful.
     */
    ApplicationModel getApplicationById(int id);

    /**
     * Gets a single application by its unique identifier.
     *
     * @param id The unique application identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationModel> getApplicationByIdAsync(int id, final ServiceCallback<ApplicationModel> serviceCallback);

    /**
     * Gets a single application by its unique identifier.
     *
     * @param id The unique application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationModel object
     */
    Observable<ApplicationModel> getApplicationByIdAsync(int id);

    /**
     * Gets a single application by its unique identifier.
     *
     * @param id The unique application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationModel object
     */
    Observable<ServiceResponse<ApplicationModel>> getApplicationByIdWithServiceResponseAsync(int id);

    /**
     * Gets a single application by its name.
     *
     * @param name The unique application name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationModel object if successful.
     */
    ApplicationModel getApplicationByName(String name);

    /**
     * Gets a single application by its name.
     *
     * @param name The unique application name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationModel> getApplicationByNameAsync(String name, final ServiceCallback<ApplicationModel> serviceCallback);

    /**
     * Gets a single application by its name.
     *
     * @param name The unique application name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationModel object
     */
    Observable<ApplicationModel> getApplicationByNameAsync(String name);

    /**
     * Gets a single application by its name.
     *
     * @param name The unique application name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationModel object
     */
    Observable<ServiceResponse<ApplicationModel>> getApplicationByNameWithServiceResponseAsync(String name);

    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupDrawerModel&gt; object if successful.
     */
    List<GroupDrawerModel> getDrawerGroupAssociations(int drawerID);

    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupDrawerModel>> getDrawerGroupAssociationsAsync(int drawerID, final ServiceCallback<List<GroupDrawerModel>> serviceCallback);

    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<List<GroupDrawerModel>> getDrawerGroupAssociationsAsync(int drawerID);

    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<GroupDrawerModel>>> getDrawerGroupAssociationsWithServiceResponseAsync(int drawerID);
    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupDrawerModel&gt; object if successful.
     */
    List<GroupDrawerModel> getDrawerGroupAssociations(int drawerID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupDrawerModel>> getDrawerGroupAssociationsAsync(int drawerID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupDrawerModel>> serviceCallback);

    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<List<GroupDrawerModel>> getDrawerGroupAssociationsAsync(int drawerID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of drawer group associations.
     *
     * @param drawerID The drawer identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<GroupDrawerModel>>> getDrawerGroupAssociationsWithServiceResponseAsync(int drawerID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupDrawerModel&gt; object if successful.
     */
    List<GroupDrawerModel> getGroupDrawerAssociations(int groupID);

    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupDrawerModel>> getGroupDrawerAssociationsAsync(int groupID, final ServiceCallback<List<GroupDrawerModel>> serviceCallback);

    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<List<GroupDrawerModel>> getGroupDrawerAssociationsAsync(int groupID);

    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<GroupDrawerModel>>> getGroupDrawerAssociationsWithServiceResponseAsync(int groupID);
    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupDrawerModel&gt; object if successful.
     */
    List<GroupDrawerModel> getGroupDrawerAssociations(int groupID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupDrawerModel>> getGroupDrawerAssociationsAsync(int groupID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupDrawerModel>> serviceCallback);

    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<List<GroupDrawerModel>> getGroupDrawerAssociationsAsync(int groupID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group drawer associations.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<GroupDrawerModel>>> getGroupDrawerAssociationsWithServiceResponseAsync(int groupID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Inserts/Updates the drawer group association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateDrawerGroupAssociation(int groupID, int drawerID, GroupDrawerModel model);

    /**
     * Inserts/Updates the drawer group association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateDrawerGroupAssociationAsync(int groupID, int drawerID, GroupDrawerModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the drawer group association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateDrawerGroupAssociationAsync(int groupID, int drawerID, GroupDrawerModel model);

    /**
     * Inserts/Updates the drawer group association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateDrawerGroupAssociationWithServiceResponseAsync(int groupID, int drawerID, GroupDrawerModel model);

    /**
     * Deletes a drawer group association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteDrawerGroupAssociation(int groupID, int drawerID);

    /**
     * Deletes a drawer group association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteDrawerGroupAssociationAsync(int groupID, int drawerID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a drawer group association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteDrawerGroupAssociationAsync(int groupID, int drawerID);

    /**
     * Deletes a drawer group association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteDrawerGroupAssociationWithServiceResponseAsync(int groupID, int drawerID);

    /**
     * Inserts/Updates the group drawer association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateGroupDrawerAssociation(int groupID, int drawerID, GroupDrawerModel model);

    /**
     * Inserts/Updates the group drawer association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateGroupDrawerAssociationAsync(int groupID, int drawerID, GroupDrawerModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the group drawer association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateGroupDrawerAssociationAsync(int groupID, int drawerID, GroupDrawerModel model);

    /**
     * Inserts/Updates the group drawer association.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateGroupDrawerAssociationWithServiceResponseAsync(int groupID, int drawerID, GroupDrawerModel model);

    /**
     * Deletes a group drawer association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteGroupDrawerAssociation(int groupID, int drawerID);

    /**
     * Deletes a group drawer association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteGroupDrawerAssociationAsync(int groupID, int drawerID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a group drawer association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteGroupDrawerAssociationAsync(int groupID, int drawerID);

    /**
     * Deletes a group drawer association;.
     *
     * @param groupID The group identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteGroupDrawerAssociationWithServiceResponseAsync(int groupID, int drawerID);

    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupUserModel&gt; object if successful.
     */
    List<GroupUserModel> getUserGroupAssociations(int userID);

    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupUserModel>> getUserGroupAssociationsAsync(int userID, final ServiceCallback<List<GroupUserModel>> serviceCallback);

    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<List<GroupUserModel>> getUserGroupAssociationsAsync(int userID);

    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<ServiceResponse<List<GroupUserModel>>> getUserGroupAssociationsWithServiceResponseAsync(int userID);
    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupUserModel&gt; object if successful.
     */
    List<GroupUserModel> getUserGroupAssociations(int userID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupUserModel>> getUserGroupAssociationsAsync(int userID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupUserModel>> serviceCallback);

    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<List<GroupUserModel>> getUserGroupAssociationsAsync(int userID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user group associations.
     *
     * @param userID The user identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<ServiceResponse<List<GroupUserModel>>> getUserGroupAssociationsWithServiceResponseAsync(int userID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupUserModel&gt; object if successful.
     */
    List<GroupUserModel> getGroupUserAssociations(int groupID);

    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupUserModel>> getGroupUserAssociationsAsync(int groupID, final ServiceCallback<List<GroupUserModel>> serviceCallback);

    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<List<GroupUserModel>> getGroupUserAssociationsAsync(int groupID);

    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<ServiceResponse<List<GroupUserModel>>> getGroupUserAssociationsWithServiceResponseAsync(int groupID);
    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupUserModel&gt; object if successful.
     */
    List<GroupUserModel> getGroupUserAssociations(int groupID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupUserModel>> getGroupUserAssociationsAsync(int groupID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupUserModel>> serviceCallback);

    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<List<GroupUserModel>> getGroupUserAssociationsAsync(int groupID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group user associations.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupUserModel&gt; object
     */
    Observable<ServiceResponse<List<GroupUserModel>>> getGroupUserAssociationsWithServiceResponseAsync(int groupID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Inserts the user group association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createUserGroupAssociation(int groupID, int userID, GroupUserModel model);

    /**
     * Inserts the user group association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createUserGroupAssociationAsync(int groupID, int userID, GroupUserModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts the user group association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createUserGroupAssociationAsync(int groupID, int userID, GroupUserModel model);

    /**
     * Inserts the user group association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createUserGroupAssociationWithServiceResponseAsync(int groupID, int userID, GroupUserModel model);

    /**
     * Deletes a user group association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteUserGroupAssociation(int groupID, int userID);

    /**
     * Deletes a user group association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteUserGroupAssociationAsync(int groupID, int userID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a user group association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteUserGroupAssociationAsync(int groupID, int userID);

    /**
     * Deletes a user group association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteUserGroupAssociationWithServiceResponseAsync(int groupID, int userID);

    /**
     * Inserts the group user association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createGroupUserAssociation(int groupID, int userID, GroupUserModel model);

    /**
     * Inserts the group user association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createGroupUserAssociationAsync(int groupID, int userID, GroupUserModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts the group user association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createGroupUserAssociationAsync(int groupID, int userID, GroupUserModel model);

    /**
     * Inserts the group user association.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createGroupUserAssociationWithServiceResponseAsync(int groupID, int userID, GroupUserModel model);

    /**
     * Deletes a group user association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteGroupUserAssociation(int groupID, int userID);

    /**
     * Deletes a group user association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteGroupUserAssociationAsync(int groupID, int userID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a group user association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteGroupUserAssociationAsync(int groupID, int userID);

    /**
     * Deletes a group user association;.
     *
     * @param groupID The group identifier.
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteGroupUserAssociationWithServiceResponseAsync(int groupID, int userID);

    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupQueueModel&gt; object if successful.
     */
    List<GroupQueueModel> getQueueGroupAssociations(int queueID);

    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupQueueModel>> getQueueGroupAssociationsAsync(int queueID, final ServiceCallback<List<GroupQueueModel>> serviceCallback);

    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<List<GroupQueueModel>> getQueueGroupAssociationsAsync(int queueID);

    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<ServiceResponse<List<GroupQueueModel>>> getQueueGroupAssociationsWithServiceResponseAsync(int queueID);
    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupQueueModel&gt; object if successful.
     */
    List<GroupQueueModel> getQueueGroupAssociations(int queueID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupQueueModel>> getQueueGroupAssociationsAsync(int queueID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupQueueModel>> serviceCallback);

    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<List<GroupQueueModel>> getQueueGroupAssociationsAsync(int queueID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of queue group associations.
     *
     * @param queueID The queue identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<ServiceResponse<List<GroupQueueModel>>> getQueueGroupAssociationsWithServiceResponseAsync(int queueID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupQueueModel&gt; object if successful.
     */
    List<GroupQueueModel> getGroupQueueAssociations(int groupID);

    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupQueueModel>> getGroupQueueAssociationsAsync(int groupID, final ServiceCallback<List<GroupQueueModel>> serviceCallback);

    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<List<GroupQueueModel>> getGroupQueueAssociationsAsync(int groupID);

    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<ServiceResponse<List<GroupQueueModel>>> getGroupQueueAssociationsWithServiceResponseAsync(int groupID);
    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupQueueModel&gt; object if successful.
     */
    List<GroupQueueModel> getGroupQueueAssociations(int groupID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupQueueModel>> getGroupQueueAssociationsAsync(int groupID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupQueueModel>> serviceCallback);

    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<List<GroupQueueModel>> getGroupQueueAssociationsAsync(int groupID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group queue associations.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupQueueModel&gt; object
     */
    Observable<ServiceResponse<List<GroupQueueModel>>> getGroupQueueAssociationsWithServiceResponseAsync(int groupID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Inserts/Updates the queue group association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateQueueGroupAssociation(int groupID, int queueID, GroupQueueModel model);

    /**
     * Inserts/Updates the queue group association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateQueueGroupAssociationAsync(int groupID, int queueID, GroupQueueModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the queue group association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateQueueGroupAssociationAsync(int groupID, int queueID, GroupQueueModel model);

    /**
     * Inserts/Updates the queue group association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateQueueGroupAssociationWithServiceResponseAsync(int groupID, int queueID, GroupQueueModel model);

    /**
     * Deletes a queue group association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteQueueGroupAssociation(int groupID, int queueID);

    /**
     * Deletes a queue group association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteQueueGroupAssociationAsync(int groupID, int queueID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a queue group association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteQueueGroupAssociationAsync(int groupID, int queueID);

    /**
     * Deletes a queue group association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteQueueGroupAssociationWithServiceResponseAsync(int groupID, int queueID);

    /**
     * Inserts/Updates the group queue association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateGroupQueueAssociation(int groupID, int queueID, GroupQueueModel model);

    /**
     * Inserts/Updates the group queue association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateGroupQueueAssociationAsync(int groupID, int queueID, GroupQueueModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the group queue association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateGroupQueueAssociationAsync(int groupID, int queueID, GroupQueueModel model);

    /**
     * Inserts/Updates the group queue association.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateGroupQueueAssociationWithServiceResponseAsync(int groupID, int queueID, GroupQueueModel model);

    /**
     * Deletes a group queue association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteGroupQueueAssociation(int groupID, int queueID);

    /**
     * Deletes a group queue association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteGroupQueueAssociationAsync(int groupID, int queueID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a group queue association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteGroupQueueAssociationAsync(int groupID, int queueID);

    /**
     * Deletes a group queue association;.
     *
     * @param groupID The group identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteGroupQueueAssociationWithServiceResponseAsync(int groupID, int queueID);

    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupApplicationModel&gt; object if successful.
     */
    List<GroupApplicationModel> getApplicationGroupAssociations(int applicationID);

    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupApplicationModel>> getApplicationGroupAssociationsAsync(int applicationID, final ServiceCallback<List<GroupApplicationModel>> serviceCallback);

    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<List<GroupApplicationModel>> getApplicationGroupAssociationsAsync(int applicationID);

    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<GroupApplicationModel>>> getApplicationGroupAssociationsWithServiceResponseAsync(int applicationID);
    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupApplicationModel&gt; object if successful.
     */
    List<GroupApplicationModel> getApplicationGroupAssociations(int applicationID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupApplicationModel>> getApplicationGroupAssociationsAsync(int applicationID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupApplicationModel>> serviceCallback);

    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<List<GroupApplicationModel>> getApplicationGroupAssociationsAsync(int applicationID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of application group associations.
     *
     * @param applicationID The application identifier.
     * @param groupID The group identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<GroupApplicationModel>>> getApplicationGroupAssociationsWithServiceResponseAsync(int applicationID, Integer groupID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupApplicationModel&gt; object if successful.
     */
    List<GroupApplicationModel> getGroupApplicationAssociations(int groupID);

    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupApplicationModel>> getGroupApplicationAssociationsAsync(int groupID, final ServiceCallback<List<GroupApplicationModel>> serviceCallback);

    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<List<GroupApplicationModel>> getGroupApplicationAssociationsAsync(int groupID);

    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<GroupApplicationModel>>> getGroupApplicationAssociationsWithServiceResponseAsync(int groupID);
    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupApplicationModel&gt; object if successful.
     */
    List<GroupApplicationModel> getGroupApplicationAssociations(int groupID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupApplicationModel>> getGroupApplicationAssociationsAsync(int groupID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupApplicationModel>> serviceCallback);

    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<List<GroupApplicationModel>> getGroupApplicationAssociationsAsync(int groupID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of group application associations.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<GroupApplicationModel>>> getGroupApplicationAssociationsWithServiceResponseAsync(int groupID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Inserts/Updates the application group association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateApplicationGroupAssociation(int groupID, int applicationID, GroupApplicationModel model);

    /**
     * Inserts/Updates the application group association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateApplicationGroupAssociationAsync(int groupID, int applicationID, GroupApplicationModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the application group association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateApplicationGroupAssociationAsync(int groupID, int applicationID, GroupApplicationModel model);

    /**
     * Inserts/Updates the application group association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateApplicationGroupAssociationWithServiceResponseAsync(int groupID, int applicationID, GroupApplicationModel model);

    /**
     * Deletes a application group association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteApplicationGroupAssociation(int groupID, int applicationID);

    /**
     * Deletes a application group association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteApplicationGroupAssociationAsync(int groupID, int applicationID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a application group association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteApplicationGroupAssociationAsync(int groupID, int applicationID);

    /**
     * Deletes a application group association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteApplicationGroupAssociationWithServiceResponseAsync(int groupID, int applicationID);

    /**
     * Inserts/Updates the group application association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateGroupApplicationAssociation(int groupID, int applicationID, GroupApplicationModel model);

    /**
     * Inserts/Updates the group application association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateGroupApplicationAssociationAsync(int groupID, int applicationID, GroupApplicationModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the group application association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateGroupApplicationAssociationAsync(int groupID, int applicationID, GroupApplicationModel model);

    /**
     * Inserts/Updates the group application association.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateGroupApplicationAssociationWithServiceResponseAsync(int groupID, int applicationID, GroupApplicationModel model);

    /**
     * Deletes a group application association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteGroupApplicationAssociation(int groupID, int applicationID);

    /**
     * Deletes a group application association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteGroupApplicationAssociationAsync(int groupID, int applicationID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a group application association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteGroupApplicationAssociationAsync(int groupID, int applicationID);

    /**
     * Deletes a group application association;.
     *
     * @param groupID The group identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteGroupApplicationAssociationWithServiceResponseAsync(int groupID, int applicationID);

    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserDrawerModel&gt; object if successful.
     */
    List<UserDrawerModel> getDrawerUserAssociations(int drawerID);

    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserDrawerModel>> getDrawerUserAssociationsAsync(int drawerID, final ServiceCallback<List<UserDrawerModel>> serviceCallback);

    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<List<UserDrawerModel>> getDrawerUserAssociationsAsync(int drawerID);

    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<UserDrawerModel>>> getDrawerUserAssociationsWithServiceResponseAsync(int drawerID);
    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserDrawerModel&gt; object if successful.
     */
    List<UserDrawerModel> getDrawerUserAssociations(int drawerID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserDrawerModel>> getDrawerUserAssociationsAsync(int drawerID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<UserDrawerModel>> serviceCallback);

    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<List<UserDrawerModel>> getDrawerUserAssociationsAsync(int drawerID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of drawer user associations.
     *
     * @param drawerID The drawer identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<UserDrawerModel>>> getDrawerUserAssociationsWithServiceResponseAsync(int drawerID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserDrawerModel&gt; object if successful.
     */
    List<UserDrawerModel> getUserDrawerAssociations(int userID);

    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserDrawerModel>> getUserDrawerAssociationsAsync(int userID, final ServiceCallback<List<UserDrawerModel>> serviceCallback);

    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<List<UserDrawerModel>> getUserDrawerAssociationsAsync(int userID);

    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<UserDrawerModel>>> getUserDrawerAssociationsWithServiceResponseAsync(int userID);
    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserDrawerModel&gt; object if successful.
     */
    List<UserDrawerModel> getUserDrawerAssociations(int userID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserDrawerModel>> getUserDrawerAssociationsAsync(int userID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<UserDrawerModel>> serviceCallback);

    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<List<UserDrawerModel>> getUserDrawerAssociationsAsync(int userID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user drawer associations.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserDrawerModel&gt; object
     */
    Observable<ServiceResponse<List<UserDrawerModel>>> getUserDrawerAssociationsWithServiceResponseAsync(int userID, Integer drawerID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Inserts/Updates the drawer user association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateDrawerUserAssociation(int userID, int drawerID, UserDrawerModel model);

    /**
     * Inserts/Updates the drawer user association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateDrawerUserAssociationAsync(int userID, int drawerID, UserDrawerModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the drawer user association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateDrawerUserAssociationAsync(int userID, int drawerID, UserDrawerModel model);

    /**
     * Inserts/Updates the drawer user association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateDrawerUserAssociationWithServiceResponseAsync(int userID, int drawerID, UserDrawerModel model);

    /**
     * Deletes a drawer user association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteDrawerUserAssociation(int userID, int drawerID);

    /**
     * Deletes a drawer user association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteDrawerUserAssociationAsync(int userID, int drawerID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a drawer user association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteDrawerUserAssociationAsync(int userID, int drawerID);

    /**
     * Deletes a drawer user association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteDrawerUserAssociationWithServiceResponseAsync(int userID, int drawerID);

    /**
     * Inserts/Updates the user drawer association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateUserDrawerAssociation(int userID, int drawerID, UserDrawerModel model);

    /**
     * Inserts/Updates the user drawer association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateUserDrawerAssociationAsync(int userID, int drawerID, UserDrawerModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the user drawer association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateUserDrawerAssociationAsync(int userID, int drawerID, UserDrawerModel model);

    /**
     * Inserts/Updates the user drawer association.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateUserDrawerAssociationWithServiceResponseAsync(int userID, int drawerID, UserDrawerModel model);

    /**
     * Deletes a user drawer association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteUserDrawerAssociation(int userID, int drawerID);

    /**
     * Deletes a user drawer association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteUserDrawerAssociationAsync(int userID, int drawerID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a user drawer association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteUserDrawerAssociationAsync(int userID, int drawerID);

    /**
     * Deletes a user drawer association;.
     *
     * @param userID The user identifier.
     * @param drawerID The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteUserDrawerAssociationWithServiceResponseAsync(int userID, int drawerID);

    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserQueueModel&gt; object if successful.
     */
    List<UserQueueModel> getQueueUserAssociations(int queueID);

    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserQueueModel>> getQueueUserAssociationsAsync(int queueID, final ServiceCallback<List<UserQueueModel>> serviceCallback);

    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<List<UserQueueModel>> getQueueUserAssociationsAsync(int queueID);

    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<ServiceResponse<List<UserQueueModel>>> getQueueUserAssociationsWithServiceResponseAsync(int queueID);
    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserQueueModel&gt; object if successful.
     */
    List<UserQueueModel> getQueueUserAssociations(int queueID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserQueueModel>> getQueueUserAssociationsAsync(int queueID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<UserQueueModel>> serviceCallback);

    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<List<UserQueueModel>> getQueueUserAssociationsAsync(int queueID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of queue user associations.
     *
     * @param queueID The queue identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<ServiceResponse<List<UserQueueModel>>> getQueueUserAssociationsWithServiceResponseAsync(int queueID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserQueueModel&gt; object if successful.
     */
    List<UserQueueModel> getUserQueueAssociations(int userID);

    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserQueueModel>> getUserQueueAssociationsAsync(int userID, final ServiceCallback<List<UserQueueModel>> serviceCallback);

    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<List<UserQueueModel>> getUserQueueAssociationsAsync(int userID);

    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<ServiceResponse<List<UserQueueModel>>> getUserQueueAssociationsWithServiceResponseAsync(int userID);
    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserQueueModel&gt; object if successful.
     */
    List<UserQueueModel> getUserQueueAssociations(int userID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserQueueModel>> getUserQueueAssociationsAsync(int userID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<UserQueueModel>> serviceCallback);

    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<List<UserQueueModel>> getUserQueueAssociationsAsync(int userID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user queue associations.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserQueueModel&gt; object
     */
    Observable<ServiceResponse<List<UserQueueModel>>> getUserQueueAssociationsWithServiceResponseAsync(int userID, Integer queueID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Inserts/Updates the queue user association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateQueueUserAssociation(int userID, int queueID, UserQueueModel model);

    /**
     * Inserts/Updates the queue user association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateQueueUserAssociationAsync(int userID, int queueID, UserQueueModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the queue user association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateQueueUserAssociationAsync(int userID, int queueID, UserQueueModel model);

    /**
     * Inserts/Updates the queue user association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateQueueUserAssociationWithServiceResponseAsync(int userID, int queueID, UserQueueModel model);

    /**
     * Deletes a queue user association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteQueueUserAssociation(int userID, int queueID);

    /**
     * Deletes a queue user association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteQueueUserAssociationAsync(int userID, int queueID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a queue user association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteQueueUserAssociationAsync(int userID, int queueID);

    /**
     * Deletes a queue user association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteQueueUserAssociationWithServiceResponseAsync(int userID, int queueID);

    /**
     * Inserts/Updates the user queue association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateUserQueueAssociation(int userID, int queueID, UserQueueModel model);

    /**
     * Inserts/Updates the user queue association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateUserQueueAssociationAsync(int userID, int queueID, UserQueueModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the user queue association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateUserQueueAssociationAsync(int userID, int queueID, UserQueueModel model);

    /**
     * Inserts/Updates the user queue association.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateUserQueueAssociationWithServiceResponseAsync(int userID, int queueID, UserQueueModel model);

    /**
     * Deletes a user queue association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteUserQueueAssociation(int userID, int queueID);

    /**
     * Deletes a user queue association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteUserQueueAssociationAsync(int userID, int queueID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a user queue association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteUserQueueAssociationAsync(int userID, int queueID);

    /**
     * Deletes a user queue association;.
     *
     * @param userID The user identifier.
     * @param queueID The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteUserQueueAssociationWithServiceResponseAsync(int userID, int queueID);

    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserApplicationModel&gt; object if successful.
     */
    List<UserApplicationModel> getApplicationUserAssociations(int applicationID);

    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserApplicationModel>> getApplicationUserAssociationsAsync(int applicationID, final ServiceCallback<List<UserApplicationModel>> serviceCallback);

    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<List<UserApplicationModel>> getApplicationUserAssociationsAsync(int applicationID);

    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<UserApplicationModel>>> getApplicationUserAssociationsWithServiceResponseAsync(int applicationID);
    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserApplicationModel&gt; object if successful.
     */
    List<UserApplicationModel> getApplicationUserAssociations(int applicationID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserApplicationModel>> getApplicationUserAssociationsAsync(int applicationID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<UserApplicationModel>> serviceCallback);

    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<List<UserApplicationModel>> getApplicationUserAssociationsAsync(int applicationID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of application user associations.
     *
     * @param applicationID The application identifier.
     * @param userID The user identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<UserApplicationModel>>> getApplicationUserAssociationsWithServiceResponseAsync(int applicationID, Integer userID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserApplicationModel&gt; object if successful.
     */
    List<UserApplicationModel> getUserApplicationAssociations(int userID);

    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserApplicationModel>> getUserApplicationAssociationsAsync(int userID, final ServiceCallback<List<UserApplicationModel>> serviceCallback);

    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<List<UserApplicationModel>> getUserApplicationAssociationsAsync(int userID);

    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<UserApplicationModel>>> getUserApplicationAssociationsWithServiceResponseAsync(int userID);
    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserApplicationModel&gt; object if successful.
     */
    List<UserApplicationModel> getUserApplicationAssociations(int userID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserApplicationModel>> getUserApplicationAssociationsAsync(int userID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<UserApplicationModel>> serviceCallback);

    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<List<UserApplicationModel>> getUserApplicationAssociationsAsync(int userID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a list of user application associations.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param acl Gets or sets the access control level permissions.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID', 'Acl'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserApplicationModel&gt; object
     */
    Observable<ServiceResponse<List<UserApplicationModel>>> getUserApplicationAssociationsWithServiceResponseAsync(int userID, Integer applicationID, Integer acl, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Inserts/Updates the application user association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateApplicationUserAssociation(int userID, int applicationID, UserApplicationModel model);

    /**
     * Inserts/Updates the application user association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateApplicationUserAssociationAsync(int userID, int applicationID, UserApplicationModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the application user association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateApplicationUserAssociationAsync(int userID, int applicationID, UserApplicationModel model);

    /**
     * Inserts/Updates the application user association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateApplicationUserAssociationWithServiceResponseAsync(int userID, int applicationID, UserApplicationModel model);

    /**
     * Deletes an application user association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteApplicationUserAssociation(int userID, int applicationID);

    /**
     * Deletes an application user association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteApplicationUserAssociationAsync(int userID, int applicationID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes an application user association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteApplicationUserAssociationAsync(int userID, int applicationID);

    /**
     * Deletes an application user association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteApplicationUserAssociationWithServiceResponseAsync(int userID, int applicationID);

    /**
     * Inserts/Updates the user application association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateUserApplicationAssociation(int userID, int applicationID, UserApplicationModel model);

    /**
     * Inserts/Updates the user application association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateUserApplicationAssociationAsync(int userID, int applicationID, UserApplicationModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts/Updates the user application association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateUserApplicationAssociationAsync(int userID, int applicationID, UserApplicationModel model);

    /**
     * Inserts/Updates the user application association.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateUserApplicationAssociationWithServiceResponseAsync(int userID, int applicationID, UserApplicationModel model);

    /**
     * Deletes a user application association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteUserApplicationAssociation(int userID, int applicationID);

    /**
     * Deletes a user application association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteUserApplicationAssociationAsync(int userID, int applicationID, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a user application association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteUserApplicationAssociationAsync(int userID, int applicationID);

    /**
     * Deletes a user application association;.
     *
     * @param userID The user identifier.
     * @param applicationID The application identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteUserApplicationAssociationWithServiceResponseAsync(int userID, int applicationID);

    /**
     * Gets a paged list of attachment metadata.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AttachmentModel&gt; object if successful.
     */
    List<AttachmentModel> getAttachmentsByFilter();

    /**
     * Gets a paged list of attachment metadata.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<AttachmentModel>> getAttachmentsByFilterAsync(final ServiceCallback<List<AttachmentModel>> serviceCallback);

    /**
     * Gets a paged list of attachment metadata.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentModel&gt; object
     */
    Observable<List<AttachmentModel>> getAttachmentsByFilterAsync();

    /**
     * Gets a paged list of attachment metadata.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentModel&gt; object
     */
    Observable<ServiceResponse<List<AttachmentModel>>> getAttachmentsByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of attachment metadata.
     *
     * @param type Gets or sets the type. Possible values include: 'Standard', 'EntityLink', 'WebLink'
     * @param extension Gets or sets the extension.
     * @param minSize Gets or sets the minimum size.
     * @param maxSize Gets or sets the maximum size.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AttachmentModel&gt; object if successful.
     */
    List<AttachmentModel> getAttachmentsByFilter(String type, String extension, Long minSize, Long maxSize, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of attachment metadata.
     *
     * @param type Gets or sets the type. Possible values include: 'Standard', 'EntityLink', 'WebLink'
     * @param extension Gets or sets the extension.
     * @param minSize Gets or sets the minimum size.
     * @param maxSize Gets or sets the maximum size.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<AttachmentModel>> getAttachmentsByFilterAsync(String type, String extension, Long minSize, Long maxSize, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<AttachmentModel>> serviceCallback);

    /**
     * Gets a paged list of attachment metadata.
     *
     * @param type Gets or sets the type. Possible values include: 'Standard', 'EntityLink', 'WebLink'
     * @param extension Gets or sets the extension.
     * @param minSize Gets or sets the minimum size.
     * @param maxSize Gets or sets the maximum size.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentModel&gt; object
     */
    Observable<List<AttachmentModel>> getAttachmentsByFilterAsync(String type, String extension, Long minSize, Long maxSize, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of attachment metadata.
     *
     * @param type Gets or sets the type. Possible values include: 'Standard', 'EntityLink', 'WebLink'
     * @param extension Gets or sets the extension.
     * @param minSize Gets or sets the minimum size.
     * @param maxSize Gets or sets the maximum size.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentModel&gt; object
     */
    Observable<ServiceResponse<List<AttachmentModel>>> getAttachmentsByFilterWithServiceResponseAsync(String type, String extension, Long minSize, Long maxSize, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a single attachment metadata based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttachmentModel object if successful.
     */
    AttachmentModel getAttachmentById(int drawer, int id);

    /**
     * Gets a single attachment metadata based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AttachmentModel> getAttachmentByIdAsync(int drawer, int id, final ServiceCallback<AttachmentModel> serviceCallback);

    /**
     * Gets a single attachment metadata based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttachmentModel object
     */
    Observable<AttachmentModel> getAttachmentByIdAsync(int drawer, int id);

    /**
     * Gets a single attachment metadata based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttachmentModel object
     */
    Observable<ServiceResponse<AttachmentModel>> getAttachmentByIdWithServiceResponseAsync(int drawer, int id);

    /**
     * Updates a specified attachment's metadata..
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAttachment(int drawer, int id, UpdateAttachmentRequestModel model);

    /**
     * Updates a specified attachment's metadata..
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAttachmentAsync(int drawer, int id, UpdateAttachmentRequestModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified attachment's metadata..
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAttachmentAsync(int drawer, int id, UpdateAttachmentRequestModel model);

    /**
     * Updates a specified attachment's metadata..
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateAttachmentWithServiceResponseAsync(int drawer, int id, UpdateAttachmentRequestModel model);

    /**
     * Deletes an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteAttachment(int drawer, int id);

    /**
     * Deletes an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteAttachmentAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteAttachmentAsync(int drawer, int id);

    /**
     * Deletes an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteAttachmentWithServiceResponseAsync(int drawer, int id);

    /**
     * Gets an attachment's file content.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAttachmentFileContent(int drawer, int id);

    /**
     * Gets an attachment's file content.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAttachmentFileContentAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets an attachment's file content.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAttachmentFileContentAsync(int drawer, int id);

    /**
     * Gets an attachment's file content.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getAttachmentFileContentWithServiceResponseAsync(int drawer, int id);

    /**
     * Inserts a new file attachment.
     *
     * @param drawer The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttachmentModel object if successful.
     */
    AttachmentModel createAttachment(int drawer);

    /**
     * Inserts a new file attachment.
     *
     * @param drawer The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AttachmentModel> createAttachmentAsync(int drawer, final ServiceCallback<AttachmentModel> serviceCallback);

    /**
     * Inserts a new file attachment.
     *
     * @param drawer The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttachmentModel object
     */
    Observable<AttachmentModel> createAttachmentAsync(int drawer);

    /**
     * Inserts a new file attachment.
     *
     * @param drawer The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttachmentModel object
     */
    Observable<ServiceResponse<AttachmentModel>> createAttachmentWithServiceResponseAsync(int drawer);

    /**
     * Archives an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object archiveAttachment(int drawer, int id);

    /**
     * Archives an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> archiveAttachmentAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Archives an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> archiveAttachmentAsync(int drawer, int id);

    /**
     * Archives an attachment.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> archiveAttachmentWithServiceResponseAsync(int drawer, int id);

    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AttachmentVersionModel&gt; object if successful.
     */
    List<AttachmentVersionModel> getAttachmentVersionsByFilter(int drawer, int id);

    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<AttachmentVersionModel>> getAttachmentVersionsByFilterAsync(int drawer, int id, final ServiceCallback<List<AttachmentVersionModel>> serviceCallback);

    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentVersionModel&gt; object
     */
    Observable<List<AttachmentVersionModel>> getAttachmentVersionsByFilterAsync(int drawer, int id);

    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentVersionModel&gt; object
     */
    Observable<ServiceResponse<List<AttachmentVersionModel>>> getAttachmentVersionsByFilterWithServiceResponseAsync(int drawer, int id);
    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param version Gets or sets the indexed version value.
     * @param creatorUserID Gets or sets the creator identifier.
     * @param accessorUserID Gets or sets the identifier of the user who accessed the attachment version.
     * @param minAccessTime Gets or sets the min time the version was last accessed.
     * @param maxAccessTime Gets or sets the max time the version was last accessed.
     * @param minCreationTime Gets or sets the min creation time of the attachment version.
     * @param maxCreationTime Gets or sets the max creation time of the attachment version.
     * @param minModificationTime Gets or sets the min modification time of the attachment version.
     * @param maxModificationTime Gets or sets the max modification time of the attachment version.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID', 'AccessTime', 'CreationTime', 'ModificationTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AttachmentVersionModel&gt; object if successful.
     */
    List<AttachmentVersionModel> getAttachmentVersionsByFilter(int drawer, int id, Integer version, Integer creatorUserID, Integer accessorUserID, DateTime minAccessTime, DateTime maxAccessTime, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param version Gets or sets the indexed version value.
     * @param creatorUserID Gets or sets the creator identifier.
     * @param accessorUserID Gets or sets the identifier of the user who accessed the attachment version.
     * @param minAccessTime Gets or sets the min time the version was last accessed.
     * @param maxAccessTime Gets or sets the max time the version was last accessed.
     * @param minCreationTime Gets or sets the min creation time of the attachment version.
     * @param maxCreationTime Gets or sets the max creation time of the attachment version.
     * @param minModificationTime Gets or sets the min modification time of the attachment version.
     * @param maxModificationTime Gets or sets the max modification time of the attachment version.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID', 'AccessTime', 'CreationTime', 'ModificationTime'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<AttachmentVersionModel>> getAttachmentVersionsByFilterAsync(int drawer, int id, Integer version, Integer creatorUserID, Integer accessorUserID, DateTime minAccessTime, DateTime maxAccessTime, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<AttachmentVersionModel>> serviceCallback);

    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param version Gets or sets the indexed version value.
     * @param creatorUserID Gets or sets the creator identifier.
     * @param accessorUserID Gets or sets the identifier of the user who accessed the attachment version.
     * @param minAccessTime Gets or sets the min time the version was last accessed.
     * @param maxAccessTime Gets or sets the max time the version was last accessed.
     * @param minCreationTime Gets or sets the min creation time of the attachment version.
     * @param maxCreationTime Gets or sets the max creation time of the attachment version.
     * @param minModificationTime Gets or sets the min modification time of the attachment version.
     * @param maxModificationTime Gets or sets the max modification time of the attachment version.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID', 'AccessTime', 'CreationTime', 'ModificationTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentVersionModel&gt; object
     */
    Observable<List<AttachmentVersionModel>> getAttachmentVersionsByFilterAsync(int drawer, int id, Integer version, Integer creatorUserID, Integer accessorUserID, DateTime minAccessTime, DateTime maxAccessTime, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets the paged list of attachment versions.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param version Gets or sets the indexed version value.
     * @param creatorUserID Gets or sets the creator identifier.
     * @param accessorUserID Gets or sets the identifier of the user who accessed the attachment version.
     * @param minAccessTime Gets or sets the min time the version was last accessed.
     * @param maxAccessTime Gets or sets the max time the version was last accessed.
     * @param minCreationTime Gets or sets the min creation time of the attachment version.
     * @param maxCreationTime Gets or sets the max creation time of the attachment version.
     * @param minModificationTime Gets or sets the min modification time of the attachment version.
     * @param maxModificationTime Gets or sets the max modification time of the attachment version.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID', 'AccessTime', 'CreationTime', 'ModificationTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AttachmentVersionModel&gt; object
     */
    Observable<ServiceResponse<List<AttachmentVersionModel>>> getAttachmentVersionsByFilterWithServiceResponseAsync(int drawer, int id, Integer version, Integer creatorUserID, Integer accessorUserID, DateTime minAccessTime, DateTime maxAccessTime, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a file for a specified attachment version.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAttachmentVersionFileContent(int drawer, int id, int versionID);

    /**
     * Gets a file for a specified attachment version.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAttachmentVersionFileContentAsync(int drawer, int id, int versionID, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets a file for a specified attachment version.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAttachmentVersionFileContentAsync(int drawer, int id, int versionID);

    /**
     * Gets a file for a specified attachment version.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> getAttachmentVersionFileContentWithServiceResponseAsync(int drawer, int id, int versionID);

    /**
     * Checks out the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object checkOutAttachment(int drawer, int id);

    /**
     * Checks out the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> checkOutAttachmentAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Checks out the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> checkOutAttachmentAsync(int drawer, int id);

    /**
     * Checks out the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> checkOutAttachmentWithServiceResponseAsync(int drawer, int id);

    /**
     * Undoes the attachment check out of the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object undoCheckOutAttachment(int drawer, int id);

    /**
     * Undoes the attachment check out of the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> undoCheckOutAttachmentAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Undoes the attachment check out of the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> undoCheckOutAttachmentAsync(int drawer, int id);

    /**
     * Undoes the attachment check out of the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> undoCheckOutAttachmentWithServiceResponseAsync(int drawer, int id);

    /**
     * Checks in the new version of attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object checkInAttachment(int drawer, int id);

    /**
     * Checks in the new version of attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> checkInAttachmentAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Checks in the new version of attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> checkInAttachmentAsync(int drawer, int id);

    /**
     * Checks in the new version of attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> checkInAttachmentWithServiceResponseAsync(int drawer, int id);

    /**
     * Rolls back to a specified version the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object rollbackAttachmentVersion(int drawer, int id, int versionID);

    /**
     * Rolls back to a specified version the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> rollbackAttachmentVersionAsync(int drawer, int id, int versionID, final ServiceCallback<Object> serviceCallback);

    /**
     * Rolls back to a specified version the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> rollbackAttachmentVersionAsync(int drawer, int id, int versionID);

    /**
     * Rolls back to a specified version the attachment file.
     *
     * @param drawer The drawer identifier.
     * @param id The attachment identifier.
     * @param versionID The version identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> rollbackAttachmentVersionWithServiceResponseAsync(int drawer, int id, int versionID);

    /**
     * Gets a list of all available drawers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DrawerModel&gt; object if successful.
     */
    List<DrawerModel> getAllDrawers();

    /**
     * Gets a list of all available drawers.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<DrawerModel>> getAllDrawersAsync(final ServiceCallback<List<DrawerModel>> serviceCallback);

    /**
     * Gets a list of all available drawers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DrawerModel&gt; object
     */
    Observable<List<DrawerModel>> getAllDrawersAsync();

    /**
     * Gets a list of all available drawers.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DrawerModel&gt; object
     */
    Observable<ServiceResponse<List<DrawerModel>>> getAllDrawersWithServiceResponseAsync();

    /**
     * Gets a single drawer by its unique identifier.
     *
     * @param id The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DrawerModel object if successful.
     */
    DrawerModel getDrawerById(int id);

    /**
     * Gets a single drawer by its unique identifier.
     *
     * @param id The drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DrawerModel> getDrawerByIdAsync(int id, final ServiceCallback<DrawerModel> serviceCallback);

    /**
     * Gets a single drawer by its unique identifier.
     *
     * @param id The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DrawerModel object
     */
    Observable<DrawerModel> getDrawerByIdAsync(int id);

    /**
     * Gets a single drawer by its unique identifier.
     *
     * @param id The drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DrawerModel object
     */
    Observable<ServiceResponse<DrawerModel>> getDrawerByIdWithServiceResponseAsync(int id);

    /**
     * Updates a specified drawer.
     *
     * @param id The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateDrawer(int id, DrawerBase model);

    /**
     * Updates a specified drawer.
     *
     * @param id The drawer identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateDrawerAsync(int id, DrawerBase model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified drawer.
     *
     * @param id The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateDrawerAsync(int id, DrawerBase model);

    /**
     * Updates a specified drawer.
     *
     * @param id The drawer identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateDrawerWithServiceResponseAsync(int id, DrawerBase model);

    /**
     * Gets a single drawer by its name.
     *
     * @param name The drawer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DrawerModel object if successful.
     */
    DrawerModel getDrawerByName(String name);

    /**
     * Gets a single drawer by its name.
     *
     * @param name The drawer name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DrawerModel> getDrawerByNameAsync(String name, final ServiceCallback<DrawerModel> serviceCallback);

    /**
     * Gets a single drawer by its name.
     *
     * @param name The drawer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DrawerModel object
     */
    Observable<DrawerModel> getDrawerByNameAsync(String name);

    /**
     * Gets a single drawer by its name.
     *
     * @param name The drawer name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DrawerModel object
     */
    Observable<ServiceResponse<DrawerModel>> getDrawerByNameWithServiceResponseAsync(String name);

    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GetEntityBaseResponse&gt; object if successful.
     */
    List<GetEntityBaseResponse> getEntitiesByFilter(int drawerID);

    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GetEntityBaseResponse>> getEntitiesByFilterAsync(int drawerID, final ServiceCallback<List<GetEntityBaseResponse>> serviceCallback);

    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GetEntityBaseResponse&gt; object
     */
    Observable<List<GetEntityBaseResponse>> getEntitiesByFilterAsync(int drawerID);

    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GetEntityBaseResponse&gt; object
     */
    Observable<ServiceResponse<List<GetEntityBaseResponse>>> getEntitiesByFilterWithServiceResponseAsync(int drawerID);
    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param acl Gets or sets the access control list.
     * @param type Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param state Gets or sets the state. Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
     * @param referenceCount Gets or sets the reference count.
     * @param attachCount Gets or sets the attach count.
     * @param noteCount Gets or sets the note count.
     * @param ownerUserID Gets or sets the owner user identifier.
     * @param ownerGroupID Gets or sets the owner group identifier.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param creatorGroupID Gets or sets the creator group identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param modifierGroupID Gets or sets the modifier group identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param metadata Gets or sets the metadata.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime', 'State', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GetEntityBaseResponse&gt; object if successful.
     */
    List<GetEntityBaseResponse> getEntitiesByFilter(int drawerID, Integer acl, Integer type, String name, String state, Integer referenceCount, Integer attachCount, Integer noteCount, Integer ownerUserID, Integer ownerGroupID, Integer creatorUserID, Integer creatorGroupID, Integer modifierUserID, Integer modifierGroupID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param acl Gets or sets the access control list.
     * @param type Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param state Gets or sets the state. Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
     * @param referenceCount Gets or sets the reference count.
     * @param attachCount Gets or sets the attach count.
     * @param noteCount Gets or sets the note count.
     * @param ownerUserID Gets or sets the owner user identifier.
     * @param ownerGroupID Gets or sets the owner group identifier.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param creatorGroupID Gets or sets the creator group identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param modifierGroupID Gets or sets the modifier group identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param metadata Gets or sets the metadata.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime', 'State', 'Name'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GetEntityBaseResponse>> getEntitiesByFilterAsync(int drawerID, Integer acl, Integer type, String name, String state, Integer referenceCount, Integer attachCount, Integer noteCount, Integer ownerUserID, Integer ownerGroupID, Integer creatorUserID, Integer creatorGroupID, Integer modifierUserID, Integer modifierGroupID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GetEntityBaseResponse>> serviceCallback);

    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param acl Gets or sets the access control list.
     * @param type Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param state Gets or sets the state. Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
     * @param referenceCount Gets or sets the reference count.
     * @param attachCount Gets or sets the attach count.
     * @param noteCount Gets or sets the note count.
     * @param ownerUserID Gets or sets the owner user identifier.
     * @param ownerGroupID Gets or sets the owner group identifier.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param creatorGroupID Gets or sets the creator group identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param modifierGroupID Gets or sets the modifier group identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param metadata Gets or sets the metadata.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime', 'State', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GetEntityBaseResponse&gt; object
     */
    Observable<List<GetEntityBaseResponse>> getEntitiesByFilterAsync(int drawerID, Integer acl, Integer type, String name, String state, Integer referenceCount, Integer attachCount, Integer noteCount, Integer ownerUserID, Integer ownerGroupID, Integer creatorUserID, Integer creatorGroupID, Integer modifierUserID, Integer modifierGroupID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of entity summaries.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param acl Gets or sets the access control list.
     * @param type Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param state Gets or sets the state. Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
     * @param referenceCount Gets or sets the reference count.
     * @param attachCount Gets or sets the attach count.
     * @param noteCount Gets or sets the note count.
     * @param ownerUserID Gets or sets the owner user identifier.
     * @param ownerGroupID Gets or sets the owner group identifier.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param creatorGroupID Gets or sets the creator group identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param modifierGroupID Gets or sets the modifier group identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param metadata Gets or sets the metadata.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime', 'State', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GetEntityBaseResponse&gt; object
     */
    Observable<ServiceResponse<List<GetEntityBaseResponse>>> getEntitiesByFilterWithServiceResponseAsync(int drawerID, Integer acl, Integer type, String name, String state, Integer referenceCount, Integer attachCount, Integer noteCount, Integer ownerUserID, Integer ownerGroupID, Integer creatorUserID, Integer creatorGroupID, Integer modifierUserID, Integer modifierGroupID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a single entity complete with all profile metadata.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityModel object if successful.
     */
    EntityModel getEntityById(int drawer, int id);

    /**
     * Gets a single entity complete with all profile metadata.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityModel> getEntityByIdAsync(int drawer, int id, final ServiceCallback<EntityModel> serviceCallback);

    /**
     * Gets a single entity complete with all profile metadata.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityModel object
     */
    Observable<EntityModel> getEntityByIdAsync(int drawer, int id);

    /**
     * Gets a single entity complete with all profile metadata.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityModel object
     */
    Observable<ServiceResponse<EntityModel>> getEntityByIdWithServiceResponseAsync(int drawer, int id);

    /**
     * Updates a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateEntity(int drawer, int id, UpdateEntityRequestModel model);

    /**
     * Updates a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The entity model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateEntityAsync(int drawer, int id, UpdateEntityRequestModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateEntityAsync(int drawer, int id, UpdateEntityRequestModel model);

    /**
     * Updates a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateEntityWithServiceResponseAsync(int drawer, int id, UpdateEntityRequestModel model);

    /**
     * Deletes a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteEntity(int drawer, int id);

    /**
     * Deletes a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteEntityAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteEntityAsync(int drawer, int id);

    /**
     * Deletes a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteEntityWithServiceResponseAsync(int drawer, int id);

    /**
     * Creates a new entity.
     *
     * @param drawer The drawer identifier.
     * @param model The entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityModel object if successful.
     */
    EntityModel createEntity(int drawer, InsertEntityRequestModel model);

    /**
     * Creates a new entity.
     *
     * @param drawer The drawer identifier.
     * @param model The entity model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityModel> createEntityAsync(int drawer, InsertEntityRequestModel model, final ServiceCallback<EntityModel> serviceCallback);

    /**
     * Creates a new entity.
     *
     * @param drawer The drawer identifier.
     * @param model The entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityModel object
     */
    Observable<EntityModel> createEntityAsync(int drawer, InsertEntityRequestModel model);

    /**
     * Creates a new entity.
     *
     * @param drawer The drawer identifier.
     * @param model The entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityModel object
     */
    Observable<ServiceResponse<EntityModel>> createEntityWithServiceResponseAsync(int drawer, InsertEntityRequestModel model);

    /**
     * Copies the contents of an entity.
     *
     * @param drawer The drawer.
     * @param id The entity identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityModel object if successful.
     */
    EntityModel copyEntity(int drawer, int id, EntityContentModel model);

    /**
     * Copies the contents of an entity.
     *
     * @param drawer The drawer.
     * @param id The entity identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityModel> copyEntityAsync(int drawer, int id, EntityContentModel model, final ServiceCallback<EntityModel> serviceCallback);

    /**
     * Copies the contents of an entity.
     *
     * @param drawer The drawer.
     * @param id The entity identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityModel object
     */
    Observable<EntityModel> copyEntityAsync(int drawer, int id, EntityContentModel model);

    /**
     * Copies the contents of an entity.
     *
     * @param drawer The drawer.
     * @param id The entity identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityModel object
     */
    Observable<ServiceResponse<EntityModel>> copyEntityWithServiceResponseAsync(int drawer, int id, EntityContentModel model);

    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventModel&gt; object if successful.
     */
    List<EventModel> getEventsByFilter(int drawerID, int entityID);

    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EventModel>> getEventsByFilterAsync(int drawerID, int entityID, final ServiceCallback<List<EventModel>> serviceCallback);

    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventModel&gt; object
     */
    Observable<List<EventModel>> getEventsByFilterAsync(int drawerID, int entityID);

    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventModel&gt; object
     */
    Observable<ServiceResponse<List<EventModel>>> getEventsByFilterWithServiceResponseAsync(int drawerID, int entityID);
    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
     * @param minEventTime Gets or sets the minimum event time.
     * @param maxEventTime Gets or sets the maximum event time.
     * @param eventUserID Gets or sets the event user identifier.
     * @param eventGroupID Gets or sets the event group identifier.
     * @param category Gets or sets the category. Possible values include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion', 'Field', 'Workflow'
     * @param classParameter Gets or sets the class. Possible values include: 'Undefined', 'Application', 'Security', 'System'
     * @param operation Gets or sets the operation. Possible values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
     * @param minProcessingTime Gets or sets the minimum processing time.
     * @param maxProcessingTime Gets or sets the maximum processing time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'EventTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EventModel&gt; object if successful.
     */
    List<EventModel> getEventsByFilter(int drawerID, int entityID, String type, DateTime minEventTime, DateTime maxEventTime, Integer eventUserID, Integer eventGroupID, String category, String classParameter, String operation, Integer minProcessingTime, Integer maxProcessingTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
     * @param minEventTime Gets or sets the minimum event time.
     * @param maxEventTime Gets or sets the maximum event time.
     * @param eventUserID Gets or sets the event user identifier.
     * @param eventGroupID Gets or sets the event group identifier.
     * @param category Gets or sets the category. Possible values include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion', 'Field', 'Workflow'
     * @param classParameter Gets or sets the class. Possible values include: 'Undefined', 'Application', 'Security', 'System'
     * @param operation Gets or sets the operation. Possible values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
     * @param minProcessingTime Gets or sets the minimum processing time.
     * @param maxProcessingTime Gets or sets the maximum processing time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'EventTime'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EventModel>> getEventsByFilterAsync(int drawerID, int entityID, String type, DateTime minEventTime, DateTime maxEventTime, Integer eventUserID, Integer eventGroupID, String category, String classParameter, String operation, Integer minProcessingTime, Integer maxProcessingTime, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<EventModel>> serviceCallback);

    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
     * @param minEventTime Gets or sets the minimum event time.
     * @param maxEventTime Gets or sets the maximum event time.
     * @param eventUserID Gets or sets the event user identifier.
     * @param eventGroupID Gets or sets the event group identifier.
     * @param category Gets or sets the category. Possible values include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion', 'Field', 'Workflow'
     * @param classParameter Gets or sets the class. Possible values include: 'Undefined', 'Application', 'Security', 'System'
     * @param operation Gets or sets the operation. Possible values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
     * @param minProcessingTime Gets or sets the minimum processing time.
     * @param maxProcessingTime Gets or sets the maximum processing time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'EventTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventModel&gt; object
     */
    Observable<List<EventModel>> getEventsByFilterAsync(int drawerID, int entityID, String type, DateTime minEventTime, DateTime maxEventTime, Integer eventUserID, Integer eventGroupID, String category, String classParameter, String operation, Integer minProcessingTime, Integer maxProcessingTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of events.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
     * @param minEventTime Gets or sets the minimum event time.
     * @param maxEventTime Gets or sets the maximum event time.
     * @param eventUserID Gets or sets the event user identifier.
     * @param eventGroupID Gets or sets the event group identifier.
     * @param category Gets or sets the category. Possible values include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion', 'Field', 'Workflow'
     * @param classParameter Gets or sets the class. Possible values include: 'Undefined', 'Application', 'Security', 'System'
     * @param operation Gets or sets the operation. Possible values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
     * @param minProcessingTime Gets or sets the minimum processing time.
     * @param maxProcessingTime Gets or sets the maximum processing time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'EventTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EventModel&gt; object
     */
    Observable<ServiceResponse<List<EventModel>>> getEventsByFilterWithServiceResponseAsync(int drawerID, int entityID, String type, DateTime minEventTime, DateTime maxEventTime, Integer eventUserID, Integer eventGroupID, String category, String classParameter, String operation, Integer minProcessingTime, Integer maxProcessingTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Retrieves a single event based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The event identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventModel object if successful.
     */
    EventModel getEventById(int drawer, int id);

    /**
     * Retrieves a single event based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The event identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EventModel> getEventByIdAsync(int drawer, int id, final ServiceCallback<EventModel> serviceCallback);

    /**
     * Retrieves a single event based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The event identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventModel object
     */
    Observable<EventModel> getEventByIdAsync(int drawer, int id);

    /**
     * Retrieves a single event based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The event identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventModel object
     */
    Observable<ServiceResponse<EventModel>> getEventByIdWithServiceResponseAsync(int drawer, int id);

    /**
     * Creates a new event.
     *
     * @param drawer The drawer identifier.
     * @param model The event model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventModel object if successful.
     */
    EventModel createEvent(int drawer, EventModel model);

    /**
     * Creates a new event.
     *
     * @param drawer The drawer identifier.
     * @param model The event model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EventModel> createEventAsync(int drawer, EventModel model, final ServiceCallback<EventModel> serviceCallback);

    /**
     * Creates a new event.
     *
     * @param drawer The drawer identifier.
     * @param model The event model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventModel object
     */
    Observable<EventModel> createEventAsync(int drawer, EventModel model);

    /**
     * Creates a new event.
     *
     * @param drawer The drawer identifier.
     * @param model The event model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventModel object
     */
    Observable<ServiceResponse<EventModel>> createEventWithServiceResponseAsync(int drawer, EventModel model);

    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ExtensionModel&gt; object if successful.
     */
    List<ExtensionModel> getExtensionsByFilter(int drawerID, int entityID, int profileID);

    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ExtensionModel>> getExtensionsByFilterAsync(int drawerID, int entityID, int profileID, final ServiceCallback<List<ExtensionModel>> serviceCallback);

    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ExtensionModel&gt; object
     */
    Observable<List<ExtensionModel>> getExtensionsByFilterAsync(int drawerID, int entityID, int profileID);

    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ExtensionModel&gt; object
     */
    Observable<ServiceResponse<List<ExtensionModel>>> getExtensionsByFilterWithServiceResponseAsync(int drawerID, int entityID, int profileID);
    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @param iD Gets or sets the extension identifier.
     * @param type Gets or sets the type of the extension.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer', 'Double', 'Date'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ExtensionModel&gt; object if successful.
     */
    List<ExtensionModel> getExtensionsByFilter(int drawerID, int entityID, int profileID, Integer iD, Integer type, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @param iD Gets or sets the extension identifier.
     * @param type Gets or sets the type of the extension.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer', 'Double', 'Date'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<ExtensionModel>> getExtensionsByFilterAsync(int drawerID, int entityID, int profileID, Integer iD, Integer type, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<ExtensionModel>> serviceCallback);

    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @param iD Gets or sets the extension identifier.
     * @param type Gets or sets the type of the extension.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer', 'Double', 'Date'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ExtensionModel&gt; object
     */
    Observable<List<ExtensionModel>> getExtensionsByFilterAsync(int drawerID, int entityID, int profileID, Integer iD, Integer type, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of extension rows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param profileID Gets or sets the profile identifier.
     * @param iD Gets or sets the extension identifier.
     * @param type Gets or sets the type of the extension.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer', 'Double', 'Date'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ExtensionModel&gt; object
     */
    Observable<ServiceResponse<List<ExtensionModel>>> getExtensionsByFilterWithServiceResponseAsync(int drawerID, int entityID, int profileID, Integer iD, Integer type, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FlowModel&gt; object if successful.
     */
    List<FlowModel> getFlowsByFilter(int drawerID, int entityID);

    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<FlowModel>> getFlowsByFilterAsync(int drawerID, int entityID, final ServiceCallback<List<FlowModel>> serviceCallback);

    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FlowModel&gt; object
     */
    Observable<List<FlowModel>> getFlowsByFilterAsync(int drawerID, int entityID);

    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FlowModel&gt; object
     */
    Observable<ServiceResponse<List<FlowModel>>> getFlowsByFilterWithServiceResponseAsync(int drawerID, int entityID);
    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
     * @param queueID Gets or sets the queue identifier.
     * @param minWorkflowTime Gets or sets the minimum workflow time.
     * @param maxWorkflowTime Gets or sets the maximum workflow time.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param workflowUserID Gets or sets the workflow user identifier.
     * @param workflowGroupID Gets or sets the workflow group identifier.
     * @param operation Gets or sets the operation. Possible values include: 'None', 'Update', 'Reset', 'Override', 'Null'
     * @param category Gets or sets the category. Possible values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
     * @param status Gets or sets the status. Possible values include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
     * @param state Gets or sets the state. Possible values include: 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
     * @param minIndex1 Gets or sets the minimum index 1.
     * @param maxIndex1 Gets or sets the maximum index 1.
     * @param minIndex2 Gets or sets the minimum index 2.
     * @param maxIndex2 Gets or sets the maximum index 2.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime', 'Index'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FlowModel&gt; object if successful.
     */
    List<FlowModel> getFlowsByFilter(int drawerID, int entityID, String type, Integer queueID, DateTime minWorkflowTime, DateTime maxWorkflowTime, DateTime minInsertionTime, DateTime maxInsertionTime, Integer workflowUserID, Integer workflowGroupID, String operation, String category, String status, String state, Integer minIndex1, Integer maxIndex1, Integer minIndex2, Integer maxIndex2, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
     * @param queueID Gets or sets the queue identifier.
     * @param minWorkflowTime Gets or sets the minimum workflow time.
     * @param maxWorkflowTime Gets or sets the maximum workflow time.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param workflowUserID Gets or sets the workflow user identifier.
     * @param workflowGroupID Gets or sets the workflow group identifier.
     * @param operation Gets or sets the operation. Possible values include: 'None', 'Update', 'Reset', 'Override', 'Null'
     * @param category Gets or sets the category. Possible values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
     * @param status Gets or sets the status. Possible values include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
     * @param state Gets or sets the state. Possible values include: 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
     * @param minIndex1 Gets or sets the minimum index 1.
     * @param maxIndex1 Gets or sets the maximum index 1.
     * @param minIndex2 Gets or sets the minimum index 2.
     * @param maxIndex2 Gets or sets the maximum index 2.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime', 'Index'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<FlowModel>> getFlowsByFilterAsync(int drawerID, int entityID, String type, Integer queueID, DateTime minWorkflowTime, DateTime maxWorkflowTime, DateTime minInsertionTime, DateTime maxInsertionTime, Integer workflowUserID, Integer workflowGroupID, String operation, String category, String status, String state, Integer minIndex1, Integer maxIndex1, Integer minIndex2, Integer maxIndex2, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<FlowModel>> serviceCallback);

    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
     * @param queueID Gets or sets the queue identifier.
     * @param minWorkflowTime Gets or sets the minimum workflow time.
     * @param maxWorkflowTime Gets or sets the maximum workflow time.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param workflowUserID Gets or sets the workflow user identifier.
     * @param workflowGroupID Gets or sets the workflow group identifier.
     * @param operation Gets or sets the operation. Possible values include: 'None', 'Update', 'Reset', 'Override', 'Null'
     * @param category Gets or sets the category. Possible values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
     * @param status Gets or sets the status. Possible values include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
     * @param state Gets or sets the state. Possible values include: 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
     * @param minIndex1 Gets or sets the minimum index 1.
     * @param maxIndex1 Gets or sets the maximum index 1.
     * @param minIndex2 Gets or sets the minimum index 2.
     * @param maxIndex2 Gets or sets the maximum index 2.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime', 'Index'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FlowModel&gt; object
     */
    Observable<List<FlowModel>> getFlowsByFilterAsync(int drawerID, int entityID, String type, Integer queueID, DateTime minWorkflowTime, DateTime maxWorkflowTime, DateTime minInsertionTime, DateTime maxInsertionTime, Integer workflowUserID, Integer workflowGroupID, String operation, String category, String status, String state, Integer minIndex1, Integer maxIndex1, Integer minIndex2, Integer maxIndex2, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of flows.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param type Gets or sets the type. Possible values include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
     * @param queueID Gets or sets the queue identifier.
     * @param minWorkflowTime Gets or sets the minimum workflow time.
     * @param maxWorkflowTime Gets or sets the maximum workflow time.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param workflowUserID Gets or sets the workflow user identifier.
     * @param workflowGroupID Gets or sets the workflow group identifier.
     * @param operation Gets or sets the operation. Possible values include: 'None', 'Update', 'Reset', 'Override', 'Null'
     * @param category Gets or sets the category. Possible values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
     * @param status Gets or sets the status. Possible values include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
     * @param state Gets or sets the state. Possible values include: 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
     * @param minIndex1 Gets or sets the minimum index 1.
     * @param maxIndex1 Gets or sets the maximum index 1.
     * @param minIndex2 Gets or sets the minimum index 2.
     * @param maxIndex2 Gets or sets the maximum index 2.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime', 'Index'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FlowModel&gt; object
     */
    Observable<ServiceResponse<List<FlowModel>>> getFlowsByFilterWithServiceResponseAsync(int drawerID, int entityID, String type, Integer queueID, DateTime minWorkflowTime, DateTime maxWorkflowTime, DateTime minInsertionTime, DateTime maxInsertionTime, Integer workflowUserID, Integer workflowGroupID, String operation, String category, String status, String state, Integer minIndex1, Integer maxIndex1, Integer minIndex2, Integer maxIndex2, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a single flow based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The flow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FlowModel object if successful.
     */
    FlowModel getFlowById(int drawer, int id);

    /**
     * Gets a single flow based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The flow identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FlowModel> getFlowByIdAsync(int drawer, int id, final ServiceCallback<FlowModel> serviceCallback);

    /**
     * Gets a single flow based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The flow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FlowModel object
     */
    Observable<FlowModel> getFlowByIdAsync(int drawer, int id);

    /**
     * Gets a single flow based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The flow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FlowModel object
     */
    Observable<ServiceResponse<FlowModel>> getFlowByIdWithServiceResponseAsync(int drawer, int id);

    /**
     * Gets a paged list of entity template definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityDefinitionModel&gt; object if successful.
     */
    List<EntityDefinitionModel> getTemplatesByFilter();

    /**
     * Gets a paged list of entity template definitions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EntityDefinitionModel>> getTemplatesByFilterAsync(final ServiceCallback<List<EntityDefinitionModel>> serviceCallback);

    /**
     * Gets a paged list of entity template definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityDefinitionModel&gt; object
     */
    Observable<List<EntityDefinitionModel>> getTemplatesByFilterAsync();

    /**
     * Gets a paged list of entity template definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityDefinitionModel&gt; object
     */
    Observable<ServiceResponse<List<EntityDefinitionModel>>> getTemplatesByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of entity template definitions.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param category Gets or sets the category.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityDefinitionModel&gt; object if successful.
     */
    List<EntityDefinitionModel> getTemplatesByFilter(Integer drawerID, String name, String category, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Gets a paged list of entity template definitions.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param category Gets or sets the category.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EntityDefinitionModel>> getTemplatesByFilterAsync(Integer drawerID, String name, String category, Integer page, Integer pageSize, String sortOrder, Integer sortBy, final ServiceCallback<List<EntityDefinitionModel>> serviceCallback);

    /**
     * Gets a paged list of entity template definitions.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param category Gets or sets the category.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityDefinitionModel&gt; object
     */
    Observable<List<EntityDefinitionModel>> getTemplatesByFilterAsync(Integer drawerID, String name, String category, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Gets a paged list of entity template definitions.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param category Gets or sets the category.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityDefinitionModel&gt; object
     */
    Observable<ServiceResponse<List<EntityDefinitionModel>>> getTemplatesByFilterWithServiceResponseAsync(Integer drawerID, String name, String category, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Creates a new entity template definition.
     *
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityDefinitionModel object if successful.
     */
    EntityDefinitionModel createTemplate(EntityDefinitionBase model);

    /**
     * Creates a new entity template definition.
     *
     * @param model The entity template model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityDefinitionModel> createTemplateAsync(EntityDefinitionBase model, final ServiceCallback<EntityDefinitionModel> serviceCallback);

    /**
     * Creates a new entity template definition.
     *
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityDefinitionModel object
     */
    Observable<EntityDefinitionModel> createTemplateAsync(EntityDefinitionBase model);

    /**
     * Creates a new entity template definition.
     *
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityDefinitionModel object
     */
    Observable<ServiceResponse<EntityDefinitionModel>> createTemplateWithServiceResponseAsync(EntityDefinitionBase model);

    /**
     * Gets a single entity template definition by its type.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityDefinitionModel object if successful.
     */
    EntityDefinitionModel getTemplateByType(int type);

    /**
     * Gets a single entity template definition by its type.
     *
     * @param type The unique template type.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityDefinitionModel> getTemplateByTypeAsync(int type, final ServiceCallback<EntityDefinitionModel> serviceCallback);

    /**
     * Gets a single entity template definition by its type.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityDefinitionModel object
     */
    Observable<EntityDefinitionModel> getTemplateByTypeAsync(int type);

    /**
     * Gets a single entity template definition by its type.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityDefinitionModel object
     */
    Observable<ServiceResponse<EntityDefinitionModel>> getTemplateByTypeWithServiceResponseAsync(int type);

    /**
     * Updates a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateTemplateByType(int type, UpdateEntityDefinitionRequestModel model);

    /**
     * Updates a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @param model The entity template model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateTemplateByTypeAsync(int type, UpdateEntityDefinitionRequestModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateTemplateByTypeAsync(int type, UpdateEntityDefinitionRequestModel model);

    /**
     * Updates a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateTemplateByTypeWithServiceResponseAsync(int type, UpdateEntityDefinitionRequestModel model);

    /**
     * Deletes a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteTemplateByType(int type);

    /**
     * Deletes a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteTemplateByTypeAsync(int type, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteTemplateByTypeAsync(int type);

    /**
     * Deletes a specified entity template definition by type.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteTemplateByTypeWithServiceResponseAsync(int type);

    /**
     * Gets a single entity template definition by its unique identifier.
     *
     * @param id The template identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityDefinitionModel object if successful.
     */
    EntityDefinitionModel getTemplateById(String id);

    /**
     * Gets a single entity template definition by its unique identifier.
     *
     * @param id The template identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityDefinitionModel> getTemplateByIdAsync(String id, final ServiceCallback<EntityDefinitionModel> serviceCallback);

    /**
     * Gets a single entity template definition by its unique identifier.
     *
     * @param id The template identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityDefinitionModel object
     */
    Observable<EntityDefinitionModel> getTemplateByIdAsync(String id);

    /**
     * Gets a single entity template definition by its unique identifier.
     *
     * @param id The template identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityDefinitionModel object
     */
    Observable<ServiceResponse<EntityDefinitionModel>> getTemplateByIdWithServiceResponseAsync(String id);

    /**
     * Updates a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateTemplateById(String id, UpdateEntityDefinitionRequestModel model);

    /**
     * Updates a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @param model The entity template model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateTemplateByIdAsync(String id, UpdateEntityDefinitionRequestModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateTemplateByIdAsync(String id, UpdateEntityDefinitionRequestModel model);

    /**
     * Updates a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @param model The entity template model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateTemplateByIdWithServiceResponseAsync(String id, UpdateEntityDefinitionRequestModel model);

    /**
     * Deletes a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteTemplateById(String id);

    /**
     * Deletes a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteTemplateByIdAsync(String id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteTemplateByIdAsync(String id);

    /**
     * Deletes a specified entity template definition by identifier.
     *
     * @param id The unique template identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteTemplateByIdWithServiceResponseAsync(String id);

    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FieldValidationModel object if successful.
     */
    FieldValidationModel validateTemplateField(int type, String fieldID);

    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FieldValidationModel> validateTemplateFieldAsync(int type, String fieldID, final ServiceCallback<FieldValidationModel> serviceCallback);

    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FieldValidationModel object
     */
    Observable<FieldValidationModel> validateTemplateFieldAsync(int type, String fieldID);

    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FieldValidationModel object
     */
    Observable<ServiceResponse<FieldValidationModel>> validateTemplateFieldWithServiceResponseAsync(int type, String fieldID);
    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @param sortColumn Gets or sets the sort column.
     * @param metadata Gets or sets the metadata search options.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FieldValidationModel object if successful.
     */
    FieldValidationModel validateTemplateField(int type, String fieldID, String sortColumn, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @param sortColumn Gets or sets the sort column.
     * @param metadata Gets or sets the metadata search options.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FieldValidationModel> validateTemplateFieldAsync(int type, String fieldID, String sortColumn, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, Integer sortBy, final ServiceCallback<FieldValidationModel> serviceCallback);

    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @param sortColumn Gets or sets the sort column.
     * @param metadata Gets or sets the metadata search options.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FieldValidationModel object
     */
    Observable<FieldValidationModel> validateTemplateFieldAsync(int type, String fieldID, String sortColumn, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Validates the specified template field.
     *
     * @param type The template type.
     * @param fieldID The field name.
     * @param sortColumn Gets or sets the sort column.
     * @param metadata Gets or sets the metadata search options.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FieldValidationModel object
     */
    Observable<ServiceResponse<FieldValidationModel>> validateTemplateFieldWithServiceResponseAsync(int type, String fieldID, String sortColumn, List<Object> metadata, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Gets a paged list of groups.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupModel&gt; object if successful.
     */
    List<GroupModel> getGroupsByFilter();

    /**
     * Gets a paged list of groups.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupModel>> getGroupsByFilterAsync(final ServiceCallback<List<GroupModel>> serviceCallback);

    /**
     * Gets a paged list of groups.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupModel&gt; object
     */
    Observable<List<GroupModel>> getGroupsByFilterAsync();

    /**
     * Gets a paged list of groups.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupModel&gt; object
     */
    Observable<ServiceResponse<List<GroupModel>>> getGroupsByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of groups.
     *
     * @param iD Gets or sets the group identifier.
     * @param userID Gets or sets the user identifier.
     * @param name Gets or sets the name.
     * @param type Gets or sets the type. Possible values include: 'Generic', 'Access', 'Role'
     * @param state Gets or sets the state. Possible values include: 'Inactive', 'Active'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Name', 'Type', 'State'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;GroupModel&gt; object if successful.
     */
    List<GroupModel> getGroupsByFilter(Integer iD, Integer userID, String name, String type, String state, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of groups.
     *
     * @param iD Gets or sets the group identifier.
     * @param userID Gets or sets the user identifier.
     * @param name Gets or sets the name.
     * @param type Gets or sets the type. Possible values include: 'Generic', 'Access', 'Role'
     * @param state Gets or sets the state. Possible values include: 'Inactive', 'Active'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Name', 'Type', 'State'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<GroupModel>> getGroupsByFilterAsync(Integer iD, Integer userID, String name, String type, String state, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<GroupModel>> serviceCallback);

    /**
     * Gets a paged list of groups.
     *
     * @param iD Gets or sets the group identifier.
     * @param userID Gets or sets the user identifier.
     * @param name Gets or sets the name.
     * @param type Gets or sets the type. Possible values include: 'Generic', 'Access', 'Role'
     * @param state Gets or sets the state. Possible values include: 'Inactive', 'Active'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Name', 'Type', 'State'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupModel&gt; object
     */
    Observable<List<GroupModel>> getGroupsByFilterAsync(Integer iD, Integer userID, String name, String type, String state, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of groups.
     *
     * @param iD Gets or sets the group identifier.
     * @param userID Gets or sets the user identifier.
     * @param name Gets or sets the name.
     * @param type Gets or sets the type. Possible values include: 'Generic', 'Access', 'Role'
     * @param state Gets or sets the state. Possible values include: 'Inactive', 'Active'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Name', 'Type', 'State'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;GroupModel&gt; object
     */
    Observable<ServiceResponse<List<GroupModel>>> getGroupsByFilterWithServiceResponseAsync(Integer iD, Integer userID, String name, String type, String state, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Creates a new group.
     *
     * @param model The group model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GroupModel object if successful.
     */
    GroupModel createGroup(InsertGroupRequestModel model);

    /**
     * Creates a new group.
     *
     * @param model The group model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GroupModel> createGroupAsync(InsertGroupRequestModel model, final ServiceCallback<GroupModel> serviceCallback);

    /**
     * Creates a new group.
     *
     * @param model The group model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GroupModel object
     */
    Observable<GroupModel> createGroupAsync(InsertGroupRequestModel model);

    /**
     * Creates a new group.
     *
     * @param model The group model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GroupModel object
     */
    Observable<ServiceResponse<GroupModel>> createGroupWithServiceResponseAsync(InsertGroupRequestModel model);

    /**
     * Gets a single group by its unique identifier.
     *
     * @param id The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GroupModel object if successful.
     */
    GroupModel getGroupById(int id);

    /**
     * Gets a single group by its unique identifier.
     *
     * @param id The group identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GroupModel> getGroupByIdAsync(int id, final ServiceCallback<GroupModel> serviceCallback);

    /**
     * Gets a single group by its unique identifier.
     *
     * @param id The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GroupModel object
     */
    Observable<GroupModel> getGroupByIdAsync(int id);

    /**
     * Gets a single group by its unique identifier.
     *
     * @param id The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GroupModel object
     */
    Observable<ServiceResponse<GroupModel>> getGroupByIdWithServiceResponseAsync(int id);

    /**
     * Updates a specified group.
     *
     * @param id The group identifier.
     * @param model The group model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateGroup(int id, GroupBase model);

    /**
     * Updates a specified group.
     *
     * @param id The group identifier.
     * @param model The group model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateGroupAsync(int id, GroupBase model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified group.
     *
     * @param id The group identifier.
     * @param model The group model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateGroupAsync(int id, GroupBase model);

    /**
     * Updates a specified group.
     *
     * @param id The group identifier.
     * @param model The group model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateGroupWithServiceResponseAsync(int id, GroupBase model);

    /**
     * Deactivates a group and removes all group associations.
     *
     * @param id The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteGroup(int id);

    /**
     * Deactivates a group and removes all group associations.
     *
     * @param id The group identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteGroupAsync(int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deactivates a group and removes all group associations.
     *
     * @param id The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteGroupAsync(int id);

    /**
     * Deactivates a group and removes all group associations.
     *
     * @param id The group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteGroupWithServiceResponseAsync(int id);

    /**
     * Gets a paged list of entity links.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityLinkModel&gt; object if successful.
     */
    List<EntityLinkModel> getLinksByFilter();

    /**
     * Gets a paged list of entity links.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EntityLinkModel>> getLinksByFilterAsync(final ServiceCallback<List<EntityLinkModel>> serviceCallback);

    /**
     * Gets a paged list of entity links.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityLinkModel&gt; object
     */
    Observable<List<EntityLinkModel>> getLinksByFilterAsync();

    /**
     * Gets a paged list of entity links.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityLinkModel&gt; object
     */
    Observable<ServiceResponse<List<EntityLinkModel>>> getLinksByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of entity links.
     *
     * @param childEntityID Gets or sets the child entity identifier.
     * @param childDrawerID Gets or sets the child drawer identifier.
     * @param childType Gets or sets the type of the child.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityLinkModel&gt; object if successful.
     */
    List<EntityLinkModel> getLinksByFilter(Integer childEntityID, Integer childDrawerID, Integer childType, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of entity links.
     *
     * @param childEntityID Gets or sets the child entity identifier.
     * @param childDrawerID Gets or sets the child drawer identifier.
     * @param childType Gets or sets the type of the child.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<EntityLinkModel>> getLinksByFilterAsync(Integer childEntityID, Integer childDrawerID, Integer childType, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<EntityLinkModel>> serviceCallback);

    /**
     * Gets a paged list of entity links.
     *
     * @param childEntityID Gets or sets the child entity identifier.
     * @param childDrawerID Gets or sets the child drawer identifier.
     * @param childType Gets or sets the type of the child.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityLinkModel&gt; object
     */
    Observable<List<EntityLinkModel>> getLinksByFilterAsync(Integer childEntityID, Integer childDrawerID, Integer childType, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of entity links.
     *
     * @param childEntityID Gets or sets the child entity identifier.
     * @param childDrawerID Gets or sets the child drawer identifier.
     * @param childType Gets or sets the type of the child.
     * @param acl Gets or sets the access control list.
     * @param entityID Gets or sets the entity identifier.
     * @param drawerID Gets or sets the drawer identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minInsertionTime Gets or sets the minimum insertion time.
     * @param maxInsertionTime Gets or sets the maximum insertion time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityLinkModel&gt; object
     */
    Observable<ServiceResponse<List<EntityLinkModel>>> getLinksByFilterWithServiceResponseAsync(Integer childEntityID, Integer childDrawerID, Integer childType, Integer acl, Integer entityID, Integer drawerID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minInsertionTime, DateTime maxInsertionTime, DateTime minModificationTime, DateTime maxModificationTime, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a link based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityLinkModel object if successful.
     */
    EntityLinkModel getLinkById(int drawer, int id);

    /**
     * Gets a link based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityLinkModel> getLinkByIdAsync(int drawer, int id, final ServiceCallback<EntityLinkModel> serviceCallback);

    /**
     * Gets a link based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityLinkModel object
     */
    Observable<EntityLinkModel> getLinkByIdAsync(int drawer, int id);

    /**
     * Gets a link based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityLinkModel object
     */
    Observable<ServiceResponse<EntityLinkModel>> getLinkByIdWithServiceResponseAsync(int drawer, int id);

    /**
     * Updates a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateLink(int drawer, int id, UpdateEntityLinkRequestModel model);

    /**
     * Updates a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateLinkAsync(int drawer, int id, UpdateEntityLinkRequestModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateLinkAsync(int drawer, int id, UpdateEntityLinkRequestModel model);

    /**
     * Updates a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateLinkWithServiceResponseAsync(int drawer, int id, UpdateEntityLinkRequestModel model);

    /**
     * Deletes a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteLink(int drawer, int id);

    /**
     * Deletes a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteLinkAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteLinkAsync(int drawer, int id);

    /**
     * Deletes a specified link.
     *
     * @param drawer The drawer identifier.
     * @param id The link identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteLinkWithServiceResponseAsync(int drawer, int id);

    /**
     * Creates a new link.
     *
     * @param drawer The drawer identifier.
     * @param model The link model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityLinkModel object if successful.
     */
    EntityLinkModel createLink(int drawer, InsertEntityLinkRequestModel model);

    /**
     * Creates a new link.
     *
     * @param drawer The drawer identifier.
     * @param model The link model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EntityLinkModel> createLinkAsync(int drawer, InsertEntityLinkRequestModel model, final ServiceCallback<EntityLinkModel> serviceCallback);

    /**
     * Creates a new link.
     *
     * @param drawer The drawer identifier.
     * @param model The link model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityLinkModel object
     */
    Observable<EntityLinkModel> createLinkAsync(int drawer, InsertEntityLinkRequestModel model);

    /**
     * Creates a new link.
     *
     * @param drawer The drawer identifier.
     * @param model The link model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityLinkModel object
     */
    Observable<ServiceResponse<EntityLinkModel>> createLinkWithServiceResponseAsync(int drawer, InsertEntityLinkRequestModel model);

    /**
     * Gets a lock for a single entity based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LockModel object if successful.
     */
    LockModel getLocksByFilter(int drawer, int id);

    /**
     * Gets a lock for a single entity based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<LockModel> getLocksByFilterAsync(int drawer, int id, final ServiceCallback<LockModel> serviceCallback);

    /**
     * Gets a lock for a single entity based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LockModel object
     */
    Observable<LockModel> getLocksByFilterAsync(int drawer, int id);

    /**
     * Gets a lock for a single entity based on its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LockModel object
     */
    Observable<ServiceResponse<LockModel>> getLocksByFilterWithServiceResponseAsync(int drawer, int id);

    /**
     * Inserts or updates lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The lock model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createOrUpdateLock(int drawer, int id, UpdateLockRequestModel model);

    /**
     * Inserts or updates lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The lock model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createOrUpdateLockAsync(int drawer, int id, UpdateLockRequestModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Inserts or updates lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The lock model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createOrUpdateLockAsync(int drawer, int id, UpdateLockRequestModel model);

    /**
     * Inserts or updates lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param model The lock model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createOrUpdateLockWithServiceResponseAsync(int drawer, int id, UpdateLockRequestModel model);

    /**
     * Deletes a lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteLock(int drawer, int id);

    /**
     * Deletes a lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteLockAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteLockAsync(int drawer, int id);

    /**
     * Deletes a lock on a specified entity.
     *
     * @param drawer The drawer identifier.
     * @param id The entity identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteLockWithServiceResponseAsync(int drawer, int id);

    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;NoteModel&gt; object if successful.
     */
    List<NoteModel> getNotesByFilter(int drawerID);

    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NoteModel>> getNotesByFilterAsync(int drawerID, final ServiceCallback<List<NoteModel>> serviceCallback);

    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;NoteModel&gt; object
     */
    Observable<List<NoteModel>> getNotesByFilterAsync(int drawerID);

    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;NoteModel&gt; object
     */
    Observable<ServiceResponse<List<NoteModel>>> getNotesByFilterWithServiceResponseAsync(int drawerID);
    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param parentID Gets or sets the parent note identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime', 'ModificationTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;NoteModel&gt; object if successful.
     */
    List<NoteModel> getNotesByFilter(int drawerID, Integer entityID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer parentID, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param parentID Gets or sets the parent note identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime', 'ModificationTime'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<NoteModel>> getNotesByFilterAsync(int drawerID, Integer entityID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer parentID, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<NoteModel>> serviceCallback);

    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param parentID Gets or sets the parent note identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime', 'ModificationTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;NoteModel&gt; object
     */
    Observable<List<NoteModel>> getNotesByFilterAsync(int drawerID, Integer entityID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer parentID, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of notes.
     *
     * @param drawerID Gets or sets the drawer identifier.
     * @param entityID Gets or sets the entity identifier.
     * @param name Gets or sets the name.
     * @param creatorUserID Gets or sets the creator user identifier.
     * @param modifierUserID Gets or sets the modifier user identifier.
     * @param minCreationTime Gets or sets the minimum creation time.
     * @param maxCreationTime Gets or sets the maximum creation time.
     * @param minModificationTime Gets or sets the minimum modification time.
     * @param maxModificationTime Gets or sets the maximum modification time.
     * @param parentID Gets or sets the parent note identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime', 'ModificationTime'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;NoteModel&gt; object
     */
    Observable<ServiceResponse<List<NoteModel>>> getNotesByFilterWithServiceResponseAsync(int drawerID, Integer entityID, String name, Integer creatorUserID, Integer modifierUserID, DateTime minCreationTime, DateTime maxCreationTime, DateTime minModificationTime, DateTime maxModificationTime, Integer parentID, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a note by its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NoteModel object if successful.
     */
    NoteModel getNoteById(int drawer, int id);

    /**
     * Gets a note by its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<NoteModel> getNoteByIdAsync(int drawer, int id, final ServiceCallback<NoteModel> serviceCallback);

    /**
     * Gets a note by its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NoteModel object
     */
    Observable<NoteModel> getNoteByIdAsync(int drawer, int id);

    /**
     * Gets a note by its unique identifier.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NoteModel object
     */
    Observable<ServiceResponse<NoteModel>> getNoteByIdWithServiceResponseAsync(int drawer, int id);

    /**
     * Updates a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @param model The note model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateNote(int drawer, int id, NoteBase model);

    /**
     * Updates a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @param model The note model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateNoteAsync(int drawer, int id, NoteBase model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @param model The note model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateNoteAsync(int drawer, int id, NoteBase model);

    /**
     * Updates a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @param model The note model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateNoteWithServiceResponseAsync(int drawer, int id, NoteBase model);

    /**
     * Deletes a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteNote(int drawer, int id);

    /**
     * Deletes a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteNoteAsync(int drawer, int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteNoteAsync(int drawer, int id);

    /**
     * Deletes a specified note.
     *
     * @param drawer The drawer identifier.
     * @param id The note identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteNoteWithServiceResponseAsync(int drawer, int id);

    /**
     * Creates a new note.
     *
     * @param drawer The drawer identifier.
     * @param model The note model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NoteModel object if successful.
     */
    NoteModel createNote(int drawer, InsertNoteRequestModel model);

    /**
     * Creates a new note.
     *
     * @param drawer The drawer identifier.
     * @param model The note model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<NoteModel> createNoteAsync(int drawer, InsertNoteRequestModel model, final ServiceCallback<NoteModel> serviceCallback);

    /**
     * Creates a new note.
     *
     * @param drawer The drawer identifier.
     * @param model The note model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NoteModel object
     */
    Observable<NoteModel> createNoteAsync(int drawer, InsertNoteRequestModel model);

    /**
     * Creates a new note.
     *
     * @param drawer The drawer identifier.
     * @param model The note model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NoteModel object
     */
    Observable<ServiceResponse<NoteModel>> createNoteWithServiceResponseAsync(int drawer, InsertNoteRequestModel model);

    /**
     * Gets a paged list of queue assignments.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;QueueAssignmentModel&gt; object if successful.
     */
    List<QueueAssignmentModel> getQueueAssignmentsByFilter();

    /**
     * Gets a paged list of queue assignments.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<QueueAssignmentModel>> getQueueAssignmentsByFilterAsync(final ServiceCallback<List<QueueAssignmentModel>> serviceCallback);

    /**
     * Gets a paged list of queue assignments.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueAssignmentModel&gt; object
     */
    Observable<List<QueueAssignmentModel>> getQueueAssignmentsByFilterAsync();

    /**
     * Gets a paged list of queue assignments.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueAssignmentModel&gt; object
     */
    Observable<ServiceResponse<List<QueueAssignmentModel>>> getQueueAssignmentsByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of queue assignments.
     *
     * @param queueID Gets or sets the unique queue identifier.
     * @param userID Gets or sets the user identifier.
     * @param groupID Gets or sets the group identifier.
     * @param type Gets or sets the queue assignment type. Possible values include: 'Unspecified', 'Primary', 'Secondary'
     * @param order Gets or sets the sort order.
     * @param taskSortColumn Gets or sets the task sort column. Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID', 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1', 'ReservedString1'
     * @param state Gets or sets the state. Possible values include: 'Unspecified', 'Inactive', 'Active'
     * @param fetchType Gets or sets the type of the fetch. Possible values include: 'Unspecified', 'Manual', 'Push'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order', 'FetchType'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;QueueAssignmentModel&gt; object if successful.
     */
    List<QueueAssignmentModel> getQueueAssignmentsByFilter(Integer queueID, Integer userID, Integer groupID, String type, Integer order, String taskSortColumn, String state, String fetchType, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of queue assignments.
     *
     * @param queueID Gets or sets the unique queue identifier.
     * @param userID Gets or sets the user identifier.
     * @param groupID Gets or sets the group identifier.
     * @param type Gets or sets the queue assignment type. Possible values include: 'Unspecified', 'Primary', 'Secondary'
     * @param order Gets or sets the sort order.
     * @param taskSortColumn Gets or sets the task sort column. Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID', 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1', 'ReservedString1'
     * @param state Gets or sets the state. Possible values include: 'Unspecified', 'Inactive', 'Active'
     * @param fetchType Gets or sets the type of the fetch. Possible values include: 'Unspecified', 'Manual', 'Push'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order', 'FetchType'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<QueueAssignmentModel>> getQueueAssignmentsByFilterAsync(Integer queueID, Integer userID, Integer groupID, String type, Integer order, String taskSortColumn, String state, String fetchType, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<QueueAssignmentModel>> serviceCallback);

    /**
     * Gets a paged list of queue assignments.
     *
     * @param queueID Gets or sets the unique queue identifier.
     * @param userID Gets or sets the user identifier.
     * @param groupID Gets or sets the group identifier.
     * @param type Gets or sets the queue assignment type. Possible values include: 'Unspecified', 'Primary', 'Secondary'
     * @param order Gets or sets the sort order.
     * @param taskSortColumn Gets or sets the task sort column. Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID', 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1', 'ReservedString1'
     * @param state Gets or sets the state. Possible values include: 'Unspecified', 'Inactive', 'Active'
     * @param fetchType Gets or sets the type of the fetch. Possible values include: 'Unspecified', 'Manual', 'Push'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order', 'FetchType'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueAssignmentModel&gt; object
     */
    Observable<List<QueueAssignmentModel>> getQueueAssignmentsByFilterAsync(Integer queueID, Integer userID, Integer groupID, String type, Integer order, String taskSortColumn, String state, String fetchType, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of queue assignments.
     *
     * @param queueID Gets or sets the unique queue identifier.
     * @param userID Gets or sets the user identifier.
     * @param groupID Gets or sets the group identifier.
     * @param type Gets or sets the queue assignment type. Possible values include: 'Unspecified', 'Primary', 'Secondary'
     * @param order Gets or sets the sort order.
     * @param taskSortColumn Gets or sets the task sort column. Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID', 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1', 'ReservedString1'
     * @param state Gets or sets the state. Possible values include: 'Unspecified', 'Inactive', 'Active'
     * @param fetchType Gets or sets the type of the fetch. Possible values include: 'Unspecified', 'Manual', 'Push'
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order', 'FetchType'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueAssignmentModel&gt; object
     */
    Observable<ServiceResponse<List<QueueAssignmentModel>>> getQueueAssignmentsByFilterWithServiceResponseAsync(Integer queueID, Integer userID, Integer groupID, String type, Integer order, String taskSortColumn, String state, String fetchType, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Updates the specified queue assignment.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateQueueAssignemnt(QueueAssignmentModel model);

    /**
     * Updates the specified queue assignment.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateQueueAssignemntAsync(QueueAssignmentModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates the specified queue assignment.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateQueueAssignemntAsync(QueueAssignmentModel model);

    /**
     * Updates the specified queue assignment.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateQueueAssignemntWithServiceResponseAsync(QueueAssignmentModel model);

    /**
     * Creates a new queue assignment.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueueAssignmentModel object if successful.
     */
    QueueAssignmentModel createQueueAssignment(InsertQueueAssignmentRequestModel model);

    /**
     * Creates a new queue assignment.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<QueueAssignmentModel> createQueueAssignmentAsync(InsertQueueAssignmentRequestModel model, final ServiceCallback<QueueAssignmentModel> serviceCallback);

    /**
     * Creates a new queue assignment.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueAssignmentModel object
     */
    Observable<QueueAssignmentModel> createQueueAssignmentAsync(InsertQueueAssignmentRequestModel model);

    /**
     * Creates a new queue assignment.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueAssignmentModel object
     */
    Observable<ServiceResponse<QueueAssignmentModel>> createQueueAssignmentWithServiceResponseAsync(InsertQueueAssignmentRequestModel model);

    /**
     * Gets a single queue assignment based on user and queue identifiers.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueueAssignmentModel object if successful.
     */
    QueueAssignmentModel getQueueAssignmentsById(int userId, int queueId);

    /**
     * Gets a single queue assignment based on user and queue identifiers.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<QueueAssignmentModel> getQueueAssignmentsByIdAsync(int userId, int queueId, final ServiceCallback<QueueAssignmentModel> serviceCallback);

    /**
     * Gets a single queue assignment based on user and queue identifiers.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueAssignmentModel object
     */
    Observable<QueueAssignmentModel> getQueueAssignmentsByIdAsync(int userId, int queueId);

    /**
     * Gets a single queue assignment based on user and queue identifiers.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueAssignmentModel object
     */
    Observable<ServiceResponse<QueueAssignmentModel>> getQueueAssignmentsByIdWithServiceResponseAsync(int userId, int queueId);

    /**
     * Deletes the specified queue assignment.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteQueueAssignment(int userId, int queueId);

    /**
     * Deletes the specified queue assignment.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteQueueAssignmentAsync(int userId, int queueId, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes the specified queue assignment.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteQueueAssignmentAsync(int userId, int queueId);

    /**
     * Deletes the specified queue assignment.
     *
     * @param userId The user identifier.
     * @param queueId The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteQueueAssignmentWithServiceResponseAsync(int userId, int queueId);

    /**
     * Gets a paged list of queues.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;QueueModel&gt; object if successful.
     */
    List<QueueModel> getQueuesByFilter();

    /**
     * Gets a paged list of queues.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<QueueModel>> getQueuesByFilterAsync(final ServiceCallback<List<QueueModel>> serviceCallback);

    /**
     * Gets a paged list of queues.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueModel&gt; object
     */
    Observable<List<QueueModel>> getQueuesByFilterAsync();

    /**
     * Gets a paged list of queues.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueModel&gt; object
     */
    Observable<ServiceResponse<List<QueueModel>>> getQueuesByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of queues.
     *
     * @param iD Gets or sets the queue identifier.
     * @param name Gets or sets the name.
     * @param alias Gets or sets the alias.
     * @param type Gets or sets the type. Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other', 'CdoInfostore', 'CdoFolder'
     * @param access Gets or sets the access level.
     * @param bypassSecurity Gets or sets a value indicating whether to bypass security checks.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'Name', 'Alias'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;QueueModel&gt; object if successful.
     */
    List<QueueModel> getQueuesByFilter(Integer iD, String name, String alias, String type, Integer access, Boolean bypassSecurity, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of queues.
     *
     * @param iD Gets or sets the queue identifier.
     * @param name Gets or sets the name.
     * @param alias Gets or sets the alias.
     * @param type Gets or sets the type. Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other', 'CdoInfostore', 'CdoFolder'
     * @param access Gets or sets the access level.
     * @param bypassSecurity Gets or sets a value indicating whether to bypass security checks.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'Name', 'Alias'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<QueueModel>> getQueuesByFilterAsync(Integer iD, String name, String alias, String type, Integer access, Boolean bypassSecurity, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<QueueModel>> serviceCallback);

    /**
     * Gets a paged list of queues.
     *
     * @param iD Gets or sets the queue identifier.
     * @param name Gets or sets the name.
     * @param alias Gets or sets the alias.
     * @param type Gets or sets the type. Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other', 'CdoInfostore', 'CdoFolder'
     * @param access Gets or sets the access level.
     * @param bypassSecurity Gets or sets a value indicating whether to bypass security checks.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'Name', 'Alias'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueModel&gt; object
     */
    Observable<List<QueueModel>> getQueuesByFilterAsync(Integer iD, String name, String alias, String type, Integer access, Boolean bypassSecurity, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of queues.
     *
     * @param iD Gets or sets the queue identifier.
     * @param name Gets or sets the name.
     * @param alias Gets or sets the alias.
     * @param type Gets or sets the type. Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other', 'CdoInfostore', 'CdoFolder'
     * @param access Gets or sets the access level.
     * @param bypassSecurity Gets or sets a value indicating whether to bypass security checks.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'Type', 'Name', 'Alias'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;QueueModel&gt; object
     */
    Observable<ServiceResponse<List<QueueModel>>> getQueuesByFilterWithServiceResponseAsync(Integer iD, String name, String alias, String type, Integer access, Boolean bypassSecurity, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Creates a new queue.
     *
     * @param model The queue model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueueModel object if successful.
     */
    QueueModel createQueue(InsertQueueRequestModel model);

    /**
     * Creates a new queue.
     *
     * @param model The queue model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<QueueModel> createQueueAsync(InsertQueueRequestModel model, final ServiceCallback<QueueModel> serviceCallback);

    /**
     * Creates a new queue.
     *
     * @param model The queue model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueModel object
     */
    Observable<QueueModel> createQueueAsync(InsertQueueRequestModel model);

    /**
     * Creates a new queue.
     *
     * @param model The queue model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueModel object
     */
    Observable<ServiceResponse<QueueModel>> createQueueWithServiceResponseAsync(InsertQueueRequestModel model);

    /**
     * Gets a single queue by its unique identifier.
     *
     * @param id The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueueModel object if successful.
     */
    QueueModel getQueueById(int id);

    /**
     * Gets a single queue by its unique identifier.
     *
     * @param id The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<QueueModel> getQueueByIdAsync(int id, final ServiceCallback<QueueModel> serviceCallback);

    /**
     * Gets a single queue by its unique identifier.
     *
     * @param id The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueModel object
     */
    Observable<QueueModel> getQueueByIdAsync(int id);

    /**
     * Gets a single queue by its unique identifier.
     *
     * @param id The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueModel object
     */
    Observable<ServiceResponse<QueueModel>> getQueueByIdWithServiceResponseAsync(int id);

    /**
     * Updates a specified queue.
     *
     * @param id The unique queue identifier.
     * @param model The queue model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateQueue(int id, QueueBase model);

    /**
     * Updates a specified queue.
     *
     * @param id The unique queue identifier.
     * @param model The queue model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateQueueAsync(int id, QueueBase model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified queue.
     *
     * @param id The unique queue identifier.
     * @param model The queue model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateQueueAsync(int id, QueueBase model);

    /**
     * Updates a specified queue.
     *
     * @param id The unique queue identifier.
     * @param model The queue model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateQueueWithServiceResponseAsync(int id, QueueBase model);

    /**
     * Deletes a specified queue.
     *
     * @param id The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteQueue(int id);

    /**
     * Deletes a specified queue.
     *
     * @param id The queue identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteQueueAsync(int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a specified queue.
     *
     * @param id The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteQueueAsync(int id);

    /**
     * Deletes a specified queue.
     *
     * @param id The queue identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteQueueWithServiceResponseAsync(int id);

    /**
     * Gets a single queue by its name.
     *
     * @param name The queue name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueueModel object if successful.
     */
    QueueModel getQueueByName(String name);

    /**
     * Gets a single queue by its name.
     *
     * @param name The queue name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<QueueModel> getQueueByNameAsync(String name, final ServiceCallback<QueueModel> serviceCallback);

    /**
     * Gets a single queue by its name.
     *
     * @param name The queue name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueModel object
     */
    Observable<QueueModel> getQueueByNameAsync(String name);

    /**
     * Gets a single queue by its name.
     *
     * @param name The queue name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueueModel object
     */
    Observable<ServiceResponse<QueueModel>> getQueueByNameWithServiceResponseAsync(String name);

    /**
     * Gets a paged list of tasks.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;TaskModel&gt; object if successful.
     */
    List<TaskModel> getTasksByFilter();

    /**
     * Gets a paged list of tasks.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<TaskModel>> getTasksByFilterAsync(final ServiceCallback<List<TaskModel>> serviceCallback);

    /**
     * Gets a paged list of tasks.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TaskModel&gt; object
     */
    Observable<List<TaskModel>> getTasksByFilterAsync();

    /**
     * Gets a paged list of tasks.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TaskModel&gt; object
     */
    Observable<ServiceResponse<List<TaskModel>>> getTasksByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of tasks.
     *
     * @param lastTaskID Gets or sets the last task identifier.
     * @param iD Gets or sets the entity identifier.
     * @param type Gets or sets the type of the entity.
     * @param queueID Gets or sets the queue identifier.
     * @param queueType Gets or sets the type of the queue.
     * @param drawerID Gets or sets the drawer identifier.
     * @param description Gets or sets the task description.
     * @param taskID Gets or sets the task identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority', 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;TaskModel&gt; object if successful.
     */
    List<TaskModel> getTasksByFilter(Integer lastTaskID, Integer iD, Integer type, Integer queueID, Integer queueType, Integer drawerID, String description, Integer taskID, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of tasks.
     *
     * @param lastTaskID Gets or sets the last task identifier.
     * @param iD Gets or sets the entity identifier.
     * @param type Gets or sets the type of the entity.
     * @param queueID Gets or sets the queue identifier.
     * @param queueType Gets or sets the type of the queue.
     * @param drawerID Gets or sets the drawer identifier.
     * @param description Gets or sets the task description.
     * @param taskID Gets or sets the task identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority', 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<TaskModel>> getTasksByFilterAsync(Integer lastTaskID, Integer iD, Integer type, Integer queueID, Integer queueType, Integer drawerID, String description, Integer taskID, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<TaskModel>> serviceCallback);

    /**
     * Gets a paged list of tasks.
     *
     * @param lastTaskID Gets or sets the last task identifier.
     * @param iD Gets or sets the entity identifier.
     * @param type Gets or sets the type of the entity.
     * @param queueID Gets or sets the queue identifier.
     * @param queueType Gets or sets the type of the queue.
     * @param drawerID Gets or sets the drawer identifier.
     * @param description Gets or sets the task description.
     * @param taskID Gets or sets the task identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority', 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TaskModel&gt; object
     */
    Observable<List<TaskModel>> getTasksByFilterAsync(Integer lastTaskID, Integer iD, Integer type, Integer queueID, Integer queueType, Integer drawerID, String description, Integer taskID, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of tasks.
     *
     * @param lastTaskID Gets or sets the last task identifier.
     * @param iD Gets or sets the entity identifier.
     * @param type Gets or sets the type of the entity.
     * @param queueID Gets or sets the queue identifier.
     * @param queueType Gets or sets the type of the queue.
     * @param drawerID Gets or sets the drawer identifier.
     * @param description Gets or sets the task description.
     * @param taskID Gets or sets the task identifier.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority', 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;TaskModel&gt; object
     */
    Observable<ServiceResponse<List<TaskModel>>> getTasksByFilterWithServiceResponseAsync(Integer lastTaskID, Integer iD, Integer type, Integer queueID, Integer queueType, Integer drawerID, String description, Integer taskID, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Creates a new task.
     *
     * @param model The task model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createTask(InsertTaskRequestModel model);

    /**
     * Creates a new task.
     *
     * @param model The task model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createTaskAsync(InsertTaskRequestModel model, final ServiceCallback<Object> serviceCallback);

    /**
     * Creates a new task.
     *
     * @param model The task model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createTaskAsync(InsertTaskRequestModel model);

    /**
     * Creates a new task.
     *
     * @param model The task model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createTaskWithServiceResponseAsync(InsertTaskRequestModel model);

    /**
     * Gets a single task based on its unique identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TaskModel object if successful.
     */
    TaskModel getTaskById(int id);

    /**
     * Gets a single task based on its unique identifier.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TaskModel> getTaskByIdAsync(int id, final ServiceCallback<TaskModel> serviceCallback);

    /**
     * Gets a single task based on its unique identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TaskModel object
     */
    Observable<TaskModel> getTaskByIdAsync(int id);

    /**
     * Gets a single task based on its unique identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TaskModel object
     */
    Observable<ServiceResponse<TaskModel>> getTaskByIdWithServiceResponseAsync(int id);

    /**
     * Updates a specified task.
     *
     * @param id The identifier.
     * @param model The task model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateTask(int id, TaskBase model);

    /**
     * Updates a specified task.
     *
     * @param id The identifier.
     * @param model The task model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateTaskAsync(int id, TaskBase model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified task.
     *
     * @param id The identifier.
     * @param model The task model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateTaskAsync(int id, TaskBase model);

    /**
     * Updates a specified task.
     *
     * @param id The identifier.
     * @param model The task model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateTaskWithServiceResponseAsync(int id, TaskBase model);

    /**
     * Deletes a specified task.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteTask(int id);

    /**
     * Deletes a specified task.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteTaskAsync(int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deletes a specified task.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteTaskAsync(int id);

    /**
     * Deletes a specified task.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteTaskWithServiceResponseAsync(int id);

    /**
     * Gets a single task based on user predefined queue assignment criteria.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TaskModel object if successful.
     */
    TaskModel fetchTaskFromQueueAssignment();

    /**
     * Gets a single task based on user predefined queue assignment criteria.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TaskModel> fetchTaskFromQueueAssignmentAsync(final ServiceCallback<TaskModel> serviceCallback);

    /**
     * Gets a single task based on user predefined queue assignment criteria.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TaskModel object
     */
    Observable<TaskModel> fetchTaskFromQueueAssignmentAsync();

    /**
     * Gets a single task based on user predefined queue assignment criteria.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TaskModel object
     */
    Observable<ServiceResponse<TaskModel>> fetchTaskFromQueueAssignmentWithServiceResponseAsync();

    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserModel&gt; object if successful.
     */
    List<UserModel> getUsersByFilter();

    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserModel>> getUsersByFilterAsync(final ServiceCallback<List<UserModel>> serviceCallback);

    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserModel&gt; object
     */
    Observable<List<UserModel>> getUsersByFilterAsync();

    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserModel&gt; object
     */
    Observable<ServiceResponse<List<UserModel>>> getUsersByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @param iD Gets or sets the identifier.
     * @param primaryGroupID Gets or sets the primary group identifier.
     * @param groupID Gets or sets the group identifier.
     * @param groupName Gets or sets the name of the group.
     * @param username Gets or sets the username.
     * @param type Gets or sets the type. Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
     * @param state Gets or sets the state. Possible values include: 'Active', 'Inactive'
     * @param fullName Gets or sets the full name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UserModel&gt; object if successful.
     */
    List<UserModel> getUsersByFilter(Integer iD, Integer primaryGroupID, Integer groupID, String groupName, String username, String type, String state, String fullName, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @param iD Gets or sets the identifier.
     * @param primaryGroupID Gets or sets the primary group identifier.
     * @param groupID Gets or sets the group identifier.
     * @param groupName Gets or sets the name of the group.
     * @param username Gets or sets the username.
     * @param type Gets or sets the type. Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
     * @param state Gets or sets the state. Possible values include: 'Active', 'Inactive'
     * @param fullName Gets or sets the full name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<UserModel>> getUsersByFilterAsync(Integer iD, Integer primaryGroupID, Integer groupID, String groupName, String username, String type, String state, String fullName, Integer page, Integer pageSize, String sortOrder, String sortBy, final ServiceCallback<List<UserModel>> serviceCallback);

    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @param iD Gets or sets the identifier.
     * @param primaryGroupID Gets or sets the primary group identifier.
     * @param groupID Gets or sets the group identifier.
     * @param groupName Gets or sets the name of the group.
     * @param username Gets or sets the username.
     * @param type Gets or sets the type. Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
     * @param state Gets or sets the state. Possible values include: 'Active', 'Inactive'
     * @param fullName Gets or sets the full name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserModel&gt; object
     */
    Observable<List<UserModel>> getUsersByFilterAsync(Integer iD, Integer primaryGroupID, Integer groupID, String groupName, String username, String type, String state, String fullName, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Gets a paged list of users.Gets a paged list of users.
     *
     * @param iD Gets or sets the identifier.
     * @param primaryGroupID Gets or sets the primary group identifier.
     * @param groupID Gets or sets the group identifier.
     * @param groupName Gets or sets the name of the group.
     * @param username Gets or sets the username.
     * @param type Gets or sets the type. Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
     * @param state Gets or sets the state. Possible values include: 'Active', 'Inactive'
     * @param fullName Gets or sets the full name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by. Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UserModel&gt; object
     */
    Observable<ServiceResponse<List<UserModel>>> getUsersByFilterWithServiceResponseAsync(Integer iD, Integer primaryGroupID, Integer groupID, String groupName, String username, String type, String state, String fullName, Integer page, Integer pageSize, String sortOrder, String sortBy);

    /**
     * Creates a new user.
     *
     * @param model The user model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserModel object if successful.
     */
    UserModel createUser(InsertUserRequestModel model);

    /**
     * Creates a new user.
     *
     * @param model The user model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UserModel> createUserAsync(InsertUserRequestModel model, final ServiceCallback<UserModel> serviceCallback);

    /**
     * Creates a new user.
     *
     * @param model The user model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserModel object
     */
    Observable<UserModel> createUserAsync(InsertUserRequestModel model);

    /**
     * Creates a new user.
     *
     * @param model The user model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserModel object
     */
    Observable<ServiceResponse<UserModel>> createUserWithServiceResponseAsync(InsertUserRequestModel model);

    /**
     * Gets a single user by its unique identifier.
     *
     * @param id The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UserModel object if successful.
     */
    UserModel getUserById(int id);

    /**
     * Gets a single user by its unique identifier.
     *
     * @param id The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UserModel> getUserByIdAsync(int id, final ServiceCallback<UserModel> serviceCallback);

    /**
     * Gets a single user by its unique identifier.
     *
     * @param id The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserModel object
     */
    Observable<UserModel> getUserByIdAsync(int id);

    /**
     * Gets a single user by its unique identifier.
     *
     * @param id The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UserModel object
     */
    Observable<ServiceResponse<UserModel>> getUserByIdWithServiceResponseAsync(int id);

    /**
     * Updates a specified user.
     *
     * @param id The user identifier.
     * @param model The user model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateUser(int id, UserBase model);

    /**
     * Updates a specified user.
     *
     * @param id The user identifier.
     * @param model The user model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateUserAsync(int id, UserBase model, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates a specified user.
     *
     * @param id The user identifier.
     * @param model The user model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateUserAsync(int id, UserBase model);

    /**
     * Updates a specified user.
     *
     * @param id The user identifier.
     * @param model The user model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateUserWithServiceResponseAsync(int id, UserBase model);

    /**
     * Deactivates a specified user and removes all user associations.
     *
     * @param id The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteUser(int id);

    /**
     * Deactivates a specified user and removes all user associations.
     *
     * @param id The user identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteUserAsync(int id, final ServiceCallback<Object> serviceCallback);

    /**
     * Deactivates a specified user and removes all user associations.
     *
     * @param id The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteUserAsync(int id);

    /**
     * Deactivates a specified user and removes all user associations.
     *
     * @param id The user identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteUserWithServiceResponseAsync(int id);

    /**
     * Gets a paged list of workflows.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;WorkflowModel&gt; object if successful.
     */
    List<WorkflowModel> getWorkflowsByFilter();

    /**
     * Gets a paged list of workflows.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkflowModel>> getWorkflowsByFilterAsync(final ServiceCallback<List<WorkflowModel>> serviceCallback);

    /**
     * Gets a paged list of workflows.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;WorkflowModel&gt; object
     */
    Observable<List<WorkflowModel>> getWorkflowsByFilterAsync();

    /**
     * Gets a paged list of workflows.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;WorkflowModel&gt; object
     */
    Observable<ServiceResponse<List<WorkflowModel>>> getWorkflowsByFilterWithServiceResponseAsync();
    /**
     * Gets a paged list of workflows.
     *
     * @param applicationID Gets or sets the application identifier.
     * @param entityType Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;WorkflowModel&gt; object if successful.
     */
    List<WorkflowModel> getWorkflowsByFilter(Integer applicationID, Integer entityType, String name, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Gets a paged list of workflows.
     *
     * @param applicationID Gets or sets the application identifier.
     * @param entityType Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkflowModel>> getWorkflowsByFilterAsync(Integer applicationID, Integer entityType, String name, Integer page, Integer pageSize, String sortOrder, Integer sortBy, final ServiceCallback<List<WorkflowModel>> serviceCallback);

    /**
     * Gets a paged list of workflows.
     *
     * @param applicationID Gets or sets the application identifier.
     * @param entityType Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;WorkflowModel&gt; object
     */
    Observable<List<WorkflowModel>> getWorkflowsByFilterAsync(Integer applicationID, Integer entityType, String name, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Gets a paged list of workflows.
     *
     * @param applicationID Gets or sets the application identifier.
     * @param entityType Gets or sets the type of the entity.
     * @param name Gets or sets the name.
     * @param page Gets or sets the page number.
     * @param pageSize Gets or sets the size of the page.
     * @param sortOrder Gets or sets the order. Possible values include: 'Unspecified', 'Ascending', 'Descending'
     * @param sortBy Gets or sets the column to order by.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;WorkflowModel&gt; object
     */
    Observable<ServiceResponse<List<WorkflowModel>>> getWorkflowsByFilterWithServiceResponseAsync(Integer applicationID, Integer entityType, String name, Integer page, Integer pageSize, String sortOrder, Integer sortBy);

    /**
     * Gets a single workflow based on its unique identifier.
     *
     * @param id The workflow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkflowModel object if successful.
     */
    WorkflowModel getWorkflowById(int id);

    /**
     * Gets a single workflow based on its unique identifier.
     *
     * @param id The workflow identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkflowModel> getWorkflowByIdAsync(int id, final ServiceCallback<WorkflowModel> serviceCallback);

    /**
     * Gets a single workflow based on its unique identifier.
     *
     * @param id The workflow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkflowModel object
     */
    Observable<WorkflowModel> getWorkflowByIdAsync(int id);

    /**
     * Gets a single workflow based on its unique identifier.
     *
     * @param id The workflow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkflowModel object
     */
    Observable<ServiceResponse<WorkflowModel>> getWorkflowByIdWithServiceResponseAsync(int id);

    /**
     * Gets queues for a specific workflow.
     *
     * @param id The workflow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;WorkflowQueueModel&gt; object if successful.
     */
    List<WorkflowQueueModel> getWorkflowQueuesById(int id);

    /**
     * Gets queues for a specific workflow.
     *
     * @param id The workflow identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkflowQueueModel>> getWorkflowQueuesByIdAsync(int id, final ServiceCallback<List<WorkflowQueueModel>> serviceCallback);

    /**
     * Gets queues for a specific workflow.
     *
     * @param id The workflow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;WorkflowQueueModel&gt; object
     */
    Observable<List<WorkflowQueueModel>> getWorkflowQueuesByIdAsync(int id);

    /**
     * Gets queues for a specific workflow.
     *
     * @param id The workflow identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;WorkflowQueueModel&gt; object
     */
    Observable<ServiceResponse<List<WorkflowQueueModel>>> getWorkflowQueuesByIdWithServiceResponseAsync(int id);

    /**
     * Gets a single entity template definition completed with all profiles definitions as XML entity definition.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String getXMLTemplateByType(int type);

    /**
     * Gets a single entity template definition completed with all profiles definitions as XML entity definition.
     *
     * @param type The unique template type.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> getXMLTemplateByTypeAsync(int type, final ServiceCallback<String> serviceCallback);

    /**
     * Gets a single entity template definition completed with all profiles definitions as XML entity definition.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> getXMLTemplateByTypeAsync(int type);

    /**
     * Gets a single entity template definition completed with all profiles definitions as XML entity definition.
     *
     * @param type The unique template type.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> getXMLTemplateByTypeWithServiceResponseAsync(int type);

    /**
     * Creates a new entity template definition.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String createXMLTemplate();

    /**
     * Creates a new entity template definition.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> createXMLTemplateAsync(final ServiceCallback<String> serviceCallback);

    /**
     * Creates a new entity template definition.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> createXMLTemplateAsync();

    /**
     * Creates a new entity template definition.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> createXMLTemplateWithServiceResponseAsync();

}
