# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class InsertUserRequestModel(Model):
    """Model for POST User input parameters.

    :param username: Gets or sets the username.
    :type username: str
    :param state: Gets or sets the state. Possible values include: 'Active',
     'Inactive'
    :type state: str or ~softheon.enterprise.api.client.models.enum
    :param type: Gets or sets the type. Possible values include: 'ImageDesk',
     'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser',
     'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk',
     'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
    :type type: str or ~softheon.enterprise.api.client.models.enum
    :param full_name: Gets or sets the full name.
    :type full_name: str
    :param ip_address: Gets or sets the ip address.
    :type ip_address: str
    :param entity_acl: Gets or sets the entity acl.
    :type entity_acl: int
    :param attachment_acl: Gets or sets the attachment acl.
    :type attachment_acl: int
    :param note_acl: Gets or sets the note acl.
    :type note_acl: int
    :param entity_feature: Gets or sets the entity feature.
    :type entity_feature: int
    :param attachment_feature: Gets or sets the attachment feature.
    :type attachment_feature: int
    :param note_feature: Gets or sets the note feature.
    :type note_feature: int
    :param admin_mask: Gets or sets the admin mask. Possible values include:
     'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin', 'UserAdmin',
     'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin', 'ApplicationAdmin'
    :type admin_mask: str or ~softheon.enterprise.api.client.models.enum
    :param address: Gets or sets the address.
    :type address: str
    """

    _validation = {
        'username': {'required': True, 'max_length': 255, 'min_length': 0},
        'full_name': {'required': True, 'max_length': 255, 'min_length': 0},
        'ip_address': {'required': True, 'max_length': 255, 'min_length': 0},
        'address': {'max_length': 255, 'min_length': 0},
    }

    _attribute_map = {
        'username': {'key': 'Username', 'type': 'str'},
        'state': {'key': 'State', 'type': 'str'},
        'type': {'key': 'Type', 'type': 'str'},
        'full_name': {'key': 'FullName', 'type': 'str'},
        'ip_address': {'key': 'IPAddress', 'type': 'str'},
        'entity_acl': {'key': 'EntityAcl', 'type': 'int'},
        'attachment_acl': {'key': 'AttachmentAcl', 'type': 'int'},
        'note_acl': {'key': 'NoteAcl', 'type': 'int'},
        'entity_feature': {'key': 'EntityFeature', 'type': 'int'},
        'attachment_feature': {'key': 'AttachmentFeature', 'type': 'int'},
        'note_feature': {'key': 'NoteFeature', 'type': 'int'},
        'admin_mask': {'key': 'AdminMask', 'type': 'str'},
        'address': {'key': 'Address', 'type': 'str'},
    }

    def __init__(self, username, full_name, ip_address, state=None, type=None, entity_acl=None, attachment_acl=None, note_acl=None, entity_feature=None, attachment_feature=None, note_feature=None, admin_mask=None, address=None):
        super(InsertUserRequestModel, self).__init__()
        self.username = username
        self.state = state
        self.type = type
        self.full_name = full_name
        self.ip_address = ip_address
        self.entity_acl = entity_acl
        self.attachment_acl = attachment_acl
        self.note_acl = note_acl
        self.entity_feature = entity_feature
        self.attachment_feature = attachment_feature
        self.note_feature = note_feature
        self.admin_mask = admin_mask
        self.address = address
