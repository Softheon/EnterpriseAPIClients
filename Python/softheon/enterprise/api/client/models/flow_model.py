# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class FlowModel(Model):
    """The model that is sent in response to a GET request for Flow.

    :param id: Gets or sets the identifier.
    :type id: int
    :param drawer_id: Gets or sets the drawer identifier.
    :type drawer_id: int
    :param entity_id: Gets or sets the entity identifier.
    :type entity_id: int
    :param type: Gets or sets the type. Possible values include: 'None',
     'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql',
     'Dde'
    :type type: str or ~softheon.enterprise.api.client.models.enum
    :param queue_id: Gets or sets the queue identifier.
    :type queue_id: int
    :param workflow_time: Gets or sets the workflow time.
    :type workflow_time: datetime
    :param insertion_time: Gets or sets the insertion time.
    :type insertion_time: datetime
    :param workflow_user_id: Gets or sets the workflow user identifier.
    :type workflow_user_id: int
    :param workflow_user_full_name: Gets or sets the full name of the workflow
     user.
    :type workflow_user_full_name: str
    :param workflow_group_id: Gets or sets the workflow group identifier.
    :type workflow_group_id: int
    :param workflow_group_name: Gets or sets the name of the workflow group.
    :type workflow_group_name: str
    :param operation: Gets or sets the operation. Possible values include:
     'None', 'Update', 'Reset', 'Override', 'Null'
    :type operation: str or ~softheon.enterprise.api.client.models.enum
    :param category: Gets or sets the category. Possible values include:
     'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip',
     'ReviewRoutingSlip', 'Override'
    :type category: str or ~softheon.enterprise.api.client.models.enum
    :param status: Gets or sets the status. Possible values include: 'None',
     'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
    :type status: str or ~softheon.enterprise.api.client.models.enum
    :param state: Gets or sets the state. Possible values include: 'None',
     'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override', 'OverrideR',
     'WaitingR'
    :type state: str or ~softheon.enterprise.api.client.models.enum
    :param source: Gets or sets the source.
    :type source: str
    :param ip_address: Gets or sets the ip address.
    :type ip_address: str
    :param computer: Gets or sets the computer.
    :type computer: str
    :param description: Gets or sets the description.
    :type description: str
    :param index1: Gets or sets the index1.
    :type index1: int
    :param index2: Gets or sets the index2.
    :type index2: int
    """

    _attribute_map = {
        'id': {'key': 'ID', 'type': 'int'},
        'drawer_id': {'key': 'DrawerID', 'type': 'int'},
        'entity_id': {'key': 'EntityID', 'type': 'int'},
        'type': {'key': 'Type', 'type': 'str'},
        'queue_id': {'key': 'QueueID', 'type': 'int'},
        'workflow_time': {'key': 'WorkflowTime', 'type': 'iso-8601'},
        'insertion_time': {'key': 'InsertionTime', 'type': 'iso-8601'},
        'workflow_user_id': {'key': 'WorkflowUserID', 'type': 'int'},
        'workflow_user_full_name': {'key': 'WorkflowUserFullName', 'type': 'str'},
        'workflow_group_id': {'key': 'WorkflowGroupID', 'type': 'int'},
        'workflow_group_name': {'key': 'WorkflowGroupName', 'type': 'str'},
        'operation': {'key': 'Operation', 'type': 'str'},
        'category': {'key': 'Category', 'type': 'str'},
        'status': {'key': 'Status', 'type': 'str'},
        'state': {'key': 'State', 'type': 'str'},
        'source': {'key': 'Source', 'type': 'str'},
        'ip_address': {'key': 'IPAddress', 'type': 'str'},
        'computer': {'key': 'Computer', 'type': 'str'},
        'description': {'key': 'Description', 'type': 'str'},
        'index1': {'key': 'Index1', 'type': 'int'},
        'index2': {'key': 'Index2', 'type': 'int'},
    }

    def __init__(self, id=None, drawer_id=None, entity_id=None, type=None, queue_id=None, workflow_time=None, insertion_time=None, workflow_user_id=None, workflow_user_full_name=None, workflow_group_id=None, workflow_group_name=None, operation=None, category=None, status=None, state=None, source=None, ip_address=None, computer=None, description=None, index1=None, index2=None):
        super(FlowModel, self).__init__()
        self.id = id
        self.drawer_id = drawer_id
        self.entity_id = entity_id
        self.type = type
        self.queue_id = queue_id
        self.workflow_time = workflow_time
        self.insertion_time = insertion_time
        self.workflow_user_id = workflow_user_id
        self.workflow_user_full_name = workflow_user_full_name
        self.workflow_group_id = workflow_group_id
        self.workflow_group_name = workflow_group_name
        self.operation = operation
        self.category = category
        self.status = status
        self.state = state
        self.source = source
        self.ip_address = ip_address
        self.computer = computer
        self.description = description
        self.index1 = index1
        self.index2 = index2
