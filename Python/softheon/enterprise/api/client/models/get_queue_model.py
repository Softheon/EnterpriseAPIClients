# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class GetQueueModel(Model):
    """Defines the criteria to perform a query on queues.

    :param id: Gets or sets the queue identifier.
    :type id: int
    :param name: Gets or sets the name.
    :type name: str
    :param alias: Gets or sets the alias.
    :type alias: str
    :param type: Gets or sets the type. Possible values include: 'Inbound',
     'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax',
     'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
     'CdoInfostore', 'CdoFolder'
    :type type: str or ~softheon.enterprise.api.client.models.enum
    :param access: Gets or sets the access level.
    :type access: int
    :param bypass_security: Gets or sets a value indicating whether to bypass
     security checks.
    :type bypass_security: bool
    :param page: Gets or sets the page number.
    :type page: int
    :param page_size: Gets or sets the size of the page.
    :type page_size: int
    :param sort_order: Gets or sets the order. Possible values include:
     'Unspecified', 'Ascending', 'Descending'
    :type sort_order: str or ~softheon.enterprise.api.client.models.enum
    :param sort_by: Gets or sets the column to order by. Possible values
     include: 'ID', 'Type', 'Name', 'Alias'
    :type sort_by: str or ~softheon.enterprise.api.client.models.enum
    """

    _validation = {
        'id': {'maximum': 2147483647, 'minimum': 1},
        'name': {'max_length': 255, 'min_length': 0},
        'alias': {'max_length': 255, 'min_length': 0},
        'page': {'maximum': 2147483647, 'minimum': 1},
        'page_size': {'maximum': 1000, 'minimum': 1},
    }

    _attribute_map = {
        'id': {'key': 'ID', 'type': 'int'},
        'name': {'key': 'Name', 'type': 'str'},
        'alias': {'key': 'Alias', 'type': 'str'},
        'type': {'key': 'Type', 'type': 'str'},
        'access': {'key': 'Access', 'type': 'int'},
        'bypass_security': {'key': 'BypassSecurity', 'type': 'bool'},
        'page': {'key': 'Page', 'type': 'int'},
        'page_size': {'key': 'PageSize', 'type': 'int'},
        'sort_order': {'key': 'SortOrder', 'type': 'str'},
        'sort_by': {'key': 'SortBy', 'type': 'str'},
    }

    def __init__(self, id=None, name=None, alias=None, type=None, access=None, bypass_security=None, page=None, page_size=None, sort_order=None, sort_by=None):
        super(GetQueueModel, self).__init__()
        self.id = id
        self.name = name
        self.alias = alias
        self.type = type
        self.access = access
        self.bypass_security = bypass_security
        self.page = page
        self.page_size = page_size
        self.sort_order = sort_order
        self.sort_by = sort_by
