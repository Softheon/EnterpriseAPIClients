# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class GetUserRequestModel(Model):
    """Model for the GET User input parameters.

    :param id: Gets or sets the identifier.
    :type id: int
    :param primary_group_id: Gets or sets the primary group identifier.
    :type primary_group_id: int
    :param group_id: Gets or sets the group identifier.
    :type group_id: int
    :param group_name: Gets or sets the name of the group.
    :type group_name: str
    :param username: Gets or sets the username.
    :type username: str
    :param type: Gets or sets the type. Possible values include: 'ImageDesk',
     'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser',
     'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk',
     'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
    :type type: str or ~softheon.enterprise.api.client.models.enum
    :param state: Gets or sets the state. Possible values include: 'Active',
     'Inactive'
    :type state: str or ~softheon.enterprise.api.client.models.enum
    :param full_name: Gets or sets the full name.
    :type full_name: str
    :param page: Gets or sets the page number.
    :type page: int
    :param page_size: Gets or sets the size of the page.
    :type page_size: int
    :param sort_order: Gets or sets the order. Possible values include:
     'Unspecified', 'Ascending', 'Descending'
    :type sort_order: str or ~softheon.enterprise.api.client.models.enum
    :param sort_by: Gets or sets the column to order by. Possible values
     include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName', 'Type',
     'State'
    :type sort_by: str or ~softheon.enterprise.api.client.models.enum
    """

    _validation = {
        'page': {'maximum': 2147483647, 'minimum': 1},
        'page_size': {'maximum': 1000, 'minimum': 1},
    }

    _attribute_map = {
        'id': {'key': 'ID', 'type': 'int'},
        'primary_group_id': {'key': 'PrimaryGroupID', 'type': 'int'},
        'group_id': {'key': 'GroupID', 'type': 'int'},
        'group_name': {'key': 'GroupName', 'type': 'str'},
        'username': {'key': 'Username', 'type': 'str'},
        'type': {'key': 'Type', 'type': 'str'},
        'state': {'key': 'State', 'type': 'str'},
        'full_name': {'key': 'FullName', 'type': 'str'},
        'page': {'key': 'Page', 'type': 'int'},
        'page_size': {'key': 'PageSize', 'type': 'int'},
        'sort_order': {'key': 'SortOrder', 'type': 'str'},
        'sort_by': {'key': 'SortBy', 'type': 'str'},
    }

    def __init__(self, id=None, primary_group_id=None, group_id=None, group_name=None, username=None, type=None, state=None, full_name=None, page=None, page_size=None, sort_order=None, sort_by=None):
        super(GetUserRequestModel, self).__init__()
        self.id = id
        self.primary_group_id = primary_group_id
        self.group_id = group_id
        self.group_name = group_name
        self.username = username
        self.type = type
        self.state = state
        self.full_name = full_name
        self.page = page
        self.page_size = page_size
        self.sort_order = sort_order
        self.sort_by = sort_by
