# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class GetQueueAssignmentModel(Model):
    """Defines the criteria to perform a query on assignments.

    :param queue_id: Gets or sets the unique queue identifier.
    :type queue_id: int
    :param user_id: Gets or sets the user identifier.
    :type user_id: int
    :param group_id: Gets or sets the group identifier.
    :type group_id: int
    :param type: Gets or sets the queue assignment type. Possible values
     include: 'Unspecified', 'Primary', 'Secondary'
    :type type: str or ~softheon.enterprise.api.client.models.enum
    :param order: Gets or sets the sort order.
    :type order: int
    :param task_sort_column: Gets or sets the task sort column. Possible
     values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID',
     'ObjectType', 'State', 'Priority', 'Description', 'Message1', 'Message2',
     'Message3', 'Message4', 'Message5', 'OwnerUserID', 'OwnerGroupID',
     'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID',
     'InsertionTime', 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1',
     'ReservedString1'
    :type task_sort_column: str or ~softheon.enterprise.api.client.models.enum
    :param state: Gets or sets the state. Possible values include:
     'Unspecified', 'Inactive', 'Active'
    :type state: str or ~softheon.enterprise.api.client.models.enum
    :param fetch_type: Gets or sets the type of the fetch. Possible values
     include: 'Unspecified', 'Manual', 'Push'
    :type fetch_type: str or ~softheon.enterprise.api.client.models.enum
    :param page: Gets or sets the page number.
    :type page: int
    :param page_size: Gets or sets the size of the page.
    :type page_size: int
    :param sort_order: Gets or sets the order. Possible values include:
     'Unspecified', 'Ascending', 'Descending'
    :type sort_order: str or ~softheon.enterprise.api.client.models.enum
    :param sort_by: Gets or sets the column to order by. Possible values
     include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order',
     'FetchType'
    :type sort_by: str or ~softheon.enterprise.api.client.models.enum
    """

    _validation = {
        'queue_id': {'maximum': 2147483647, 'minimum': 1},
        'user_id': {'maximum': 2147483647, 'minimum': 1},
        'group_id': {'maximum': 2147483647, 'minimum': 1},
        'order': {'maximum': 2147483647, 'minimum': 1},
        'page': {'maximum': 2147483647, 'minimum': 1},
        'page_size': {'maximum': 1000, 'minimum': 1},
    }

    _attribute_map = {
        'queue_id': {'key': 'QueueID', 'type': 'int'},
        'user_id': {'key': 'UserID', 'type': 'int'},
        'group_id': {'key': 'GroupID', 'type': 'int'},
        'type': {'key': 'Type', 'type': 'str'},
        'order': {'key': 'Order', 'type': 'int'},
        'task_sort_column': {'key': 'TaskSortColumn', 'type': 'str'},
        'state': {'key': 'State', 'type': 'str'},
        'fetch_type': {'key': 'FetchType', 'type': 'str'},
        'page': {'key': 'Page', 'type': 'int'},
        'page_size': {'key': 'PageSize', 'type': 'int'},
        'sort_order': {'key': 'SortOrder', 'type': 'str'},
        'sort_by': {'key': 'SortBy', 'type': 'str'},
    }

    def __init__(self, queue_id=None, user_id=None, group_id=None, type=None, order=None, task_sort_column=None, state=None, fetch_type=None, page=None, page_size=None, sort_order=None, sort_by=None):
        super(GetQueueAssignmentModel, self).__init__()
        self.queue_id = queue_id
        self.user_id = user_id
        self.group_id = group_id
        self.type = type
        self.order = order
        self.task_sort_column = task_sort_column
        self.state = state
        self.fetch_type = fetch_type
        self.page = page
        self.page_size = page_size
        self.sort_order = sort_order
        self.sort_by = sort_by
