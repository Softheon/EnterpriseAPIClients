# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class EntityDefinitionBase(Model):
    """The entity definition base, also acts as the insert model.

    :param type: Gets or sets the type of template.
    :type type: int
    :param category: Gets or sets the category of template.
    :type category: str
    :param name: Gets or sets the name of template.
    :type name: str
    :param has_class: Gets or sets if the template has classes.
    :type has_class: bool
    :param has_security: Gets or sets if the template has security.
    :type has_security: bool
    :param has_profiles: Gets or sets if the template has profiles.
    :type has_profiles: bool
    :param has_items: Gets or sets the has items.
    :type has_items: bool
    :param small_image: Gets or sets the small image.
    :type small_image: str
    :param large_image: Gets or sets the large image.
    :type large_image: str
    :param has_audit: Gets or sets if the template has auditing enabled.
    :type has_audit: bool
    :param allows_view_images: Gets or sets if the template allows viewing
     images.
    :type allows_view_images: bool
    :param is_review_state: Gets or sets if the entity is created in a review
     state.
    :type is_review_state: bool
    :param reserved_string1: Gets or sets the reserved string1.
    :type reserved_string1: str
    :param reserved_string2: Gets or sets the reserved string2.
    :type reserved_string2: str
    :param reserved_int1: Gets or sets the reserved int1.
    :type reserved_int1: int
    :param reserved_int2: Gets or sets the reserved int2.
    :type reserved_int2: int
    :param drawers: Gets or sets the drawers.
    :type drawers: list[int]
    :param profiles: Gets or sets the profiles.
    :type profiles:
     list[~softheon.enterprise.api.client.models.ProfileDefinitionModel]
    """

    _validation = {
        'type': {'required': True, 'maximum': 2147483647, 'minimum': 1},
        'category': {'required': True, 'max_length': 255, 'min_length': 0},
        'name': {'required': True, 'max_length': 255, 'min_length': 0},
        'small_image': {'max_length': 255, 'min_length': 0},
        'large_image': {'max_length': 255, 'min_length': 0},
        'reserved_string1': {'max_length': 255, 'min_length': 0},
        'reserved_string2': {'max_length': 255, 'min_length': 0},
    }

    _attribute_map = {
        'type': {'key': 'Type', 'type': 'int'},
        'category': {'key': 'Category', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'has_class': {'key': 'HasClass', 'type': 'bool'},
        'has_security': {'key': 'HasSecurity', 'type': 'bool'},
        'has_profiles': {'key': 'HasProfiles', 'type': 'bool'},
        'has_items': {'key': 'HasItems', 'type': 'bool'},
        'small_image': {'key': 'SmallImage', 'type': 'str'},
        'large_image': {'key': 'LargeImage', 'type': 'str'},
        'has_audit': {'key': 'HasAudit', 'type': 'bool'},
        'allows_view_images': {'key': 'AllowsViewImages', 'type': 'bool'},
        'is_review_state': {'key': 'IsReviewState', 'type': 'bool'},
        'reserved_string1': {'key': 'ReservedString1', 'type': 'str'},
        'reserved_string2': {'key': 'ReservedString2', 'type': 'str'},
        'reserved_int1': {'key': 'ReservedInt1', 'type': 'int'},
        'reserved_int2': {'key': 'ReservedInt2', 'type': 'int'},
        'drawers': {'key': 'Drawers', 'type': '[int]'},
        'profiles': {'key': 'Profiles', 'type': '[ProfileDefinitionModel]'},
    }

    def __init__(self, type, category, name, has_class=None, has_security=None, has_profiles=None, has_items=None, small_image=None, large_image=None, has_audit=None, allows_view_images=None, is_review_state=None, reserved_string1=None, reserved_string2=None, reserved_int1=None, reserved_int2=None, drawers=None, profiles=None):
        super(EntityDefinitionBase, self).__init__()
        self.type = type
        self.category = category
        self.name = name
        self.has_class = has_class
        self.has_security = has_security
        self.has_profiles = has_profiles
        self.has_items = has_items
        self.small_image = small_image
        self.large_image = large_image
        self.has_audit = has_audit
        self.allows_view_images = allows_view_images
        self.is_review_state = is_review_state
        self.reserved_string1 = reserved_string1
        self.reserved_string2 = reserved_string2
        self.reserved_int1 = reserved_int1
        self.reserved_int2 = reserved_int2
        self.drawers = drawers
        self.profiles = profiles
