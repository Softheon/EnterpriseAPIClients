/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Model for the GET Flow input parameters
 *
 */
class GetFlowRequestModel {
  /**
   * Create a GetFlowRequestModel.
   * @member {number} drawerID Gets or sets the drawer identifier.
   * @member {number} entityID Gets or sets the entity identifier.
   * @member {string} [type] Gets or sets the type. Possible values include:
   * 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc',
   * 'Sql', 'Dde'
   * @member {number} [queueID] Gets or sets the queue identifier.
   * @member {date} [minWorkflowTime] Gets or sets the minimum workflow time.
   * @member {date} [maxWorkflowTime] Gets or sets the maximum workflow time.
   * @member {date} [minInsertionTime] Gets or sets the minimum insertion time.
   * @member {date} [maxInsertionTime] Gets or sets the maximum insertion time.
   * @member {number} [workflowUserID] Gets or sets the workflow user
   * identifier.
   * @member {number} [workflowGroupID] Gets or sets the workflow group
   * identifier.
   * @member {string} [operation] Gets or sets the operation. Possible values
   * include: 'None', 'Update', 'Reset', 'Override', 'Null'
   * @member {string} [category] Gets or sets the category. Possible values
   * include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset',
   * 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
   * @member {string} [status] Gets or sets the status. Possible values
   * include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
   * @member {string} [state] Gets or sets the state. Possible values include:
   * 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override',
   * 'OverrideR', 'WaitingR'
   * @member {number} [minIndex1] Gets or sets the minimum index 1.
   * @member {number} [maxIndex1] Gets or sets the maximum index 1.
   * @member {number} [minIndex2] Gets or sets the minimum index 2.
   * @member {number} [maxIndex2] Gets or sets the maximum index 2.
   * @member {number} [page] Gets or sets the page number.
   * @member {number} [pageSize] Gets or sets the size of the page.
   * @member {string} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   * @member {string} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime',
   * 'Index'
   */
  constructor() {
  }

  /**
   * Defines the metadata of GetFlowRequestModel
   *
   * @returns {object} metadata of GetFlowRequestModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GetFlowRequestModel',
      type: {
        name: 'Composite',
        className: 'GetFlowRequestModel',
        modelProperties: {
          drawerID: {
            required: true,
            serializedName: 'DrawerID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          entityID: {
            required: true,
            serializedName: 'EntityID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          type: {
            required: false,
            serializedName: 'Type',
            type: {
              name: 'String'
            }
          },
          queueID: {
            required: false,
            serializedName: 'QueueID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          minWorkflowTime: {
            required: false,
            serializedName: 'MinWorkflowTime',
            type: {
              name: 'DateTime'
            }
          },
          maxWorkflowTime: {
            required: false,
            serializedName: 'MaxWorkflowTime',
            type: {
              name: 'DateTime'
            }
          },
          minInsertionTime: {
            required: false,
            serializedName: 'MinInsertionTime',
            type: {
              name: 'DateTime'
            }
          },
          maxInsertionTime: {
            required: false,
            serializedName: 'MaxInsertionTime',
            type: {
              name: 'DateTime'
            }
          },
          workflowUserID: {
            required: false,
            serializedName: 'WorkflowUserID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          workflowGroupID: {
            required: false,
            serializedName: 'WorkflowGroupID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          operation: {
            required: false,
            serializedName: 'Operation',
            type: {
              name: 'String'
            }
          },
          category: {
            required: false,
            serializedName: 'Category',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'Status',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            serializedName: 'State',
            type: {
              name: 'String'
            }
          },
          minIndex1: {
            required: false,
            serializedName: 'MinIndex1',
            type: {
              name: 'Number'
            }
          },
          maxIndex1: {
            required: false,
            serializedName: 'MaxIndex1',
            type: {
              name: 'Number'
            }
          },
          minIndex2: {
            required: false,
            serializedName: 'MinIndex2',
            type: {
              name: 'Number'
            }
          },
          maxIndex2: {
            required: false,
            serializedName: 'MaxIndex2',
            type: {
              name: 'Number'
            }
          },
          page: {
            required: false,
            serializedName: 'Page',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          pageSize: {
            required: false,
            serializedName: 'PageSize',
            constraints: {
              InclusiveMaximum: 1000,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          sortOrder: {
            required: false,
            serializedName: 'SortOrder',
            type: {
              name: 'String'
            }
          },
          sortBy: {
            required: false,
            serializedName: 'SortBy',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = GetFlowRequestModel;
