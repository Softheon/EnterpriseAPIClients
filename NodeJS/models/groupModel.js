/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The model that is sent in response to a GET request for Groups
 *
 */
class GroupModel {
  /**
   * Create a GroupModel.
   * @member {number} [id] Gets or sets the group identifier.
   * @member {number} [queueCount] Gets or sets the queue count.
   * @member {number} [userCount] Gets or sets the user count.
   * @member {number} [userID] Gets or sets the user identifier.
   * @member {string} name Gets or sets the name.
   * @member {string} [type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   * @member {string} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  constructor() {
  }

  /**
   * Defines the metadata of GroupModel
   *
   * @returns {object} metadata of GroupModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GroupModel',
      type: {
        name: 'Composite',
        className: 'GroupModel',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'ID',
            type: {
              name: 'Number'
            }
          },
          queueCount: {
            required: false,
            serializedName: 'QueueCount',
            type: {
              name: 'Number'
            }
          },
          userCount: {
            required: false,
            serializedName: 'UserCount',
            type: {
              name: 'Number'
            }
          },
          userID: {
            required: false,
            serializedName: 'UserID',
            type: {
              name: 'Number'
            }
          },
          name: {
            required: true,
            serializedName: 'Name',
            constraints: {
              MaxLength: 255,
              MinLength: 0
            },
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'Type',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            serializedName: 'State',
            type: {
              name: 'String'
            }
          },
          reservedInt1: {
            required: false,
            serializedName: 'ReservedInt1',
            type: {
              name: 'Number'
            }
          },
          reservedInt2: {
            required: false,
            serializedName: 'ReservedInt2',
            type: {
              name: 'Number'
            }
          },
          reservedString1: {
            required: false,
            serializedName: 'ReservedString1',
            constraints: {
              MaxLength: 255,
              MinLength: 0
            },
            type: {
              name: 'String'
            }
          },
          reservedString2: {
            required: false,
            serializedName: 'ReservedString2',
            constraints: {
              MaxLength: 255,
              MinLength: 0
            },
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = GroupModel;
