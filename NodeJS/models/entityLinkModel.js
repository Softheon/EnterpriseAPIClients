/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The model that is sent in response to a GET request for Link
 *
 */
class EntityLinkModel {
  /**
   * Create a EntityLinkModel.
   * @member {number} [childDrawerID] Gets or sets the child drawer identifier.
   * @member {number} [childEntityID] Gets or sets the child entity identifier.
   * @member {number} [childType] Gets or sets the type of the child.
   * @member {string} [virtualName] Gets or sets the name of the virtual.
   * @member {number} [id] Gets or sets the identifier.
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   * @member {number} [entityID] Gets or sets the entity identifier.
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   * @member {number} [includerUserID] Gets or sets the includer user
   * identifier.
   * @member {string} [includerUserFullName] Gets or sets the full name of the
   * includer user.
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   * @member {string} [modifierUserFullName] Gets or sets the full name of the
   * modifier user.
   * @member {date} [insertionTime] Gets or sets the insertion time.
   * @member {date} [modificationTime] Gets or sets the modification time.
   * @member {number} [classProperty] Gets or sets the class.
   * @member {string} [name] Gets or sets the name.
   * @member {number} [acl] Gets or sets the acl.
   * @member {number} [pageNumber] Gets or sets the page number.
   * @member {string} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic', 'Static',
   * 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   * @member {string} [note] Gets or sets the note.
   */
  constructor() {
  }

  /**
   * Defines the metadata of EntityLinkModel
   *
   * @returns {object} metadata of EntityLinkModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EntityLinkModel',
      type: {
        name: 'Composite',
        className: 'EntityLinkModel',
        modelProperties: {
          childDrawerID: {
            required: false,
            serializedName: 'ChildDrawerID',
            type: {
              name: 'Number'
            }
          },
          childEntityID: {
            required: false,
            serializedName: 'ChildEntityID',
            type: {
              name: 'Number'
            }
          },
          childType: {
            required: false,
            serializedName: 'ChildType',
            type: {
              name: 'Number'
            }
          },
          virtualName: {
            required: false,
            serializedName: 'VirtualName',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            serializedName: 'ID',
            type: {
              name: 'Number'
            }
          },
          drawerID: {
            required: false,
            serializedName: 'DrawerID',
            type: {
              name: 'Number'
            }
          },
          entityID: {
            required: false,
            serializedName: 'EntityID',
            type: {
              name: 'Number'
            }
          },
          ownerUserID: {
            required: false,
            serializedName: 'OwnerUserID',
            type: {
              name: 'Number'
            }
          },
          ownerUserFullName: {
            required: false,
            serializedName: 'OwnerUserFullName',
            type: {
              name: 'String'
            }
          },
          ownerGroupID: {
            required: false,
            serializedName: 'OwnerGroupID',
            type: {
              name: 'Number'
            }
          },
          ownerGroupName: {
            required: false,
            serializedName: 'OwnerGroupName',
            type: {
              name: 'String'
            }
          },
          includerUserID: {
            required: false,
            serializedName: 'IncluderUserID',
            type: {
              name: 'Number'
            }
          },
          includerUserFullName: {
            required: false,
            serializedName: 'IncluderUserFullName',
            type: {
              name: 'String'
            }
          },
          modifierUserID: {
            required: false,
            serializedName: 'ModifierUserID',
            type: {
              name: 'Number'
            }
          },
          modifierUserFullName: {
            required: false,
            serializedName: 'ModifierUserFullName',
            type: {
              name: 'String'
            }
          },
          insertionTime: {
            required: false,
            serializedName: 'InsertionTime',
            type: {
              name: 'DateTime'
            }
          },
          modificationTime: {
            required: false,
            serializedName: 'ModificationTime',
            type: {
              name: 'DateTime'
            }
          },
          classProperty: {
            required: false,
            serializedName: 'Class',
            type: {
              name: 'Number'
            }
          },
          name: {
            required: false,
            serializedName: 'Name',
            constraints: {
              MaxLength: 255,
              MinLength: 0
            },
            type: {
              name: 'String'
            }
          },
          acl: {
            required: false,
            serializedName: 'Acl',
            type: {
              name: 'Number'
            }
          },
          pageNumber: {
            required: false,
            serializedName: 'PageNumber',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          state: {
            required: false,
            serializedName: 'State',
            type: {
              name: 'String'
            }
          },
          note: {
            required: false,
            serializedName: 'Note',
            constraints: {
              MaxLength: 255,
              MinLength: 0
            },
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = EntityLinkModel;
