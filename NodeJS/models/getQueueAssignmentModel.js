/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Defines the criteria to perform a query on assignments
 *
 */
class GetQueueAssignmentModel {
  /**
   * Create a GetQueueAssignmentModel.
   * @member {number} [queueID] Gets or sets the unique queue identifier.
   * @member {number} [userID] Gets or sets the user identifier.
   * @member {number} [groupID] Gets or sets the group identifier.
   * @member {string} [type] Gets or sets the queue assignment type. Possible
   * values include: 'Unspecified', 'Primary', 'Secondary'
   * @member {number} [order] Gets or sets the sort order.
   * @member {string} [taskSortColumn] Gets or sets the task sort column.
   * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
   * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
   * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   * @member {string} [state] Gets or sets the state. Possible values include:
   * 'Unspecified', 'Inactive', 'Active'
   * @member {string} [fetchType] Gets or sets the type of the fetch. Possible
   * values include: 'Unspecified', 'Manual', 'Push'
   * @member {number} [page] Gets or sets the page number.
   * @member {number} [pageSize] Gets or sets the size of the page.
   * @member {string} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   * @member {string} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order',
   * 'FetchType'
   */
  constructor() {
  }

  /**
   * Defines the metadata of GetQueueAssignmentModel
   *
   * @returns {object} metadata of GetQueueAssignmentModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GetQueueAssignmentModel',
      type: {
        name: 'Composite',
        className: 'GetQueueAssignmentModel',
        modelProperties: {
          queueID: {
            required: false,
            serializedName: 'QueueID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          userID: {
            required: false,
            serializedName: 'UserID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          groupID: {
            required: false,
            serializedName: 'GroupID',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          type: {
            required: false,
            serializedName: 'Type',
            type: {
              name: 'String'
            }
          },
          order: {
            required: false,
            serializedName: 'Order',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          taskSortColumn: {
            required: false,
            serializedName: 'TaskSortColumn',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            serializedName: 'State',
            type: {
              name: 'String'
            }
          },
          fetchType: {
            required: false,
            serializedName: 'FetchType',
            type: {
              name: 'String'
            }
          },
          page: {
            required: false,
            serializedName: 'Page',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          pageSize: {
            required: false,
            serializedName: 'PageSize',
            constraints: {
              InclusiveMaximum: 1000,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          sortOrder: {
            required: false,
            serializedName: 'SortOrder',
            type: {
              name: 'String'
            }
          },
          sortBy: {
            required: false,
            serializedName: 'SortBy',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = GetQueueAssignmentModel;
