/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The model that is sent in response to a GET request for Extension
 *
 */
class ExtensionModel {
  /**
   * Create a ExtensionModel.
   * @member {string} [updateAction] Gets or sets the update action. Possible
   * values include: 'None', 'Update', 'Add', 'Remove'
   * @member {number} [entityID] Gets or sets the entity identifier.
   * @member {number} [profileID] Gets or sets the profile identifier.
   * @member {number} [id] Gets or sets the identifier.
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   * @member {number} [type] Gets or sets the type.
   * @member {number} [rowNumber] Gets or sets the row number.
   * @member {array} [strings] Gets or sets the strings.
   * @member {array} [integers] Gets or sets the integers.
   * @member {array} [doubles] Gets or sets the doubles.
   * @member {array} [dates] Gets or sets the dates.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ExtensionModel
   *
   * @returns {object} metadata of ExtensionModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ExtensionModel',
      type: {
        name: 'Composite',
        className: 'ExtensionModel',
        modelProperties: {
          updateAction: {
            required: false,
            serializedName: 'UpdateAction',
            type: {
              name: 'String'
            }
          },
          entityID: {
            required: false,
            serializedName: 'EntityID',
            type: {
              name: 'Number'
            }
          },
          profileID: {
            required: false,
            serializedName: 'ProfileID',
            type: {
              name: 'Number'
            }
          },
          id: {
            required: false,
            serializedName: 'ID',
            type: {
              name: 'Number'
            }
          },
          drawerID: {
            required: false,
            serializedName: 'DrawerID',
            type: {
              name: 'Number'
            }
          },
          type: {
            required: false,
            serializedName: 'Type',
            type: {
              name: 'Number'
            }
          },
          rowNumber: {
            required: false,
            serializedName: 'RowNumber',
            type: {
              name: 'Number'
            }
          },
          strings: {
            required: false,
            serializedName: 'Strings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          integers: {
            required: false,
            serializedName: 'Integers',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          doubles: {
            required: false,
            serializedName: 'Doubles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          dates: {
            required: false,
            serializedName: 'Dates',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DateElementType',
                  type: {
                    name: 'DateTime'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ExtensionModel;
