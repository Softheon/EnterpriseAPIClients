/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Model for Template Fields
 *
 */
class FieldDefinitionModel {
  /**
   * Create a FieldDefinitionModel.
   * @member {string} [id] Gets or sets the identifier.
   * @member {string} name Gets or sets the name.
   * @member {string} [xmlTag] Gets or sets the XML tag.
   * @member {string} type Gets or sets the type. Possible values include:
   * 'Undefined', 'String', 'Integer', 'Double', 'DateTime', 'Paragraph',
   * 'CheckBox', 'RadioButton', 'ComboBox', 'ListBox', 'Table', 'LargeText',
   * 'ComboString'
   * @member {number} index Gets or sets the index.
   * @member {number} position Gets or sets the position.
   * @member {string} [note] Gets or sets the note.
   * @member {boolean} [isEnabled] Gets or sets a value indicating whether this
   * instance is enabled.
   * @member {string} [isRequired] Gets or sets a value indicating whether this
   * instance is required. Possible values include: 'NotRequired', 'Always',
   * 'OnAccept'
   * @member {boolean} [isProtected] Gets or sets a value indicating whether
   * this instance is protected.
   * @member {string} [default] Gets or sets the default value.
   * @member {string} [mask] Gets or sets the mask.
   * @member {number} [length] Gets or sets the length.
   * @member {boolean} [isMultiline] Gets or sets a value indicating whether
   * this instance is multiline.
   * @member {string} [format] Gets or sets the format.
   * @member {boolean} [isSorted] Gets or sets a value indicating whether this
   * instance is sorted.
   * @member {number} [select] Gets or sets the select.
   * @member {string} [formula] Gets or sets the formula.
   * @member {boolean} [hasValidation] Gets or sets a value indicating whether
   * this instance has validation.
   * @member {string} [validationColumn] Gets or sets the validation column.
   * @member {number} [foundOperation] Gets or sets the found operation.
   * @member {number} [notFoundOperation] Gets or sets the not found operation.
   * @member {number} [sampleImage] Gets or sets the sample image.
   * @member {string} [lookup] Gets or sets the lookup.
   * @member {boolean} [hasLink] Gets or sets a value indicating whether this
   * instance has linking enabled.
   * @member {number} [linkEntityType] Gets or sets the type of the link
   * entity.
   * @member {string} [linkProfile] Gets or sets the link profile.
   * @member {string} [linkField] Gets or sets the link field.
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   * @member {boolean} [reservedBit1] Gets or sets a value indicating whether
   * [reserved bit1].
   * @member {boolean} [reservedBit2] Gets or sets a value indicating whether
   * [reserved bit2].
   * @member {array} [items] Gets or sets the template items.
   * @member {array} [fields] Gets or sets the fields.
   */
  constructor() {
  }

  /**
   * Defines the metadata of FieldDefinitionModel
   *
   * @returns {object} metadata of FieldDefinitionModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FieldDefinitionModel',
      type: {
        name: 'Composite',
        className: 'FieldDefinitionModel',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'ID',
            type: {
              name: 'String'
            }
          },
          name: {
            required: true,
            serializedName: 'Name',
            type: {
              name: 'String'
            }
          },
          xmlTag: {
            required: false,
            serializedName: 'XmlTag',
            type: {
              name: 'String'
            }
          },
          type: {
            required: true,
            serializedName: 'Type',
            type: {
              name: 'String'
            }
          },
          index: {
            required: true,
            serializedName: 'Index',
            constraints: {
              InclusiveMaximum: 32,
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          position: {
            required: true,
            serializedName: 'Position',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 0
            },
            type: {
              name: 'Number'
            }
          },
          note: {
            required: false,
            serializedName: 'Note',
            type: {
              name: 'String'
            }
          },
          isEnabled: {
            required: false,
            serializedName: 'IsEnabled',
            type: {
              name: 'Boolean'
            }
          },
          isRequired: {
            required: false,
            serializedName: 'IsRequired',
            type: {
              name: 'String'
            }
          },
          isProtected: {
            required: false,
            serializedName: 'IsProtected',
            type: {
              name: 'Boolean'
            }
          },
          default: {
            required: false,
            serializedName: 'Default',
            type: {
              name: 'String'
            }
          },
          mask: {
            required: false,
            serializedName: 'Mask',
            type: {
              name: 'String'
            }
          },
          length: {
            required: false,
            serializedName: 'Length',
            type: {
              name: 'Number'
            }
          },
          isMultiline: {
            required: false,
            serializedName: 'IsMultiline',
            type: {
              name: 'Boolean'
            }
          },
          format: {
            required: false,
            serializedName: 'Format',
            type: {
              name: 'String'
            }
          },
          isSorted: {
            required: false,
            serializedName: 'IsSorted',
            type: {
              name: 'Boolean'
            }
          },
          select: {
            required: false,
            serializedName: 'Select',
            type: {
              name: 'Number'
            }
          },
          formula: {
            required: false,
            serializedName: 'Formula',
            type: {
              name: 'String'
            }
          },
          hasValidation: {
            required: false,
            serializedName: 'HasValidation',
            type: {
              name: 'Boolean'
            }
          },
          validationColumn: {
            required: false,
            serializedName: 'ValidationColumn',
            type: {
              name: 'String'
            }
          },
          foundOperation: {
            required: false,
            serializedName: 'FoundOperation',
            type: {
              name: 'Number'
            }
          },
          notFoundOperation: {
            required: false,
            serializedName: 'NotFoundOperation',
            type: {
              name: 'Number'
            }
          },
          sampleImage: {
            required: false,
            serializedName: 'SampleImage',
            type: {
              name: 'Number'
            }
          },
          lookup: {
            required: false,
            serializedName: 'Lookup',
            type: {
              name: 'String'
            }
          },
          hasLink: {
            required: false,
            serializedName: 'HasLink',
            type: {
              name: 'Boolean'
            }
          },
          linkEntityType: {
            required: false,
            serializedName: 'LinkEntityType',
            type: {
              name: 'Number'
            }
          },
          linkProfile: {
            required: false,
            serializedName: 'LinkProfile',
            type: {
              name: 'String'
            }
          },
          linkField: {
            required: false,
            serializedName: 'LinkField',
            type: {
              name: 'String'
            }
          },
          reservedString1: {
            required: false,
            serializedName: 'ReservedString1',
            type: {
              name: 'String'
            }
          },
          reservedString2: {
            required: false,
            serializedName: 'ReservedString2',
            type: {
              name: 'String'
            }
          },
          reservedInt1: {
            required: false,
            serializedName: 'ReservedInt1',
            type: {
              name: 'Number'
            }
          },
          reservedInt2: {
            required: false,
            serializedName: 'ReservedInt2',
            type: {
              name: 'Number'
            }
          },
          reservedBit1: {
            required: false,
            serializedName: 'ReservedBit1',
            type: {
              name: 'Boolean'
            }
          },
          reservedBit2: {
            required: false,
            serializedName: 'ReservedBit2',
            type: {
              name: 'Boolean'
            }
          },
          items: {
            required: false,
            serializedName: 'Items',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ItemDefinitionModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'ItemDefinitionModel'
                  }
              }
            }
          },
          fields: {
            required: false,
            serializedName: 'Fields',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FieldDefinitionModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'FieldDefinitionModel'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = FieldDefinitionModel;
