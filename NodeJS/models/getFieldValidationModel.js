/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Model for the GET Template input parameters
 *
 */
class GetFieldValidationModel {
  /**
   * Create a GetFieldValidationModel.
   * @member {string} [sortColumn] Gets or sets the sort column.
   * @member {array} [metadata] Gets or sets the metadata search options.
   * @member {number} [page] Gets or sets the page number.
   * @member {number} [pageSize] Gets or sets the size of the page.
   * @member {string} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   * @member {number} [sortBy] Gets or sets the column to order by.
   */
  constructor() {
  }

  /**
   * Defines the metadata of GetFieldValidationModel
   *
   * @returns {object} metadata of GetFieldValidationModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GetFieldValidationModel',
      type: {
        name: 'Composite',
        className: 'GetFieldValidationModel',
        modelProperties: {
          sortColumn: {
            required: false,
            serializedName: 'SortColumn',
            type: {
              name: 'String'
            }
          },
          metadata: {
            required: false,
            serializedName: 'Metadata',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'GetLookupFieldModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'GetLookupFieldModel'
                  }
              }
            }
          },
          page: {
            required: false,
            serializedName: 'Page',
            constraints: {
              InclusiveMaximum: 2147483647,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          pageSize: {
            required: false,
            serializedName: 'PageSize',
            constraints: {
              InclusiveMaximum: 1000,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          sortOrder: {
            required: false,
            serializedName: 'SortOrder',
            type: {
              name: 'String'
            }
          },
          sortBy: {
            required: false,
            serializedName: 'SortBy',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = GetFieldValidationModel;
