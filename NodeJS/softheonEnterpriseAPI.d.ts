/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

declare class SoftheonEnterpriseAPI extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the SoftheonEnterpriseAPI class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, baseUri?: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;


  /**
   * @summary Accepts the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  acceptTaskWithHttpOperationResponse(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Accepts the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  acceptTask(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  acceptTask(model: models.WorkflowActionModel, callback: ServiceCallback<any>): void;
  acceptTask(model: models.WorkflowActionModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Rejects the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  rejectTaskWithHttpOperationResponse(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Rejects the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  rejectTask(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  rejectTask(model: models.WorkflowActionModel, callback: ServiceCallback<any>): void;
  rejectTask(model: models.WorkflowActionModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Suspends the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  suspendTaskWithHttpOperationResponse(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Suspends the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  suspendTask(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  suspendTask(model: models.WorkflowActionModel, callback: ServiceCallback<any>): void;
  suspendTask(model: models.WorkflowActionModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Routes the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {boolean} [model.keepOriginalTask] Gets or sets a value indicating
   * whether [keep original task].
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  routeTaskWithHttpOperationResponse(model: models.WorkflowActionRouteModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Routes the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {boolean} [model.keepOriginalTask] Gets or sets a value indicating
   * whether [keep original task].
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  routeTask(model: models.WorkflowActionRouteModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  routeTask(model: models.WorkflowActionRouteModel, callback: ServiceCallback<any>): void;
  routeTask(model: models.WorkflowActionRouteModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Overrides the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  overrideTaskWithHttpOperationResponse(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Overrides the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  overrideTask(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  overrideTask(model: models.WorkflowActionModel, callback: ServiceCallback<any>): void;
  overrideTask(model: models.WorkflowActionModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Resets the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  resetTaskWithHttpOperationResponse(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Resets the task.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.taskID] Gets or sets the task identifier.
   *
   * @param {number} [model.targetID] Gets or sets the target id.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  resetTask(model: models.WorkflowActionModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  resetTask(model: models.WorkflowActionModel, callback: ServiceCallback<any>): void;
  resetTask(model: models.WorkflowActionModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Initializes the Workflow.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {array} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {array} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  initializeEntityWorkflowWithHttpOperationResponse(model: models.WorkflowActionInitializeModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Initializes the Workflow.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {array} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {array} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the name of the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the IP address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  initializeEntityWorkflow(model: models.WorkflowActionInitializeModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  initializeEntityWorkflow(model: models.WorkflowActionInitializeModel, callback: ServiceCallback<any>): void;
  initializeEntityWorkflow(model: models.WorkflowActionInitializeModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of all available applications.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllApplicationsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationModel[]>>;

  /**
   * @summary Gets a list of all available applications.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllApplications(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationModel[]>;
  getAllApplications(callback: ServiceCallback<models.ApplicationModel[]>): void;
  getAllApplications(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationModel[]>): void;


  /**
   * @summary Gets a single application by its unique identifier.
   *
   * @param {number} id The unique application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getApplicationByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationModel>>;

  /**
   * @summary Gets a single application by its unique identifier.
   *
   * @param {number} id The unique application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationModel>;
  getApplicationById(id: number, callback: ServiceCallback<models.ApplicationModel>): void;
  getApplicationById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationModel>): void;


  /**
   * @summary Gets a single application by its name.
   *
   * @param {string} name The unique application name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getApplicationByNameWithHttpOperationResponse(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationModel>>;

  /**
   * @summary Gets a single application by its name.
   *
   * @param {string} name The unique application name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationByName(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationModel>;
  getApplicationByName(name: string, callback: ServiceCallback<models.ApplicationModel>): void;
  getApplicationByName(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationModel>): void;


  /**
   * @summary Gets a list of drawer group associations.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDrawerGroupAssociationsWithHttpOperationResponse(drawerID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupDrawerModel[]>>;

  /**
   * @summary Gets a list of drawer group associations.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDrawerGroupAssociations(drawerID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupDrawerModel[]>;
  getDrawerGroupAssociations(drawerID: number, callback: ServiceCallback<models.GroupDrawerModel[]>): void;
  getDrawerGroupAssociations(drawerID: number, options: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupDrawerModel[]>): void;


  /**
   * @summary Gets a list of group drawer associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.drawerID] The drawer identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGroupDrawerAssociationsWithHttpOperationResponse(groupID: number, options?: { drawerID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupDrawerModel[]>>;

  /**
   * @summary Gets a list of group drawer associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.drawerID] The drawer identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGroupDrawerAssociations(groupID: number, options?: { drawerID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupDrawerModel[]>;
  getGroupDrawerAssociations(groupID: number, callback: ServiceCallback<models.GroupDrawerModel[]>): void;
  getGroupDrawerAssociations(groupID: number, options: { drawerID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupDrawerModel[]>): void;


  /**
   * @summary Inserts/Updates the drawer group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateDrawerGroupAssociationWithHttpOperationResponse(groupID: number, drawerID: number, model: models.GroupDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the drawer group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateDrawerGroupAssociation(groupID: number, drawerID: number, model: models.GroupDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateDrawerGroupAssociation(groupID: number, drawerID: number, model: models.GroupDrawerModel, callback: ServiceCallback<any>): void;
  createOrUpdateDrawerGroupAssociation(groupID: number, drawerID: number, model: models.GroupDrawerModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a drawer group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteDrawerGroupAssociationWithHttpOperationResponse(groupID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a drawer group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDrawerGroupAssociation(groupID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteDrawerGroupAssociation(groupID: number, drawerID: number, callback: ServiceCallback<any>): void;
  deleteDrawerGroupAssociation(groupID: number, drawerID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts/Updates the group drawer association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateGroupDrawerAssociationWithHttpOperationResponse(groupID: number, drawerID: number, model: models.GroupDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the group drawer association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateGroupDrawerAssociation(groupID: number, drawerID: number, model: models.GroupDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateGroupDrawerAssociation(groupID: number, drawerID: number, model: models.GroupDrawerModel, callback: ServiceCallback<any>): void;
  createOrUpdateGroupDrawerAssociation(groupID: number, drawerID: number, model: models.GroupDrawerModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a group drawer association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteGroupDrawerAssociationWithHttpOperationResponse(groupID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a group drawer association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteGroupDrawerAssociation(groupID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteGroupDrawerAssociation(groupID: number, drawerID: number, callback: ServiceCallback<any>): void;
  deleteGroupDrawerAssociation(groupID: number, drawerID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of user group associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUserGroupAssociationsWithHttpOperationResponse(userID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupUserModel[]>>;

  /**
   * @summary Gets a list of user group associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUserGroupAssociations(userID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupUserModel[]>;
  getUserGroupAssociations(userID: number, callback: ServiceCallback<models.GroupUserModel[]>): void;
  getUserGroupAssociations(userID: number, options: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupUserModel[]>): void;


  /**
   * @summary Gets a list of group user associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGroupUserAssociationsWithHttpOperationResponse(groupID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupUserModel[]>>;

  /**
   * @summary Gets a list of group user associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGroupUserAssociations(groupID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupUserModel[]>;
  getGroupUserAssociations(groupID: number, callback: ServiceCallback<models.GroupUserModel[]>): void;
  getGroupUserAssociations(groupID: number, options: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupUserModel[]>): void;


  /**
   * @summary Inserts the user group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createUserGroupAssociationWithHttpOperationResponse(groupID: number, userID: number, model: models.GroupUserModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts the user group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createUserGroupAssociation(groupID: number, userID: number, model: models.GroupUserModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createUserGroupAssociation(groupID: number, userID: number, model: models.GroupUserModel, callback: ServiceCallback<any>): void;
  createUserGroupAssociation(groupID: number, userID: number, model: models.GroupUserModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a user group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteUserGroupAssociationWithHttpOperationResponse(groupID: number, userID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a user group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUserGroupAssociation(groupID: number, userID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteUserGroupAssociation(groupID: number, userID: number, callback: ServiceCallback<any>): void;
  deleteUserGroupAssociation(groupID: number, userID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts the group user association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createGroupUserAssociationWithHttpOperationResponse(groupID: number, userID: number, model: models.GroupUserModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts the group user association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createGroupUserAssociation(groupID: number, userID: number, model: models.GroupUserModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createGroupUserAssociation(groupID: number, userID: number, model: models.GroupUserModel, callback: ServiceCallback<any>): void;
  createGroupUserAssociation(groupID: number, userID: number, model: models.GroupUserModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a group user association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteGroupUserAssociationWithHttpOperationResponse(groupID: number, userID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a group user association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteGroupUserAssociation(groupID: number, userID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteGroupUserAssociation(groupID: number, userID: number, callback: ServiceCallback<any>): void;
  deleteGroupUserAssociation(groupID: number, userID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of queue group associations.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getQueueGroupAssociationsWithHttpOperationResponse(queueID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupQueueModel[]>>;

  /**
   * @summary Gets a list of queue group associations.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getQueueGroupAssociations(queueID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupQueueModel[]>;
  getQueueGroupAssociations(queueID: number, callback: ServiceCallback<models.GroupQueueModel[]>): void;
  getQueueGroupAssociations(queueID: number, options: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupQueueModel[]>): void;


  /**
   * @summary Gets a list of group queue associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.queueID] The queue identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGroupQueueAssociationsWithHttpOperationResponse(groupID: number, options?: { queueID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupQueueModel[]>>;

  /**
   * @summary Gets a list of group queue associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.queueID] The queue identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGroupQueueAssociations(groupID: number, options?: { queueID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupQueueModel[]>;
  getGroupQueueAssociations(groupID: number, callback: ServiceCallback<models.GroupQueueModel[]>): void;
  getGroupQueueAssociations(groupID: number, options: { queueID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupQueueModel[]>): void;


  /**
   * @summary Inserts/Updates the queue group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateQueueGroupAssociationWithHttpOperationResponse(groupID: number, queueID: number, model: models.GroupQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the queue group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateQueueGroupAssociation(groupID: number, queueID: number, model: models.GroupQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateQueueGroupAssociation(groupID: number, queueID: number, model: models.GroupQueueModel, callback: ServiceCallback<any>): void;
  createOrUpdateQueueGroupAssociation(groupID: number, queueID: number, model: models.GroupQueueModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a queue group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteQueueGroupAssociationWithHttpOperationResponse(groupID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a queue group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteQueueGroupAssociation(groupID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteQueueGroupAssociation(groupID: number, queueID: number, callback: ServiceCallback<any>): void;
  deleteQueueGroupAssociation(groupID: number, queueID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts/Updates the group queue association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateGroupQueueAssociationWithHttpOperationResponse(groupID: number, queueID: number, model: models.GroupQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the group queue association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateGroupQueueAssociation(groupID: number, queueID: number, model: models.GroupQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateGroupQueueAssociation(groupID: number, queueID: number, model: models.GroupQueueModel, callback: ServiceCallback<any>): void;
  createOrUpdateGroupQueueAssociation(groupID: number, queueID: number, model: models.GroupQueueModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a group queue association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteGroupQueueAssociationWithHttpOperationResponse(groupID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a group queue association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteGroupQueueAssociation(groupID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteGroupQueueAssociation(groupID: number, queueID: number, callback: ServiceCallback<any>): void;
  deleteGroupQueueAssociation(groupID: number, queueID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of application group associations.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getApplicationGroupAssociationsWithHttpOperationResponse(applicationID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupApplicationModel[]>>;

  /**
   * @summary Gets a list of application group associations.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.groupID] The group identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationGroupAssociations(applicationID: number, options?: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupApplicationModel[]>;
  getApplicationGroupAssociations(applicationID: number, callback: ServiceCallback<models.GroupApplicationModel[]>): void;
  getApplicationGroupAssociations(applicationID: number, options: { groupID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupApplicationModel[]>): void;


  /**
   * @summary Gets a list of group application associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.applicationID] The application identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGroupApplicationAssociationsWithHttpOperationResponse(groupID: number, options?: { applicationID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupApplicationModel[]>>;

  /**
   * @summary Gets a list of group application associations.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.applicationID] The application identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGroupApplicationAssociations(groupID: number, options?: { applicationID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupApplicationModel[]>;
  getGroupApplicationAssociations(groupID: number, callback: ServiceCallback<models.GroupApplicationModel[]>): void;
  getGroupApplicationAssociations(groupID: number, options: { applicationID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupApplicationModel[]>): void;


  /**
   * @summary Inserts/Updates the application group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateApplicationGroupAssociationWithHttpOperationResponse(groupID: number, applicationID: number, model: models.GroupApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the application group association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateApplicationGroupAssociation(groupID: number, applicationID: number, model: models.GroupApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateApplicationGroupAssociation(groupID: number, applicationID: number, model: models.GroupApplicationModel, callback: ServiceCallback<any>): void;
  createOrUpdateApplicationGroupAssociation(groupID: number, applicationID: number, model: models.GroupApplicationModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a application group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteApplicationGroupAssociationWithHttpOperationResponse(groupID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a application group association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteApplicationGroupAssociation(groupID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteApplicationGroupAssociation(groupID: number, applicationID: number, callback: ServiceCallback<any>): void;
  deleteApplicationGroupAssociation(groupID: number, applicationID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts/Updates the group application association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateGroupApplicationAssociationWithHttpOperationResponse(groupID: number, applicationID: number, model: models.GroupApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the group application association.
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.groupName] Gets or sets the name of the group.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateGroupApplicationAssociation(groupID: number, applicationID: number, model: models.GroupApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateGroupApplicationAssociation(groupID: number, applicationID: number, model: models.GroupApplicationModel, callback: ServiceCallback<any>): void;
  createOrUpdateGroupApplicationAssociation(groupID: number, applicationID: number, model: models.GroupApplicationModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a group application association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteGroupApplicationAssociationWithHttpOperationResponse(groupID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a group application association;
   *
   * @param {number} groupID The group identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteGroupApplicationAssociation(groupID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteGroupApplicationAssociation(groupID: number, applicationID: number, callback: ServiceCallback<any>): void;
  deleteGroupApplicationAssociation(groupID: number, applicationID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of drawer user associations.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDrawerUserAssociationsWithHttpOperationResponse(drawerID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserDrawerModel[]>>;

  /**
   * @summary Gets a list of drawer user associations.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDrawerUserAssociations(drawerID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserDrawerModel[]>;
  getDrawerUserAssociations(drawerID: number, callback: ServiceCallback<models.UserDrawerModel[]>): void;
  getDrawerUserAssociations(drawerID: number, options: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserDrawerModel[]>): void;


  /**
   * @summary Gets a list of user drawer associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.drawerID] The drawer identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUserDrawerAssociationsWithHttpOperationResponse(userID: number, options?: { drawerID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserDrawerModel[]>>;

  /**
   * @summary Gets a list of user drawer associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.drawerID] The drawer identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUserDrawerAssociations(userID: number, options?: { drawerID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserDrawerModel[]>;
  getUserDrawerAssociations(userID: number, callback: ServiceCallback<models.UserDrawerModel[]>): void;
  getUserDrawerAssociations(userID: number, options: { drawerID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserDrawerModel[]>): void;


  /**
   * @summary Inserts/Updates the drawer user association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateDrawerUserAssociationWithHttpOperationResponse(userID: number, drawerID: number, model: models.UserDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the drawer user association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateDrawerUserAssociation(userID: number, drawerID: number, model: models.UserDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateDrawerUserAssociation(userID: number, drawerID: number, model: models.UserDrawerModel, callback: ServiceCallback<any>): void;
  createOrUpdateDrawerUserAssociation(userID: number, drawerID: number, model: models.UserDrawerModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a drawer user association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteDrawerUserAssociationWithHttpOperationResponse(userID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a drawer user association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDrawerUserAssociation(userID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteDrawerUserAssociation(userID: number, drawerID: number, callback: ServiceCallback<any>): void;
  deleteDrawerUserAssociation(userID: number, drawerID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts/Updates the user drawer association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateUserDrawerAssociationWithHttpOperationResponse(userID: number, drawerID: number, model: models.UserDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the user drawer association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [model.drawerName] Gets or sets the name of the drawer.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateUserDrawerAssociation(userID: number, drawerID: number, model: models.UserDrawerModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateUserDrawerAssociation(userID: number, drawerID: number, model: models.UserDrawerModel, callback: ServiceCallback<any>): void;
  createOrUpdateUserDrawerAssociation(userID: number, drawerID: number, model: models.UserDrawerModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a user drawer association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteUserDrawerAssociationWithHttpOperationResponse(userID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a user drawer association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} drawerID The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUserDrawerAssociation(userID: number, drawerID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteUserDrawerAssociation(userID: number, drawerID: number, callback: ServiceCallback<any>): void;
  deleteUserDrawerAssociation(userID: number, drawerID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of queue user associations.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getQueueUserAssociationsWithHttpOperationResponse(queueID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserQueueModel[]>>;

  /**
   * @summary Gets a list of queue user associations.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getQueueUserAssociations(queueID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserQueueModel[]>;
  getQueueUserAssociations(queueID: number, callback: ServiceCallback<models.UserQueueModel[]>): void;
  getQueueUserAssociations(queueID: number, options: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserQueueModel[]>): void;


  /**
   * @summary Gets a list of user queue associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.queueID] The queue identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUserQueueAssociationsWithHttpOperationResponse(userID: number, options?: { queueID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserQueueModel[]>>;

  /**
   * @summary Gets a list of user queue associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.queueID] The queue identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUserQueueAssociations(userID: number, options?: { queueID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserQueueModel[]>;
  getUserQueueAssociations(userID: number, callback: ServiceCallback<models.UserQueueModel[]>): void;
  getUserQueueAssociations(userID: number, options: { queueID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserQueueModel[]>): void;


  /**
   * @summary Inserts/Updates the queue user association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateQueueUserAssociationWithHttpOperationResponse(userID: number, queueID: number, model: models.UserQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the queue user association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateQueueUserAssociation(userID: number, queueID: number, model: models.UserQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateQueueUserAssociation(userID: number, queueID: number, model: models.UserQueueModel, callback: ServiceCallback<any>): void;
  createOrUpdateQueueUserAssociation(userID: number, queueID: number, model: models.UserQueueModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a queue user association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteQueueUserAssociationWithHttpOperationResponse(userID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a queue user association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteQueueUserAssociation(userID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteQueueUserAssociation(userID: number, queueID: number, callback: ServiceCallback<any>): void;
  deleteQueueUserAssociation(userID: number, queueID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts/Updates the user queue association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateUserQueueAssociationWithHttpOperationResponse(userID: number, queueID: number, model: models.UserQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the user queue association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {string} [model.queueName] Gets or sets the name of the queue.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateUserQueueAssociation(userID: number, queueID: number, model: models.UserQueueModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateUserQueueAssociation(userID: number, queueID: number, model: models.UserQueueModel, callback: ServiceCallback<any>): void;
  createOrUpdateUserQueueAssociation(userID: number, queueID: number, model: models.UserQueueModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a user queue association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteUserQueueAssociationWithHttpOperationResponse(userID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a user queue association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} queueID The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUserQueueAssociation(userID: number, queueID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteUserQueueAssociation(userID: number, queueID: number, callback: ServiceCallback<any>): void;
  deleteUserQueueAssociation(userID: number, queueID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of application user associations.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getApplicationUserAssociationsWithHttpOperationResponse(applicationID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserApplicationModel[]>>;

  /**
   * @summary Gets a list of application user associations.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.userID] The user identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationUserAssociations(applicationID: number, options?: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserApplicationModel[]>;
  getApplicationUserAssociations(applicationID: number, callback: ServiceCallback<models.UserApplicationModel[]>): void;
  getApplicationUserAssociations(applicationID: number, options: { userID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserApplicationModel[]>): void;


  /**
   * @summary Gets a list of user application associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.applicationID] The application identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUserApplicationAssociationsWithHttpOperationResponse(userID: number, options?: { applicationID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserApplicationModel[]>>;

  /**
   * @summary Gets a list of user application associations.
   *
   * @param {number} userID The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.applicationID] The application identifier.
   *
   * @param {number} [options.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
   * 'GroupID', 'UserID', 'QueueID', 'Acl'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUserApplicationAssociations(userID: number, options?: { applicationID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserApplicationModel[]>;
  getUserApplicationAssociations(userID: number, callback: ServiceCallback<models.UserApplicationModel[]>): void;
  getUserApplicationAssociations(userID: number, options: { applicationID? : number, acl? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserApplicationModel[]>): void;


  /**
   * @summary Inserts/Updates the application user association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateApplicationUserAssociationWithHttpOperationResponse(userID: number, applicationID: number, model: models.UserApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the application user association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateApplicationUserAssociation(userID: number, applicationID: number, model: models.UserApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateApplicationUserAssociation(userID: number, applicationID: number, model: models.UserApplicationModel, callback: ServiceCallback<any>): void;
  createOrUpdateApplicationUserAssociation(userID: number, applicationID: number, model: models.UserApplicationModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes an application user association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteApplicationUserAssociationWithHttpOperationResponse(userID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes an application user association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteApplicationUserAssociation(userID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteApplicationUserAssociation(userID: number, applicationID: number, callback: ServiceCallback<any>): void;
  deleteApplicationUserAssociation(userID: number, applicationID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts/Updates the user application association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateUserApplicationAssociationWithHttpOperationResponse(userID: number, applicationID: number, model: models.UserApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts/Updates the user application association.
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.userFullName] Gets or sets the full name of the user.
   *
   * @param {number} [model.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateUserApplicationAssociation(userID: number, applicationID: number, model: models.UserApplicationModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateUserApplicationAssociation(userID: number, applicationID: number, model: models.UserApplicationModel, callback: ServiceCallback<any>): void;
  createOrUpdateUserApplicationAssociation(userID: number, applicationID: number, model: models.UserApplicationModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a user application association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteUserApplicationAssociationWithHttpOperationResponse(userID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a user application association;
   *
   * @param {number} userID The user identifier.
   *
   * @param {number} applicationID The application identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUserApplicationAssociation(userID: number, applicationID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteUserApplicationAssociation(userID: number, applicationID: number, callback: ServiceCallback<any>): void;
  deleteUserApplicationAssociation(userID: number, applicationID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a paged list of attachment metadata.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Standard', 'EntityLink', 'WebLink'
   *
   * @param {string} [options.extension] Gets or sets the extension.
   *
   * @param {number} [options.minSize] Gets or sets the minimum size.
   *
   * @param {number} [options.maxSize] Gets or sets the maximum size.
   *
   * @param {number} [options.acl] Gets or sets the access control list.
   *
   * @param {number} [options.entityID] Gets or sets the entity identifier.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {date} [options.minInsertionTime] Gets or sets the minimum insertion
   * time.
   *
   * @param {date} [options.maxInsertionTime] Gets or sets the maximum insertion
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAttachmentsByFilterWithHttpOperationResponse(options?: { type? : string, extension? : string, minSize? : number, maxSize? : number, acl? : number, entityID? : number, drawerID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minInsertionTime? : Date, maxInsertionTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AttachmentModel[]>>;

  /**
   * @summary Gets a paged list of attachment metadata.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Standard', 'EntityLink', 'WebLink'
   *
   * @param {string} [options.extension] Gets or sets the extension.
   *
   * @param {number} [options.minSize] Gets or sets the minimum size.
   *
   * @param {number} [options.maxSize] Gets or sets the maximum size.
   *
   * @param {number} [options.acl] Gets or sets the access control list.
   *
   * @param {number} [options.entityID] Gets or sets the entity identifier.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {date} [options.minInsertionTime] Gets or sets the minimum insertion
   * time.
   *
   * @param {date} [options.maxInsertionTime] Gets or sets the maximum insertion
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentsByFilter(options?: { type? : string, extension? : string, minSize? : number, maxSize? : number, acl? : number, entityID? : number, drawerID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minInsertionTime? : Date, maxInsertionTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AttachmentModel[]>;
  getAttachmentsByFilter(callback: ServiceCallback<models.AttachmentModel[]>): void;
  getAttachmentsByFilter(options: { type? : string, extension? : string, minSize? : number, maxSize? : number, acl? : number, entityID? : number, drawerID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minInsertionTime? : Date, maxInsertionTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AttachmentModel[]>): void;


  /**
   * @summary Gets a single attachment metadata based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AttachmentModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAttachmentByIdWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AttachmentModel>>;

  /**
   * @summary Gets a single attachment metadata based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {AttachmentModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {AttachmentModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AttachmentModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentById(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AttachmentModel>;
  getAttachmentById(drawer: number, id: number, callback: ServiceCallback<models.AttachmentModel>): void;
  getAttachmentById(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AttachmentModel>): void;


  /**
   * @summary Updates a specified attachment's metadata..
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.category] Gets or sets the category.
   *
   * @param {number} [model.classProperty] Gets or sets the class.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.pageNumber] Gets or sets the page number.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic',
   * 'Static', 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateAttachmentWithHttpOperationResponse(drawer: number, id: number, model: models.UpdateAttachmentRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified attachment's metadata..
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.category] Gets or sets the category.
   *
   * @param {number} [model.classProperty] Gets or sets the class.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.pageNumber] Gets or sets the page number.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic',
   * 'Static', 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateAttachment(drawer: number, id: number, model: models.UpdateAttachmentRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateAttachment(drawer: number, id: number, model: models.UpdateAttachmentRequestModel, callback: ServiceCallback<any>): void;
  updateAttachment(drawer: number, id: number, model: models.UpdateAttachmentRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes an attachment
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteAttachmentWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes an attachment
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAttachment(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteAttachment(drawer: number, id: number, callback: ServiceCallback<any>): void;
  deleteAttachment(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets an attachment's file content.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAttachmentFileContentWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets an attachment's file content.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentFileContent(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getAttachmentFileContent(drawer: number, id: number, callback: ServiceCallback<any>): void;
  getAttachmentFileContent(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Inserts a new file attachment.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AttachmentModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createAttachmentWithHttpOperationResponse(drawer: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AttachmentModel>>;

  /**
   * @summary Inserts a new file attachment.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {AttachmentModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {AttachmentModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AttachmentModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createAttachment(drawer: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AttachmentModel>;
  createAttachment(drawer: number, callback: ServiceCallback<models.AttachmentModel>): void;
  createAttachment(drawer: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AttachmentModel>): void;


  /**
   * @summary Archives an attachment
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  archiveAttachmentWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Archives an attachment
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  archiveAttachment(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  archiveAttachment(drawer: number, id: number, callback: ServiceCallback<any>): void;
  archiveAttachment(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets the paged list of attachment versions.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.version] Gets or sets the indexed version value.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator identifier.
   *
   * @param {number} [options.accessorUserID] Gets or sets the identifier of the
   * user who accessed the attachment version.
   *
   * @param {date} [options.minAccessTime] Gets or sets the min time the version
   * was last accessed.
   *
   * @param {date} [options.maxAccessTime] Gets or sets the max time the version
   * was last accessed.
   *
   * @param {date} [options.minCreationTime] Gets or sets the min creation time
   * of the attachment version.
   *
   * @param {date} [options.maxCreationTime] Gets or sets the max creation time
   * of the attachment version.
   *
   * @param {date} [options.minModificationTime] Gets or sets the min
   * modification time of the attachment version.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the max
   * modification time of the attachment version.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID',
   * 'AccessTime', 'CreationTime', 'ModificationTime'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAttachmentVersionsByFilterWithHttpOperationResponse(drawer: number, id: number, options?: { version? : number, creatorUserID? : number, accessorUserID? : number, minAccessTime? : Date, maxAccessTime? : Date, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AttachmentVersionModel[]>>;

  /**
   * @summary Gets the paged list of attachment versions.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.version] Gets or sets the indexed version value.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator identifier.
   *
   * @param {number} [options.accessorUserID] Gets or sets the identifier of the
   * user who accessed the attachment version.
   *
   * @param {date} [options.minAccessTime] Gets or sets the min time the version
   * was last accessed.
   *
   * @param {date} [options.maxAccessTime] Gets or sets the max time the version
   * was last accessed.
   *
   * @param {date} [options.minCreationTime] Gets or sets the min creation time
   * of the attachment version.
   *
   * @param {date} [options.maxCreationTime] Gets or sets the max creation time
   * of the attachment version.
   *
   * @param {date} [options.minModificationTime] Gets or sets the min
   * modification time of the attachment version.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the max
   * modification time of the attachment version.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID',
   * 'AccessTime', 'CreationTime', 'ModificationTime'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentVersionsByFilter(drawer: number, id: number, options?: { version? : number, creatorUserID? : number, accessorUserID? : number, minAccessTime? : Date, maxAccessTime? : Date, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AttachmentVersionModel[]>;
  getAttachmentVersionsByFilter(drawer: number, id: number, callback: ServiceCallback<models.AttachmentVersionModel[]>): void;
  getAttachmentVersionsByFilter(drawer: number, id: number, options: { version? : number, creatorUserID? : number, accessorUserID? : number, minAccessTime? : Date, maxAccessTime? : Date, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AttachmentVersionModel[]>): void;


  /**
   * @summary Gets a file for a specified attachment version.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {number} versionID The version identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAttachmentVersionFileContentWithHttpOperationResponse(drawer: number, id: number, versionID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a file for a specified attachment version.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {number} versionID The version identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentVersionFileContent(drawer: number, id: number, versionID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getAttachmentVersionFileContent(drawer: number, id: number, versionID: number, callback: ServiceCallback<any>): void;
  getAttachmentVersionFileContent(drawer: number, id: number, versionID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Checks out the attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  checkOutAttachmentWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Checks out the attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  checkOutAttachment(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  checkOutAttachment(drawer: number, id: number, callback: ServiceCallback<any>): void;
  checkOutAttachment(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Undoes the attachment check out of the attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  undoCheckOutAttachmentWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Undoes the attachment check out of the attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  undoCheckOutAttachment(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  undoCheckOutAttachment(drawer: number, id: number, callback: ServiceCallback<any>): void;
  undoCheckOutAttachment(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Checks in the new version of attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  checkInAttachmentWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Checks in the new version of attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  checkInAttachment(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  checkInAttachment(drawer: number, id: number, callback: ServiceCallback<any>): void;
  checkInAttachment(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Rolls back to a specified version the attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {number} versionID The version identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  rollbackAttachmentVersionWithHttpOperationResponse(drawer: number, id: number, versionID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Rolls back to a specified version the attachment file.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The attachment identifier.
   *
   * @param {number} versionID The version identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  rollbackAttachmentVersion(drawer: number, id: number, versionID: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  rollbackAttachmentVersion(drawer: number, id: number, versionID: number, callback: ServiceCallback<any>): void;
  rollbackAttachmentVersion(drawer: number, id: number, versionID: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of all available drawers.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllDrawersWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DrawerModel[]>>;

  /**
   * @summary Gets a list of all available drawers.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllDrawers(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DrawerModel[]>;
  getAllDrawers(callback: ServiceCallback<models.DrawerModel[]>): void;
  getAllDrawers(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DrawerModel[]>): void;


  /**
   * @summary Gets a single drawer by its unique identifier.
   *
   * @param {number} id The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DrawerModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDrawerByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DrawerModel>>;

  /**
   * @summary Gets a single drawer by its unique identifier.
   *
   * @param {number} id The drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DrawerModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DrawerModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DrawerModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDrawerById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DrawerModel>;
  getDrawerById(id: number, callback: ServiceCallback<models.DrawerModel>): void;
  getDrawerById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DrawerModel>): void;


  /**
   * @summary Updates a specified drawer.
   *
   * @param {number} id The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {number} [model.edition] Gets or sets the edition.
   *
   * @param {number} [model.state] Gets or sets the state.
   *
   * @param {number} [model.entityFeature] Gets or sets the entity feature.
   *
   * @param {number} [model.attachmentFeature] Gets or sets the attachment
   * feature.
   *
   * @param {number} [model.noteFeature] Gets or sets the note feature.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved integer 1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved integer 2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateDrawerWithHttpOperationResponse(id: number, model: models.DrawerBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified drawer.
   *
   * @param {number} id The drawer identifier.
   *
   * @param {object} model The model.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {number} [model.edition] Gets or sets the edition.
   *
   * @param {number} [model.state] Gets or sets the state.
   *
   * @param {number} [model.entityFeature] Gets or sets the entity feature.
   *
   * @param {number} [model.attachmentFeature] Gets or sets the attachment
   * feature.
   *
   * @param {number} [model.noteFeature] Gets or sets the note feature.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved integer 1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved integer 2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateDrawer(id: number, model: models.DrawerBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateDrawer(id: number, model: models.DrawerBase, callback: ServiceCallback<any>): void;
  updateDrawer(id: number, model: models.DrawerBase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a single drawer by its name.
   *
   * @param {string} name The drawer name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DrawerModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDrawerByNameWithHttpOperationResponse(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DrawerModel>>;

  /**
   * @summary Gets a single drawer by its name.
   *
   * @param {string} name The drawer name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DrawerModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DrawerModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DrawerModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDrawerByName(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DrawerModel>;
  getDrawerByName(name: string, callback: ServiceCallback<models.DrawerModel>): void;
  getDrawerByName(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DrawerModel>): void;


  /**
   * @summary Gets a paged list of entity summaries.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.acl] Gets or sets the access control list.
   *
   * @param {number} [options.type] Gets or sets the type of the entity.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived',
   * 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
   *
   * @param {number} [options.referenceCount] Gets or sets the reference count.
   *
   * @param {number} [options.attachCount] Gets or sets the attach count.
   *
   * @param {number} [options.noteCount] Gets or sets the note count.
   *
   * @param {number} [options.ownerUserID] Gets or sets the owner user
   * identifier.
   *
   * @param {number} [options.ownerGroupID] Gets or sets the owner group
   * identifier.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.creatorGroupID] Gets or sets the creator group
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {number} [options.modifierGroupID] Gets or sets the modifier group
   * identifier.
   *
   * @param {date} [options.minCreationTime] Gets or sets the minimum creation
   * time.
   *
   * @param {date} [options.maxCreationTime] Gets or sets the maximum creation
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {array} [options.metadata] Gets or sets the metadata.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime',
   * 'State', 'Name'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEntitiesByFilterWithHttpOperationResponse(drawerID: number, options?: { acl? : number, type? : number, name? : string, state? : string, referenceCount? : number, attachCount? : number, noteCount? : number, ownerUserID? : number, ownerGroupID? : number, creatorUserID? : number, creatorGroupID? : number, modifierUserID? : number, modifierGroupID? : number, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, metadata? : any[], page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetEntityBaseResponse[]>>;

  /**
   * @summary Gets a paged list of entity summaries.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.acl] Gets or sets the access control list.
   *
   * @param {number} [options.type] Gets or sets the type of the entity.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived',
   * 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
   *
   * @param {number} [options.referenceCount] Gets or sets the reference count.
   *
   * @param {number} [options.attachCount] Gets or sets the attach count.
   *
   * @param {number} [options.noteCount] Gets or sets the note count.
   *
   * @param {number} [options.ownerUserID] Gets or sets the owner user
   * identifier.
   *
   * @param {number} [options.ownerGroupID] Gets or sets the owner group
   * identifier.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.creatorGroupID] Gets or sets the creator group
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {number} [options.modifierGroupID] Gets or sets the modifier group
   * identifier.
   *
   * @param {date} [options.minCreationTime] Gets or sets the minimum creation
   * time.
   *
   * @param {date} [options.maxCreationTime] Gets or sets the maximum creation
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {array} [options.metadata] Gets or sets the metadata.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime',
   * 'State', 'Name'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEntitiesByFilter(drawerID: number, options?: { acl? : number, type? : number, name? : string, state? : string, referenceCount? : number, attachCount? : number, noteCount? : number, ownerUserID? : number, ownerGroupID? : number, creatorUserID? : number, creatorGroupID? : number, modifierUserID? : number, modifierGroupID? : number, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, metadata? : any[], page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetEntityBaseResponse[]>;
  getEntitiesByFilter(drawerID: number, callback: ServiceCallback<models.GetEntityBaseResponse[]>): void;
  getEntitiesByFilter(drawerID: number, options: { acl? : number, type? : number, name? : string, state? : string, referenceCount? : number, attachCount? : number, noteCount? : number, ownerUserID? : number, ownerGroupID? : number, creatorUserID? : number, creatorGroupID? : number, modifierUserID? : number, modifierGroupID? : number, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, metadata? : any[], page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetEntityBaseResponse[]>): void;


  /**
   * @summary Gets a single entity complete with all profile metadata.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEntityByIdWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityModel>>;

  /**
   * @summary Gets a single entity complete with all profile metadata.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEntityById(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityModel>;
  getEntityById(drawer: number, id: number, callback: ServiceCallback<models.EntityModel>): void;
  getEntityById(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityModel>): void;


  /**
   * @summary Updates a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} model The entity model.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived',
   * 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateEntityWithHttpOperationResponse(drawer: number, id: number, model: models.UpdateEntityRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} model The entity model.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived',
   * 'Deleted', 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateEntity(drawer: number, id: number, model: models.UpdateEntityRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateEntity(drawer: number, id: number, model: models.UpdateEntityRequestModel, callback: ServiceCallback<any>): void;
  updateEntity(drawer: number, id: number, model: models.UpdateEntityRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteEntityWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteEntity(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteEntity(drawer: number, id: number, callback: ServiceCallback<any>): void;
  deleteEntity(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The entity model.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {number} [model.acl] Gets or sets the access control list.
   *
   * @param {number} [model.type] Gets or sets the type.
   *
   * @param {string} model.name Gets or sets the Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createEntityWithHttpOperationResponse(drawer: number, model: models.InsertEntityRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityModel>>;

  /**
   * @summary Creates a new entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The entity model.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {number} [model.acl] Gets or sets the access control list.
   *
   * @param {number} [model.type] Gets or sets the type.
   *
   * @param {string} model.name Gets or sets the Name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createEntity(drawer: number, model: models.InsertEntityRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityModel>;
  createEntity(drawer: number, model: models.InsertEntityRequestModel, callback: ServiceCallback<models.EntityModel>): void;
  createEntity(drawer: number, model: models.InsertEntityRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityModel>): void;


  /**
   * @summary Copies the contents of an entity.
   *
   * @param {number} drawer The drawer.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.entityContent] Gets or sets the content of the
   * entity. Possible values include: 'None', 'All', 'Profiles', 'Attachments',
   * 'Notes', 'Links', 'Events'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  copyEntityWithHttpOperationResponse(drawer: number, id: number, model: models.EntityContentModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityModel>>;

  /**
   * @summary Copies the contents of an entity.
   *
   * @param {number} drawer The drawer.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.entityContent] Gets or sets the content of the
   * entity. Possible values include: 'None', 'All', 'Profiles', 'Attachments',
   * 'Notes', 'Links', 'Events'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  copyEntity(drawer: number, id: number, model: models.EntityContentModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityModel>;
  copyEntity(drawer: number, id: number, model: models.EntityContentModel, callback: ServiceCallback<models.EntityModel>): void;
  copyEntity(drawer: number, id: number, model: models.EntityContentModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityModel>): void;


  /**
   * @summary Gets a paged list of events.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {number} entityID Gets or sets the entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC',
   * 'SQL', 'DDE'
   *
   * @param {date} [options.minEventTime] Gets or sets the minimum event time.
   *
   * @param {date} [options.maxEventTime] Gets or sets the maximum event time.
   *
   * @param {number} [options.eventUserID] Gets or sets the event user
   * identifier.
   *
   * @param {number} [options.eventGroupID] Gets or sets the event group
   * identifier.
   *
   * @param {string} [options.category] Gets or sets the category. Possible
   * values include: 'Undefined', 'Entity', 'Profile', 'Attachment',
   * 'Discussion', 'Field', 'Workflow'
   *
   * @param {string} [options.classProperty] Gets or sets the class. Possible
   * values include: 'Undefined', 'Application', 'Security', 'System'
   *
   * @param {string} [options.operation] Gets or sets the operation. Possible
   * values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
   * 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split',
   * 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom',
   * 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign',
   * 'Reset', 'Override', 'Rollback', 'Archive'
   *
   * @param {number} [options.minProcessingTime] Gets or sets the minimum
   * processing time.
   *
   * @param {number} [options.maxProcessingTime] Gets or sets the maximum
   * processing time.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'EventTime'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEventsByFilterWithHttpOperationResponse(drawerID: number, entityID: number, options?: { type? : string, minEventTime? : Date, maxEventTime? : Date, eventUserID? : number, eventGroupID? : number, category? : string, classProperty? : string, operation? : string, minProcessingTime? : number, maxProcessingTime? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventModel[]>>;

  /**
   * @summary Gets a paged list of events.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {number} entityID Gets or sets the entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC',
   * 'SQL', 'DDE'
   *
   * @param {date} [options.minEventTime] Gets or sets the minimum event time.
   *
   * @param {date} [options.maxEventTime] Gets or sets the maximum event time.
   *
   * @param {number} [options.eventUserID] Gets or sets the event user
   * identifier.
   *
   * @param {number} [options.eventGroupID] Gets or sets the event group
   * identifier.
   *
   * @param {string} [options.category] Gets or sets the category. Possible
   * values include: 'Undefined', 'Entity', 'Profile', 'Attachment',
   * 'Discussion', 'Field', 'Workflow'
   *
   * @param {string} [options.classProperty] Gets or sets the class. Possible
   * values include: 'Undefined', 'Application', 'Security', 'System'
   *
   * @param {string} [options.operation] Gets or sets the operation. Possible
   * values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
   * 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split',
   * 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom',
   * 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign',
   * 'Reset', 'Override', 'Rollback', 'Archive'
   *
   * @param {number} [options.minProcessingTime] Gets or sets the minimum
   * processing time.
   *
   * @param {number} [options.maxProcessingTime] Gets or sets the maximum
   * processing time.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'EventTime'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEventsByFilter(drawerID: number, entityID: number, options?: { type? : string, minEventTime? : Date, maxEventTime? : Date, eventUserID? : number, eventGroupID? : number, category? : string, classProperty? : string, operation? : string, minProcessingTime? : number, maxProcessingTime? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EventModel[]>;
  getEventsByFilter(drawerID: number, entityID: number, callback: ServiceCallback<models.EventModel[]>): void;
  getEventsByFilter(drawerID: number, entityID: number, options: { type? : string, minEventTime? : Date, maxEventTime? : Date, eventUserID? : number, eventGroupID? : number, category? : string, classProperty? : string, operation? : string, minProcessingTime? : number, maxProcessingTime? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventModel[]>): void;


  /**
   * @summary Retrieves a single event based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The event identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EventModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEventByIdWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventModel>>;

  /**
   * @summary Retrieves a single event based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The event identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EventModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EventModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EventModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEventById(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventModel>;
  getEventById(drawer: number, id: number, callback: ServiceCallback<models.EventModel>): void;
  getEventById(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventModel>): void;


  /**
   * @summary Creates a new event.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The event model.
   *
   * @param {number} [model.id] Gets or sets the identifier.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL',
   * 'DDE'
   *
   * @param {date} [model.eventTime] Gets or sets the event time.
   *
   * @param {number} [model.eventUserID] Gets or sets the event user identifier.
   *
   * @param {string} [model.eventUserFullName] Gets or sets the full name of the
   * event user.
   *
   * @param {number} [model.eventGroupID] Gets or sets the event group
   * identifier.
   *
   * @param {string} [model.eventGroupName] Gets or sets the name of the event
   * group.
   *
   * @param {string} [model.category] Gets or sets the category. Possible values
   * include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion',
   * 'Field', 'Workflow'
   *
   * @param {string} [model.classProperty] Gets or sets the class. Possible
   * values include: 'Undefined', 'Application', 'Security', 'System'
   *
   * @param {string} [model.operation] Gets or sets the operation. Possible
   * values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
   * 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split',
   * 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom',
   * 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign',
   * 'Reset', 'Override', 'Rollback', 'Archive'
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the ip address.
   *
   * @param {string} [model.description] Gets or sets the description.
   *
   * @param {number} [model.processTime] Gets or sets the process time.
   *
   * @param {object} [model.details] Gets or sets the details.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EventModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createEventWithHttpOperationResponse(drawer: number, model: models.EventModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventModel>>;

  /**
   * @summary Creates a new event.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The event model.
   *
   * @param {number} [model.id] Gets or sets the identifier.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL',
   * 'DDE'
   *
   * @param {date} [model.eventTime] Gets or sets the event time.
   *
   * @param {number} [model.eventUserID] Gets or sets the event user identifier.
   *
   * @param {string} [model.eventUserFullName] Gets or sets the full name of the
   * event user.
   *
   * @param {number} [model.eventGroupID] Gets or sets the event group
   * identifier.
   *
   * @param {string} [model.eventGroupName] Gets or sets the name of the event
   * group.
   *
   * @param {string} [model.category] Gets or sets the category. Possible values
   * include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion',
   * 'Field', 'Workflow'
   *
   * @param {string} [model.classProperty] Gets or sets the class. Possible
   * values include: 'Undefined', 'Application', 'Security', 'System'
   *
   * @param {string} [model.operation] Gets or sets the operation. Possible
   * values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
   * 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split',
   * 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop', 'ReturnToBottom',
   * 'Accept', 'Suspend', 'Reject', 'Route', 'Forward', 'Reply', 'Reassign',
   * 'Reset', 'Override', 'Rollback', 'Archive'
   *
   * @param {string} [model.source] Gets or sets the source.
   *
   * @param {string} [model.computer] Gets or sets the computer.
   *
   * @param {string} [model.iPAddress] Gets or sets the ip address.
   *
   * @param {string} [model.description] Gets or sets the description.
   *
   * @param {number} [model.processTime] Gets or sets the process time.
   *
   * @param {object} [model.details] Gets or sets the details.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EventModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EventModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EventModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createEvent(drawer: number, model: models.EventModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventModel>;
  createEvent(drawer: number, model: models.EventModel, callback: ServiceCallback<models.EventModel>): void;
  createEvent(drawer: number, model: models.EventModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventModel>): void;


  /**
   * @summary Gets a paged list of extension rows
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {number} entityID Gets or sets the entity identifier.
   *
   * @param {number} profileID Gets or sets the profile identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the extension identifier.
   *
   * @param {number} [options.type] Gets or sets the type of the extension.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer',
   * 'Double', 'Date'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getExtensionsByFilterWithHttpOperationResponse(drawerID: number, entityID: number, profileID: number, options?: { iD? : number, type? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExtensionModel[]>>;

  /**
   * @summary Gets a paged list of extension rows
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {number} entityID Gets or sets the entity identifier.
   *
   * @param {number} profileID Gets or sets the profile identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the extension identifier.
   *
   * @param {number} [options.type] Gets or sets the type of the extension.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer',
   * 'Double', 'Date'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getExtensionsByFilter(drawerID: number, entityID: number, profileID: number, options?: { iD? : number, type? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ExtensionModel[]>;
  getExtensionsByFilter(drawerID: number, entityID: number, profileID: number, callback: ServiceCallback<models.ExtensionModel[]>): void;
  getExtensionsByFilter(drawerID: number, entityID: number, profileID: number, options: { iD? : number, type? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExtensionModel[]>): void;


  /**
   * @summary Gets a paged list of flows.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {number} entityID Gets or sets the entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process',
   * 'Rpc', 'Sql', 'Dde'
   *
   * @param {number} [options.queueID] Gets or sets the queue identifier.
   *
   * @param {date} [options.minWorkflowTime] Gets or sets the minimum workflow
   * time.
   *
   * @param {date} [options.maxWorkflowTime] Gets or sets the maximum workflow
   * time.
   *
   * @param {date} [options.minInsertionTime] Gets or sets the minimum insertion
   * time.
   *
   * @param {date} [options.maxInsertionTime] Gets or sets the maximum insertion
   * time.
   *
   * @param {number} [options.workflowUserID] Gets or sets the workflow user
   * identifier.
   *
   * @param {number} [options.workflowGroupID] Gets or sets the workflow group
   * identifier.
   *
   * @param {string} [options.operation] Gets or sets the operation. Possible
   * values include: 'None', 'Update', 'Reset', 'Override', 'Null'
   *
   * @param {string} [options.category] Gets or sets the category. Possible
   * values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset',
   * 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
   *
   * @param {string} [options.status] Gets or sets the status. Possible values
   * include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR',
   * 'Override', 'OverrideR', 'WaitingR'
   *
   * @param {number} [options.minIndex1] Gets or sets the minimum index 1.
   *
   * @param {number} [options.maxIndex1] Gets or sets the maximum index 1.
   *
   * @param {number} [options.minIndex2] Gets or sets the minimum index 2.
   *
   * @param {number} [options.maxIndex2] Gets or sets the maximum index 2.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime',
   * 'InsertionTime', 'Index'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFlowsByFilterWithHttpOperationResponse(drawerID: number, entityID: number, options?: { type? : string, queueID? : number, minWorkflowTime? : Date, maxWorkflowTime? : Date, minInsertionTime? : Date, maxInsertionTime? : Date, workflowUserID? : number, workflowGroupID? : number, operation? : string, category? : string, status? : string, state? : string, minIndex1? : number, maxIndex1? : number, minIndex2? : number, maxIndex2? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FlowModel[]>>;

  /**
   * @summary Gets a paged list of flows.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {number} entityID Gets or sets the entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process',
   * 'Rpc', 'Sql', 'Dde'
   *
   * @param {number} [options.queueID] Gets or sets the queue identifier.
   *
   * @param {date} [options.minWorkflowTime] Gets or sets the minimum workflow
   * time.
   *
   * @param {date} [options.maxWorkflowTime] Gets or sets the maximum workflow
   * time.
   *
   * @param {date} [options.minInsertionTime] Gets or sets the minimum insertion
   * time.
   *
   * @param {date} [options.maxInsertionTime] Gets or sets the maximum insertion
   * time.
   *
   * @param {number} [options.workflowUserID] Gets or sets the workflow user
   * identifier.
   *
   * @param {number} [options.workflowGroupID] Gets or sets the workflow group
   * identifier.
   *
   * @param {string} [options.operation] Gets or sets the operation. Possible
   * values include: 'None', 'Update', 'Reset', 'Override', 'Null'
   *
   * @param {string} [options.category] Gets or sets the category. Possible
   * values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset',
   * 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
   *
   * @param {string} [options.status] Gets or sets the status. Possible values
   * include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR',
   * 'Override', 'OverrideR', 'WaitingR'
   *
   * @param {number} [options.minIndex1] Gets or sets the minimum index 1.
   *
   * @param {number} [options.maxIndex1] Gets or sets the maximum index 1.
   *
   * @param {number} [options.minIndex2] Gets or sets the minimum index 2.
   *
   * @param {number} [options.maxIndex2] Gets or sets the maximum index 2.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime',
   * 'InsertionTime', 'Index'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFlowsByFilter(drawerID: number, entityID: number, options?: { type? : string, queueID? : number, minWorkflowTime? : Date, maxWorkflowTime? : Date, minInsertionTime? : Date, maxInsertionTime? : Date, workflowUserID? : number, workflowGroupID? : number, operation? : string, category? : string, status? : string, state? : string, minIndex1? : number, maxIndex1? : number, minIndex2? : number, maxIndex2? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.FlowModel[]>;
  getFlowsByFilter(drawerID: number, entityID: number, callback: ServiceCallback<models.FlowModel[]>): void;
  getFlowsByFilter(drawerID: number, entityID: number, options: { type? : string, queueID? : number, minWorkflowTime? : Date, maxWorkflowTime? : Date, minInsertionTime? : Date, maxInsertionTime? : Date, workflowUserID? : number, workflowGroupID? : number, operation? : string, category? : string, status? : string, state? : string, minIndex1? : number, maxIndex1? : number, minIndex2? : number, maxIndex2? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowModel[]>): void;


  /**
   * @summary Gets a single flow based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The flow identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FlowModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFlowByIdWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FlowModel>>;

  /**
   * @summary Gets a single flow based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The flow identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {FlowModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {FlowModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FlowModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFlowById(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FlowModel>;
  getFlowById(drawer: number, id: number, callback: ServiceCallback<models.FlowModel>): void;
  getFlowById(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FlowModel>): void;


  /**
   * @summary Gets a paged list of entity template definitions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.category] Gets or sets the category.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {number} [options.sortBy] Gets or sets the column to order by.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTemplatesByFilterWithHttpOperationResponse(options?: { drawerID? : number, name? : string, category? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityDefinitionModel[]>>;

  /**
   * @summary Gets a paged list of entity template definitions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.category] Gets or sets the category.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {number} [options.sortBy] Gets or sets the column to order by.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTemplatesByFilter(options?: { drawerID? : number, name? : string, category? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityDefinitionModel[]>;
  getTemplatesByFilter(callback: ServiceCallback<models.EntityDefinitionModel[]>): void;
  getTemplatesByFilter(options: { drawerID? : number, name? : string, category? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityDefinitionModel[]>): void;


  /**
   * @summary Creates a new entity template definition.
   *
   * @param {object} model The entity template model.
   *
   * @param {number} model.type Gets or sets the type of template.
   *
   * @param {string} model.category Gets or sets the category of template.
   *
   * @param {string} model.name Gets or sets the name of template.
   *
   * @param {boolean} [model.hasClass] Gets or sets if the template has classes.
   *
   * @param {boolean} [model.hasSecurity] Gets or sets if the template has
   * security.
   *
   * @param {boolean} [model.hasProfiles] Gets or sets if the template has
   * profiles.
   *
   * @param {boolean} [model.hasItems] Gets or sets the has items.
   *
   * @param {string} [model.smallImage] Gets or sets the small image.
   *
   * @param {string} [model.largeImage] Gets or sets the large image.
   *
   * @param {boolean} [model.hasAudit] Gets or sets if the template has auditing
   * enabled.
   *
   * @param {boolean} [model.allowsViewImages] Gets or sets if the template
   * allows viewing images.
   *
   * @param {boolean} [model.isReviewState] Gets or sets if the entity is created
   * in a review state.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved int1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved int2.
   *
   * @param {array} [model.drawers] Gets or sets the drawers.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityDefinitionModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createTemplateWithHttpOperationResponse(model: models.EntityDefinitionBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityDefinitionModel>>;

  /**
   * @summary Creates a new entity template definition.
   *
   * @param {object} model The entity template model.
   *
   * @param {number} model.type Gets or sets the type of template.
   *
   * @param {string} model.category Gets or sets the category of template.
   *
   * @param {string} model.name Gets or sets the name of template.
   *
   * @param {boolean} [model.hasClass] Gets or sets if the template has classes.
   *
   * @param {boolean} [model.hasSecurity] Gets or sets if the template has
   * security.
   *
   * @param {boolean} [model.hasProfiles] Gets or sets if the template has
   * profiles.
   *
   * @param {boolean} [model.hasItems] Gets or sets the has items.
   *
   * @param {string} [model.smallImage] Gets or sets the small image.
   *
   * @param {string} [model.largeImage] Gets or sets the large image.
   *
   * @param {boolean} [model.hasAudit] Gets or sets if the template has auditing
   * enabled.
   *
   * @param {boolean} [model.allowsViewImages] Gets or sets if the template
   * allows viewing images.
   *
   * @param {boolean} [model.isReviewState] Gets or sets if the entity is created
   * in a review state.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved int1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved int2.
   *
   * @param {array} [model.drawers] Gets or sets the drawers.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityDefinitionModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityDefinitionModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityDefinitionModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createTemplate(model: models.EntityDefinitionBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityDefinitionModel>;
  createTemplate(model: models.EntityDefinitionBase, callback: ServiceCallback<models.EntityDefinitionModel>): void;
  createTemplate(model: models.EntityDefinitionBase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityDefinitionModel>): void;


  /**
   * @summary Gets a single entity template definition by its type.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityDefinitionModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTemplateByTypeWithHttpOperationResponse(type: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityDefinitionModel>>;

  /**
   * @summary Gets a single entity template definition by its type.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityDefinitionModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityDefinitionModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityDefinitionModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTemplateByType(type: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityDefinitionModel>;
  getTemplateByType(type: number, callback: ServiceCallback<models.EntityDefinitionModel>): void;
  getTemplateByType(type: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityDefinitionModel>): void;


  /**
   * @summary Updates a specified entity template definition by type.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} model The entity template model.
   *
   * @param {string} [model.category] Gets or sets the category of template.
   *
   * @param {string} [model.name] Gets or sets the name of templates.
   *
   * @param {string} [model.smallImage] Gets or sets the small image.
   *
   * @param {string} [model.largeImage] Gets or sets the large image.
   *
   * @param {boolean} [model.hasAudit] Gets or sets if the template has auditing
   * enabled.
   *
   * @param {boolean} [model.allowsViewImages] Gets or sets if the template
   * allows viewing images.
   *
   * @param {boolean} [model.isReviewState] Gets or sets if the entity is created
   * in a review state.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateTemplateByTypeWithHttpOperationResponse(type: number, model: models.UpdateEntityDefinitionRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified entity template definition by type.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} model The entity template model.
   *
   * @param {string} [model.category] Gets or sets the category of template.
   *
   * @param {string} [model.name] Gets or sets the name of templates.
   *
   * @param {string} [model.smallImage] Gets or sets the small image.
   *
   * @param {string} [model.largeImage] Gets or sets the large image.
   *
   * @param {boolean} [model.hasAudit] Gets or sets if the template has auditing
   * enabled.
   *
   * @param {boolean} [model.allowsViewImages] Gets or sets if the template
   * allows viewing images.
   *
   * @param {boolean} [model.isReviewState] Gets or sets if the entity is created
   * in a review state.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTemplateByType(type: number, model: models.UpdateEntityDefinitionRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateTemplateByType(type: number, model: models.UpdateEntityDefinitionRequestModel, callback: ServiceCallback<any>): void;
  updateTemplateByType(type: number, model: models.UpdateEntityDefinitionRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a specified entity template definition by type.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteTemplateByTypeWithHttpOperationResponse(type: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a specified entity template definition by type.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTemplateByType(type: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteTemplateByType(type: number, callback: ServiceCallback<any>): void;
  deleteTemplateByType(type: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a single entity template definition by its unique identifier.
   *
   * @param {string} id The template identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityDefinitionModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTemplateByIdWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityDefinitionModel>>;

  /**
   * @summary Gets a single entity template definition by its unique identifier.
   *
   * @param {string} id The template identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityDefinitionModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityDefinitionModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityDefinitionModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTemplateById(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityDefinitionModel>;
  getTemplateById(id: string, callback: ServiceCallback<models.EntityDefinitionModel>): void;
  getTemplateById(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityDefinitionModel>): void;


  /**
   * @summary Updates a specified entity template definition by identifier.
   *
   * @param {string} id The unique template identifier.
   *
   * @param {object} model The entity template model.
   *
   * @param {string} [model.category] Gets or sets the category of template.
   *
   * @param {string} [model.name] Gets or sets the name of templates.
   *
   * @param {string} [model.smallImage] Gets or sets the small image.
   *
   * @param {string} [model.largeImage] Gets or sets the large image.
   *
   * @param {boolean} [model.hasAudit] Gets or sets if the template has auditing
   * enabled.
   *
   * @param {boolean} [model.allowsViewImages] Gets or sets if the template
   * allows viewing images.
   *
   * @param {boolean} [model.isReviewState] Gets or sets if the entity is created
   * in a review state.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateTemplateByIdWithHttpOperationResponse(id: string, model: models.UpdateEntityDefinitionRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified entity template definition by identifier.
   *
   * @param {string} id The unique template identifier.
   *
   * @param {object} model The entity template model.
   *
   * @param {string} [model.category] Gets or sets the category of template.
   *
   * @param {string} [model.name] Gets or sets the name of templates.
   *
   * @param {string} [model.smallImage] Gets or sets the small image.
   *
   * @param {string} [model.largeImage] Gets or sets the large image.
   *
   * @param {boolean} [model.hasAudit] Gets or sets if the template has auditing
   * enabled.
   *
   * @param {boolean} [model.allowsViewImages] Gets or sets if the template
   * allows viewing images.
   *
   * @param {boolean} [model.isReviewState] Gets or sets if the entity is created
   * in a review state.
   *
   * @param {array} [model.profiles] Gets or sets the profiles.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTemplateById(id: string, model: models.UpdateEntityDefinitionRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateTemplateById(id: string, model: models.UpdateEntityDefinitionRequestModel, callback: ServiceCallback<any>): void;
  updateTemplateById(id: string, model: models.UpdateEntityDefinitionRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a specified entity template definition by identifier.
   *
   * @param {string} id The unique template identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteTemplateByIdWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a specified entity template definition by identifier.
   *
   * @param {string} id The unique template identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTemplateById(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteTemplateById(id: string, callback: ServiceCallback<any>): void;
  deleteTemplateById(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Validates the specified template field.
   *
   * @param {number} type The template type.
   *
   * @param {string} fieldID The field name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.sortColumn] Gets or sets the sort column.
   *
   * @param {array} [options.metadata] Gets or sets the metadata search options.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {number} [options.sortBy] Gets or sets the column to order by.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FieldValidationModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  validateTemplateFieldWithHttpOperationResponse(type: number, fieldID: string, options?: { sortColumn? : string, metadata? : any[], page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FieldValidationModel>>;

  /**
   * @summary Validates the specified template field.
   *
   * @param {number} type The template type.
   *
   * @param {string} fieldID The field name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.sortColumn] Gets or sets the sort column.
   *
   * @param {array} [options.metadata] Gets or sets the metadata search options.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {number} [options.sortBy] Gets or sets the column to order by.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {FieldValidationModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {FieldValidationModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FieldValidationModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  validateTemplateField(type: number, fieldID: string, options?: { sortColumn? : string, metadata? : any[], page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.FieldValidationModel>;
  validateTemplateField(type: number, fieldID: string, callback: ServiceCallback<models.FieldValidationModel>): void;
  validateTemplateField(type: number, fieldID: string, options: { sortColumn? : string, metadata? : any[], page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FieldValidationModel>): void;


  /**
   * @summary Gets a paged list of groups.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the group identifier.
   *
   * @param {number} [options.userID] Gets or sets the user identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Generic', 'Access', 'Role'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Inactive', 'Active'
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Name', 'Type', 'State'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGroupsByFilterWithHttpOperationResponse(options?: { iD? : number, userID? : number, name? : string, type? : string, state? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupModel[]>>;

  /**
   * @summary Gets a paged list of groups.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the group identifier.
   *
   * @param {number} [options.userID] Gets or sets the user identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Generic', 'Access', 'Role'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Inactive', 'Active'
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Name', 'Type', 'State'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGroupsByFilter(options?: { iD? : number, userID? : number, name? : string, type? : string, state? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupModel[]>;
  getGroupsByFilter(callback: ServiceCallback<models.GroupModel[]>): void;
  getGroupsByFilter(options: { iD? : number, userID? : number, name? : string, type? : string, state? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupModel[]>): void;


  /**
   * @summary Creates a new group.
   *
   * @param {object} model The group model.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GroupModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createGroupWithHttpOperationResponse(model: models.InsertGroupRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupModel>>;

  /**
   * @summary Creates a new group.
   *
   * @param {object} model The group model.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GroupModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GroupModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GroupModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createGroup(model: models.InsertGroupRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupModel>;
  createGroup(model: models.InsertGroupRequestModel, callback: ServiceCallback<models.GroupModel>): void;
  createGroup(model: models.InsertGroupRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupModel>): void;


  /**
   * @summary Gets a single group by its unique identifier.
   *
   * @param {number} id The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GroupModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGroupByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupModel>>;

  /**
   * @summary Gets a single group by its unique identifier.
   *
   * @param {number} id The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GroupModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GroupModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GroupModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGroupById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupModel>;
  getGroupById(id: number, callback: ServiceCallback<models.GroupModel>): void;
  getGroupById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupModel>): void;


  /**
   * @summary Updates a specified group.
   *
   * @param {number} id The group identifier.
   *
   * @param {object} model The group model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Inactive', 'Active'
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved int1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved int2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateGroupWithHttpOperationResponse(id: number, model: models.GroupBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified group.
   *
   * @param {number} id The group identifier.
   *
   * @param {object} model The group model.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Inactive', 'Active'
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved int1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved int2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateGroup(id: number, model: models.GroupBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateGroup(id: number, model: models.GroupBase, callback: ServiceCallback<any>): void;
  updateGroup(id: number, model: models.GroupBase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deactivates a group and removes all group associations.
   *
   * @param {number} id The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteGroupWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deactivates a group and removes all group associations.
   *
   * @param {number} id The group identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteGroup(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteGroup(id: number, callback: ServiceCallback<any>): void;
  deleteGroup(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a paged list of entity links
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.childEntityID] Gets or sets the child entity
   * identifier.
   *
   * @param {number} [options.childDrawerID] Gets or sets the child drawer
   * identifier.
   *
   * @param {number} [options.childType] Gets or sets the type of the child.
   *
   * @param {number} [options.acl] Gets or sets the access control list.
   *
   * @param {number} [options.entityID] Gets or sets the entity identifier.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {date} [options.minInsertionTime] Gets or sets the minimum insertion
   * time.
   *
   * @param {date} [options.maxInsertionTime] Gets or sets the maximum insertion
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLinksByFilterWithHttpOperationResponse(options?: { childEntityID? : number, childDrawerID? : number, childType? : number, acl? : number, entityID? : number, drawerID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minInsertionTime? : Date, maxInsertionTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityLinkModel[]>>;

  /**
   * @summary Gets a paged list of entity links
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.childEntityID] Gets or sets the child entity
   * identifier.
   *
   * @param {number} [options.childDrawerID] Gets or sets the child drawer
   * identifier.
   *
   * @param {number} [options.childType] Gets or sets the type of the child.
   *
   * @param {number} [options.acl] Gets or sets the access control list.
   *
   * @param {number} [options.entityID] Gets or sets the entity identifier.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {date} [options.minInsertionTime] Gets or sets the minimum insertion
   * time.
   *
   * @param {date} [options.maxInsertionTime] Gets or sets the maximum insertion
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLinksByFilter(options?: { childEntityID? : number, childDrawerID? : number, childType? : number, acl? : number, entityID? : number, drawerID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minInsertionTime? : Date, maxInsertionTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityLinkModel[]>;
  getLinksByFilter(callback: ServiceCallback<models.EntityLinkModel[]>): void;
  getLinksByFilter(options: { childEntityID? : number, childDrawerID? : number, childType? : number, acl? : number, entityID? : number, drawerID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minInsertionTime? : Date, maxInsertionTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityLinkModel[]>): void;


  /**
   * @summary Gets a link based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The link identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityLinkModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLinkByIdWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityLinkModel>>;

  /**
   * @summary Gets a link based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The link identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityLinkModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityLinkModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityLinkModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLinkById(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityLinkModel>;
  getLinkById(drawer: number, id: number, callback: ServiceCallback<models.EntityLinkModel>): void;
  getLinkById(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityLinkModel>): void;


  /**
   * @summary Updates a specified link.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The link identifier.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.virtualName] Gets or sets the name of the virtual.
   *
   * @param {number} [model.classProperty] Gets or sets the class.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.pageNumber] Gets or sets the page number.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic',
   * 'Static', 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateLinkWithHttpOperationResponse(drawer: number, id: number, model: models.UpdateEntityLinkRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified link.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The link identifier.
   *
   * @param {object} model The model.
   *
   * @param {string} [model.virtualName] Gets or sets the name of the virtual.
   *
   * @param {number} [model.classProperty] Gets or sets the class.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.pageNumber] Gets or sets the page number.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic',
   * 'Static', 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateLink(drawer: number, id: number, model: models.UpdateEntityLinkRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateLink(drawer: number, id: number, model: models.UpdateEntityLinkRequestModel, callback: ServiceCallback<any>): void;
  updateLink(drawer: number, id: number, model: models.UpdateEntityLinkRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a specified link.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The link identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteLinkWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a specified link.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The link identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteLink(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteLink(drawer: number, id: number, callback: ServiceCallback<any>): void;
  deleteLink(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new link.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The link model.
   *
   * @param {number} [model.classProperty] Gets or sets the class.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.pageNumber] Gets or sets the page number.
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {number} [model.childDrawerID] Gets or sets the child drawer
   * identifier.
   *
   * @param {number} [model.childEntityID] Gets or sets the child entity
   * identifier.
   *
   * @param {number} [model.childType] Gets or sets the type of the child.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {string} [model.virtualName] Gets or sets the name of the virtual.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EntityLinkModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createLinkWithHttpOperationResponse(drawer: number, model: models.InsertEntityLinkRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EntityLinkModel>>;

  /**
   * @summary Creates a new link.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The link model.
   *
   * @param {number} [model.classProperty] Gets or sets the class.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.pageNumber] Gets or sets the page number.
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {number} [model.childDrawerID] Gets or sets the child drawer
   * identifier.
   *
   * @param {number} [model.childEntityID] Gets or sets the child entity
   * identifier.
   *
   * @param {number} [model.childType] Gets or sets the type of the child.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {string} [model.virtualName] Gets or sets the name of the virtual.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EntityLinkModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EntityLinkModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EntityLinkModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createLink(drawer: number, model: models.InsertEntityLinkRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EntityLinkModel>;
  createLink(drawer: number, model: models.InsertEntityLinkRequestModel, callback: ServiceCallback<models.EntityLinkModel>): void;
  createLink(drawer: number, model: models.InsertEntityLinkRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EntityLinkModel>): void;


  /**
   * @summary Gets a lock for a single entity based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<LockModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLocksByFilterWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LockModel>>;

  /**
   * @summary Gets a lock for a single entity based on its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {LockModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {LockModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link LockModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLocksByFilter(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LockModel>;
  getLocksByFilter(drawer: number, id: number, callback: ServiceCallback<models.LockModel>): void;
  getLocksByFilter(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LockModel>): void;


  /**
   * @summary Inserts or updates lock on a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} model The lock model.
   *
   * @param {number} [model.expirationDuration] Gets or sets the expiration
   * duration of the lock in minutes.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions of the lock.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application creating the lock.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createOrUpdateLockWithHttpOperationResponse(drawer: number, id: number, model: models.UpdateLockRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Inserts or updates lock on a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} model The lock model.
   *
   * @param {number} [model.expirationDuration] Gets or sets the expiration
   * duration of the lock in minutes.
   *
   * @param {number} [model.acl] Gets or sets the access control level
   * permissions of the lock.
   *
   * @param {string} [model.applicationName] Gets or sets the name of the
   * application creating the lock.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateLock(drawer: number, id: number, model: models.UpdateLockRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createOrUpdateLock(drawer: number, id: number, model: models.UpdateLockRequestModel, callback: ServiceCallback<any>): void;
  createOrUpdateLock(drawer: number, id: number, model: models.UpdateLockRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a lock on a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteLockWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a lock on a specified entity.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The entity identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteLock(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteLock(drawer: number, id: number, callback: ServiceCallback<any>): void;
  deleteLock(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a paged list of notes.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.entityID] Gets or sets the entity identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {date} [options.minCreationTime] Gets or sets the minimum creation
   * time.
   *
   * @param {date} [options.maxCreationTime] Gets or sets the maximum creation
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {number} [options.parentID] Gets or sets the parent note identifier.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime',
   * 'ModificationTime'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getNotesByFilterWithHttpOperationResponse(drawerID: number, options?: { entityID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, parentID? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NoteModel[]>>;

  /**
   * @summary Gets a paged list of notes.
   *
   * @param {number} drawerID Gets or sets the drawer identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.entityID] Gets or sets the entity identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.creatorUserID] Gets or sets the creator user
   * identifier.
   *
   * @param {number} [options.modifierUserID] Gets or sets the modifier user
   * identifier.
   *
   * @param {date} [options.minCreationTime] Gets or sets the minimum creation
   * time.
   *
   * @param {date} [options.maxCreationTime] Gets or sets the maximum creation
   * time.
   *
   * @param {date} [options.minModificationTime] Gets or sets the minimum
   * modification time.
   *
   * @param {date} [options.maxModificationTime] Gets or sets the maximum
   * modification time.
   *
   * @param {number} [options.parentID] Gets or sets the parent note identifier.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime',
   * 'ModificationTime'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getNotesByFilter(drawerID: number, options?: { entityID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, parentID? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NoteModel[]>;
  getNotesByFilter(drawerID: number, callback: ServiceCallback<models.NoteModel[]>): void;
  getNotesByFilter(drawerID: number, options: { entityID? : number, name? : string, creatorUserID? : number, modifierUserID? : number, minCreationTime? : Date, maxCreationTime? : Date, minModificationTime? : Date, maxModificationTime? : Date, parentID? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NoteModel[]>): void;


  /**
   * @summary Gets a note by its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The note identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<NoteModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getNoteByIdWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NoteModel>>;

  /**
   * @summary Gets a note by its unique identifier.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The note identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {NoteModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {NoteModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link NoteModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getNoteById(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NoteModel>;
  getNoteById(drawer: number, id: number, callback: ServiceCallback<models.NoteModel>): void;
  getNoteById(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NoteModel>): void;


  /**
   * @summary Updates a specified note.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The note identifier.
   *
   * @param {object} model The note model.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateNoteWithHttpOperationResponse(drawer: number, id: number, model: models.NoteBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified note.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The note identifier.
   *
   * @param {object} model The note model.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {string} [model.note] Gets or sets the note.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateNote(drawer: number, id: number, model: models.NoteBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateNote(drawer: number, id: number, model: models.NoteBase, callback: ServiceCallback<any>): void;
  updateNote(drawer: number, id: number, model: models.NoteBase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a specified note.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The note identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteNoteWithHttpOperationResponse(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a specified note.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {number} id The note identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteNote(drawer: number, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteNote(drawer: number, id: number, callback: ServiceCallback<any>): void;
  deleteNote(drawer: number, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new note.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The note model.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} model.note Gets or sets the note.
   *
   * @param {number} [model.parentID] Gets or sets the parent identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<NoteModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createNoteWithHttpOperationResponse(drawer: number, model: models.InsertNoteRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NoteModel>>;

  /**
   * @summary Creates a new note.
   *
   * @param {number} drawer The drawer identifier.
   *
   * @param {object} model The note model.
   *
   * @param {number} [model.acl] Gets or sets the acl.
   *
   * @param {number} [model.entityID] Gets or sets the entity identifier.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} model.note Gets or sets the note.
   *
   * @param {number} [model.parentID] Gets or sets the parent identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {NoteModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {NoteModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link NoteModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createNote(drawer: number, model: models.InsertNoteRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NoteModel>;
  createNote(drawer: number, model: models.InsertNoteRequestModel, callback: ServiceCallback<models.NoteModel>): void;
  createNote(drawer: number, model: models.InsertNoteRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NoteModel>): void;


  /**
   * @summary Gets a paged list of queue assignments.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.queueID] Gets or sets the unique queue identifier.
   *
   * @param {number} [options.userID] Gets or sets the user identifier.
   *
   * @param {number} [options.groupID] Gets or sets the group identifier.
   *
   * @param {string} [options.type] Gets or sets the queue assignment type.
   * Possible values include: 'Unspecified', 'Primary', 'Secondary'
   *
   * @param {number} [options.order] Gets or sets the sort order.
   *
   * @param {string} [options.taskSortColumn] Gets or sets the task sort column.
   * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
   * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
   * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Unspecified', 'Inactive', 'Active'
   *
   * @param {string} [options.fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State',
   * 'Order', 'FetchType'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getQueueAssignmentsByFilterWithHttpOperationResponse(options?: { queueID? : number, userID? : number, groupID? : number, type? : string, order? : number, taskSortColumn? : string, state? : string, fetchType? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QueueAssignmentModel[]>>;

  /**
   * @summary Gets a paged list of queue assignments.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.queueID] Gets or sets the unique queue identifier.
   *
   * @param {number} [options.userID] Gets or sets the user identifier.
   *
   * @param {number} [options.groupID] Gets or sets the group identifier.
   *
   * @param {string} [options.type] Gets or sets the queue assignment type.
   * Possible values include: 'Unspecified', 'Primary', 'Secondary'
   *
   * @param {number} [options.order] Gets or sets the sort order.
   *
   * @param {string} [options.taskSortColumn] Gets or sets the task sort column.
   * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
   * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
   * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Unspecified', 'Inactive', 'Active'
   *
   * @param {string} [options.fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State',
   * 'Order', 'FetchType'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getQueueAssignmentsByFilter(options?: { queueID? : number, userID? : number, groupID? : number, type? : string, order? : number, taskSortColumn? : string, state? : string, fetchType? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.QueueAssignmentModel[]>;
  getQueueAssignmentsByFilter(callback: ServiceCallback<models.QueueAssignmentModel[]>): void;
  getQueueAssignmentsByFilter(options: { queueID? : number, userID? : number, groupID? : number, type? : string, order? : number, taskSortColumn? : string, state? : string, fetchType? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueAssignmentModel[]>): void;


  /**
   * @summary Updates the specified queue assignment.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.queueID] Gets or sets the unique queue identifier.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.type] Gets or sets the queue assignment type.
   * Possible values include: 'Unspecified', 'Primary', 'Secondary'
   *
   * @param {number} [model.order] Gets or sets the sort order.
   *
   * @param {string} [model.taskSortColumn] Gets or sets the task sort column.
   * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
   * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
   * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Unspecified', 'Inactive', 'Active'
   *
   * @param {string} [model.fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateQueueAssignemntWithHttpOperationResponse(model: models.QueueAssignmentModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the specified queue assignment.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.queueID] Gets or sets the unique queue identifier.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {number} [model.groupID] Gets or sets the group identifier.
   *
   * @param {string} [model.type] Gets or sets the queue assignment type.
   * Possible values include: 'Unspecified', 'Primary', 'Secondary'
   *
   * @param {number} [model.order] Gets or sets the sort order.
   *
   * @param {string} [model.taskSortColumn] Gets or sets the task sort column.
   * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
   * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
   * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Unspecified', 'Inactive', 'Active'
   *
   * @param {string} [model.fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateQueueAssignemnt(model: models.QueueAssignmentModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateQueueAssignemnt(model: models.QueueAssignmentModel, callback: ServiceCallback<any>): void;
  updateQueueAssignemnt(model: models.QueueAssignmentModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new queue assignment.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.queueID] Gets or sets the unique queue identifier.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.type] Gets or sets the queue assignment type.
   * Possible values include: 'Unspecified', 'Primary', 'Secondary'
   *
   * @param {number} [model.order] Gets or sets the sort order.
   *
   * @param {string} [model.taskSortColumn] Gets or sets the task sort column.
   * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
   * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
   * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   *
   * @param {string} [model.fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueueAssignmentModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createQueueAssignmentWithHttpOperationResponse(model: models.InsertQueueAssignmentRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QueueAssignmentModel>>;

  /**
   * @summary Creates a new queue assignment.
   *
   * @param {object} model The model.
   *
   * @param {number} [model.queueID] Gets or sets the unique queue identifier.
   *
   * @param {number} [model.userID] Gets or sets the user identifier.
   *
   * @param {string} [model.type] Gets or sets the queue assignment type.
   * Possible values include: 'Unspecified', 'Primary', 'Secondary'
   *
   * @param {number} [model.order] Gets or sets the sort order.
   *
   * @param {string} [model.taskSortColumn] Gets or sets the task sort column.
   * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
   * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
   * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   *
   * @param {string} [model.fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {QueueAssignmentModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {QueueAssignmentModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueueAssignmentModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createQueueAssignment(model: models.InsertQueueAssignmentRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QueueAssignmentModel>;
  createQueueAssignment(model: models.InsertQueueAssignmentRequestModel, callback: ServiceCallback<models.QueueAssignmentModel>): void;
  createQueueAssignment(model: models.InsertQueueAssignmentRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueAssignmentModel>): void;


  /**
   * @summary Gets a single queue assignment based on user and queue identifiers.
   *
   * @param {number} userId The user identifier.
   *
   * @param {number} queueId The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueueAssignmentModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getQueueAssignmentsByIdWithHttpOperationResponse(userId: number, queueId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QueueAssignmentModel>>;

  /**
   * @summary Gets a single queue assignment based on user and queue identifiers.
   *
   * @param {number} userId The user identifier.
   *
   * @param {number} queueId The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {QueueAssignmentModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {QueueAssignmentModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueueAssignmentModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getQueueAssignmentsById(userId: number, queueId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QueueAssignmentModel>;
  getQueueAssignmentsById(userId: number, queueId: number, callback: ServiceCallback<models.QueueAssignmentModel>): void;
  getQueueAssignmentsById(userId: number, queueId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueAssignmentModel>): void;


  /**
   * @summary Deletes the specified queue assignment.
   *
   * @param {number} userId The user identifier.
   *
   * @param {number} queueId The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteQueueAssignmentWithHttpOperationResponse(userId: number, queueId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes the specified queue assignment.
   *
   * @param {number} userId The user identifier.
   *
   * @param {number} queueId The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteQueueAssignment(userId: number, queueId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteQueueAssignment(userId: number, queueId: number, callback: ServiceCallback<any>): void;
  deleteQueueAssignment(userId: number, queueId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a paged list of queues.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the queue identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.alias] Gets or sets the alias.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public',
   * 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System',
   * 'Other', 'CdoInfostore', 'CdoFolder'
   *
   * @param {number} [options.access] Gets or sets the access level.
   *
   * @param {boolean} [options.bypassSecurity] Gets or sets a value indicating
   * whether to bypass security checks.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'Name', 'Alias'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getQueuesByFilterWithHttpOperationResponse(options?: { iD? : number, name? : string, alias? : string, type? : string, access? : number, bypassSecurity? : boolean, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QueueModel[]>>;

  /**
   * @summary Gets a paged list of queues.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the queue identifier.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {string} [options.alias] Gets or sets the alias.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public',
   * 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System',
   * 'Other', 'CdoInfostore', 'CdoFolder'
   *
   * @param {number} [options.access] Gets or sets the access level.
   *
   * @param {boolean} [options.bypassSecurity] Gets or sets a value indicating
   * whether to bypass security checks.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'Type', 'Name', 'Alias'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getQueuesByFilter(options?: { iD? : number, name? : string, alias? : string, type? : string, access? : number, bypassSecurity? : boolean, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.QueueModel[]>;
  getQueuesByFilter(callback: ServiceCallback<models.QueueModel[]>): void;
  getQueuesByFilter(options: { iD? : number, name? : string, alias? : string, type? : string, access? : number, bypassSecurity? : boolean, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueModel[]>): void;


  /**
   * @summary Creates a new queue.
   *
   * @param {object} model The queue model.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} model.alias Gets or sets the alias.
   *
   * @param {string} model.type Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueueModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createQueueWithHttpOperationResponse(model: models.InsertQueueRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QueueModel>>;

  /**
   * @summary Creates a new queue.
   *
   * @param {object} model The queue model.
   *
   * @param {string} model.name Gets or sets the name.
   *
   * @param {string} model.alias Gets or sets the alias.
   *
   * @param {string} model.type Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {QueueModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {QueueModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueueModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createQueue(model: models.InsertQueueRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QueueModel>;
  createQueue(model: models.InsertQueueRequestModel, callback: ServiceCallback<models.QueueModel>): void;
  createQueue(model: models.InsertQueueRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueModel>): void;


  /**
   * @summary Gets a single queue by its unique identifier.
   *
   * @param {number} id The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueueModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getQueueByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QueueModel>>;

  /**
   * @summary Gets a single queue by its unique identifier.
   *
   * @param {number} id The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {QueueModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {QueueModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueueModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getQueueById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QueueModel>;
  getQueueById(id: number, callback: ServiceCallback<models.QueueModel>): void;
  getQueueById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueModel>): void;


  /**
   * @summary Updates a specified queue.
   *
   * @param {number} id The unique queue identifier.
   *
   * @param {object} model The queue model.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {string} [model.alias] Gets or sets the alias.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Inactive', 'Active'
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   *
   * @param {string} [model.category] Gets or sets the category.
   *
   * @param {string} [model.description] Gets or sets the description.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved integer 1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved integer 2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string 1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string 2.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateQueueWithHttpOperationResponse(id: number, model: models.QueueBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified queue.
   *
   * @param {number} id The unique queue identifier.
   *
   * @param {object} model The queue model.
   *
   * @param {string} [model.name] Gets or sets the name.
   *
   * @param {string} [model.alias] Gets or sets the alias.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Inactive', 'Active'
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   *
   * @param {string} [model.category] Gets or sets the category.
   *
   * @param {string} [model.description] Gets or sets the description.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved integer 1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved integer 2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string 1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string 2.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateQueue(id: number, model: models.QueueBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateQueue(id: number, model: models.QueueBase, callback: ServiceCallback<any>): void;
  updateQueue(id: number, model: models.QueueBase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a specified queue.
   *
   * @param {number} id The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteQueueWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a specified queue.
   *
   * @param {number} id The queue identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteQueue(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteQueue(id: number, callback: ServiceCallback<any>): void;
  deleteQueue(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a single queue by its name.
   *
   * @param {string} name The queue name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<QueueModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getQueueByNameWithHttpOperationResponse(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QueueModel>>;

  /**
   * @summary Gets a single queue by its name.
   *
   * @param {string} name The queue name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {QueueModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {QueueModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link QueueModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getQueueByName(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QueueModel>;
  getQueueByName(name: string, callback: ServiceCallback<models.QueueModel>): void;
  getQueueByName(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QueueModel>): void;


  /**
   * @summary Gets a paged list of tasks.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.lastTaskID] Gets or sets the last task identifier.
   *
   * @param {number} [options.iD] Gets or sets the entity identifier.
   *
   * @param {number} [options.type] Gets or sets the type of the entity.
   *
   * @param {number} [options.queueID] Gets or sets the queue identifier.
   *
   * @param {number} [options.queueType] Gets or sets the type of the queue.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.description] Gets or sets the task description.
   *
   * @param {number} [options.taskID] Gets or sets the task identifier.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority',
   * 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTasksByFilterWithHttpOperationResponse(options?: { lastTaskID? : number, iD? : number, type? : number, queueID? : number, queueType? : number, drawerID? : number, description? : string, taskID? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TaskModel[]>>;

  /**
   * @summary Gets a paged list of tasks.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.lastTaskID] Gets or sets the last task identifier.
   *
   * @param {number} [options.iD] Gets or sets the entity identifier.
   *
   * @param {number} [options.type] Gets or sets the type of the entity.
   *
   * @param {number} [options.queueID] Gets or sets the queue identifier.
   *
   * @param {number} [options.queueType] Gets or sets the type of the queue.
   *
   * @param {number} [options.drawerID] Gets or sets the drawer identifier.
   *
   * @param {string} [options.description] Gets or sets the task description.
   *
   * @param {number} [options.taskID] Gets or sets the task identifier.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority',
   * 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTasksByFilter(options?: { lastTaskID? : number, iD? : number, type? : number, queueID? : number, queueType? : number, drawerID? : number, description? : string, taskID? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TaskModel[]>;
  getTasksByFilter(callback: ServiceCallback<models.TaskModel[]>): void;
  getTasksByFilter(options: { lastTaskID? : number, iD? : number, type? : number, queueID? : number, queueType? : number, drawerID? : number, description? : string, taskID? : number, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TaskModel[]>): void;


  /**
   * @summary Creates a new task.
   *
   * @param {object} model The task model.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.objectID] Gets or sets the object identifier
   * (entity).
   *
   * @param {number} [model.objectType] Gets or sets the type of the object
   * (entity).
   *
   * @param {number} [model.prevQueueID] Gets or sets the previous queue
   * identifier.
   *
   * @param {number} [model.nextQueueID] Gets or sets the next queue identifier.
   *
   * @param {number} [model.addressID] Gets or sets the address identifier.
   *
   * @param {string} [model.description] Gets or sets the description of the
   * task.
   *
   * @param {string} [model.message1] Gets or sets message 1.
   *
   * @param {string} [model.message2] Gets or sets message 2.
   *
   * @param {string} [model.message3] Gets or sets message 3.
   *
   * @param {string} [model.message4] Gets or sets message 4.
   *
   * @param {string} [model.message5] Gets or sets message5.
   *
   * @param {string} [model.message6] Gets or sets message 6.
   *
   * @param {string} [model.message7] Gets or sets message 7.
   *
   * @param {string} [model.message8] Gets or sets message 8.
   *
   * @param {string} [model.message9] Gets or sets message 9.
   *
   * @param {string} [model.message10] Gets or sets message 10.
   *
   * @param {string} [model.message11] Gets or sets message 11.
   *
   * @param {string} [model.message12] Gets or sets message 12.
   *
   * @param {string} [model.message13] Gets or sets message 13.
   *
   * @param {string} [model.message14] Gets or sets message 14.
   *
   * @param {string} [model.message15] Gets or sets message 15.
   *
   * @param {string} [model.message16] Gets or sets message 16.
   *
   * @param {number} [model.state] Gets or sets the task state.
   *
   * @param {number} [model.priority] Gets or sets the task priority.
   *
   * @param {date} [model.resolutionTime] Gets or sets the task resolution time.
   *
   * @param {string} [model.taskFileAttachment] Gets or sets the task file
   * attachment name.
   *
   * @param {number} [model.reservedInt1] Gets or sets reserved integer 1.
   *
   * @param {string} [model.reservedString1] Gets or sets reserved string 1.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createTaskWithHttpOperationResponse(model: models.InsertTaskRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Creates a new task.
   *
   * @param {object} model The task model.
   *
   * @param {number} [model.queueID] Gets or sets the queue identifier.
   *
   * @param {number} [model.drawerID] Gets or sets the drawer identifier.
   *
   * @param {number} [model.objectID] Gets or sets the object identifier
   * (entity).
   *
   * @param {number} [model.objectType] Gets or sets the type of the object
   * (entity).
   *
   * @param {number} [model.prevQueueID] Gets or sets the previous queue
   * identifier.
   *
   * @param {number} [model.nextQueueID] Gets or sets the next queue identifier.
   *
   * @param {number} [model.addressID] Gets or sets the address identifier.
   *
   * @param {string} [model.description] Gets or sets the description of the
   * task.
   *
   * @param {string} [model.message1] Gets or sets message 1.
   *
   * @param {string} [model.message2] Gets or sets message 2.
   *
   * @param {string} [model.message3] Gets or sets message 3.
   *
   * @param {string} [model.message4] Gets or sets message 4.
   *
   * @param {string} [model.message5] Gets or sets message5.
   *
   * @param {string} [model.message6] Gets or sets message 6.
   *
   * @param {string} [model.message7] Gets or sets message 7.
   *
   * @param {string} [model.message8] Gets or sets message 8.
   *
   * @param {string} [model.message9] Gets or sets message 9.
   *
   * @param {string} [model.message10] Gets or sets message 10.
   *
   * @param {string} [model.message11] Gets or sets message 11.
   *
   * @param {string} [model.message12] Gets or sets message 12.
   *
   * @param {string} [model.message13] Gets or sets message 13.
   *
   * @param {string} [model.message14] Gets or sets message 14.
   *
   * @param {string} [model.message15] Gets or sets message 15.
   *
   * @param {string} [model.message16] Gets or sets message 16.
   *
   * @param {number} [model.state] Gets or sets the task state.
   *
   * @param {number} [model.priority] Gets or sets the task priority.
   *
   * @param {date} [model.resolutionTime] Gets or sets the task resolution time.
   *
   * @param {string} [model.taskFileAttachment] Gets or sets the task file
   * attachment name.
   *
   * @param {number} [model.reservedInt1] Gets or sets reserved integer 1.
   *
   * @param {string} [model.reservedString1] Gets or sets reserved string 1.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createTask(model: models.InsertTaskRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  createTask(model: models.InsertTaskRequestModel, callback: ServiceCallback<any>): void;
  createTask(model: models.InsertTaskRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a single task based on its unique identifier.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaskModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTaskByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TaskModel>>;

  /**
   * @summary Gets a single task based on its unique identifier.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TaskModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TaskModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaskModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTaskById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TaskModel>;
  getTaskById(id: number, callback: ServiceCallback<models.TaskModel>): void;
  getTaskById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TaskModel>): void;


  /**
   * @summary Updates a specified task.
   *
   * @param {number} id The identifier.
   *
   * @param {object} model The task model.
   *
   * @param {number} [model.addressID] Gets or sets the address identifier.
   *
   * @param {string} [model.description] Gets or sets the description of the
   * task.
   *
   * @param {string} [model.message1] Gets or sets message 1.
   *
   * @param {string} [model.message2] Gets or sets message 2.
   *
   * @param {string} [model.message3] Gets or sets message 3.
   *
   * @param {string} [model.message4] Gets or sets message 4.
   *
   * @param {string} [model.message5] Gets or sets message5.
   *
   * @param {string} [model.message6] Gets or sets message 6.
   *
   * @param {string} [model.message7] Gets or sets message 7.
   *
   * @param {string} [model.message8] Gets or sets message 8.
   *
   * @param {string} [model.message9] Gets or sets message 9.
   *
   * @param {string} [model.message10] Gets or sets message 10.
   *
   * @param {string} [model.message11] Gets or sets message 11.
   *
   * @param {string} [model.message12] Gets or sets message 12.
   *
   * @param {string} [model.message13] Gets or sets message 13.
   *
   * @param {string} [model.message14] Gets or sets message 14.
   *
   * @param {string} [model.message15] Gets or sets message 15.
   *
   * @param {string} [model.message16] Gets or sets message 16.
   *
   * @param {number} [model.state] Gets or sets the task state.
   *
   * @param {number} [model.priority] Gets or sets the task priority.
   *
   * @param {date} [model.resolutionTime] Gets or sets the task resolution time.
   *
   * @param {string} [model.taskFileAttachment] Gets or sets the task file
   * attachment name.
   *
   * @param {number} [model.reservedInt1] Gets or sets reserved integer 1.
   *
   * @param {string} [model.reservedString1] Gets or sets reserved string 1.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateTaskWithHttpOperationResponse(id: number, model: models.TaskBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified task.
   *
   * @param {number} id The identifier.
   *
   * @param {object} model The task model.
   *
   * @param {number} [model.addressID] Gets or sets the address identifier.
   *
   * @param {string} [model.description] Gets or sets the description of the
   * task.
   *
   * @param {string} [model.message1] Gets or sets message 1.
   *
   * @param {string} [model.message2] Gets or sets message 2.
   *
   * @param {string} [model.message3] Gets or sets message 3.
   *
   * @param {string} [model.message4] Gets or sets message 4.
   *
   * @param {string} [model.message5] Gets or sets message5.
   *
   * @param {string} [model.message6] Gets or sets message 6.
   *
   * @param {string} [model.message7] Gets or sets message 7.
   *
   * @param {string} [model.message8] Gets or sets message 8.
   *
   * @param {string} [model.message9] Gets or sets message 9.
   *
   * @param {string} [model.message10] Gets or sets message 10.
   *
   * @param {string} [model.message11] Gets or sets message 11.
   *
   * @param {string} [model.message12] Gets or sets message 12.
   *
   * @param {string} [model.message13] Gets or sets message 13.
   *
   * @param {string} [model.message14] Gets or sets message 14.
   *
   * @param {string} [model.message15] Gets or sets message 15.
   *
   * @param {string} [model.message16] Gets or sets message 16.
   *
   * @param {number} [model.state] Gets or sets the task state.
   *
   * @param {number} [model.priority] Gets or sets the task priority.
   *
   * @param {date} [model.resolutionTime] Gets or sets the task resolution time.
   *
   * @param {string} [model.taskFileAttachment] Gets or sets the task file
   * attachment name.
   *
   * @param {number} [model.reservedInt1] Gets or sets reserved integer 1.
   *
   * @param {string} [model.reservedString1] Gets or sets reserved string 1.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTask(id: number, model: models.TaskBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateTask(id: number, model: models.TaskBase, callback: ServiceCallback<any>): void;
  updateTask(id: number, model: models.TaskBase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes a specified task.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteTaskWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deletes a specified task.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTask(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteTask(id: number, callback: ServiceCallback<any>): void;
  deleteTask(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a single task based on user predefined queue assignment
   * criteria.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaskModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  fetchTaskFromQueueAssignmentWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TaskModel>>;

  /**
   * @summary Gets a single task based on user predefined queue assignment
   * criteria.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TaskModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TaskModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaskModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  fetchTaskFromQueueAssignment(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TaskModel>;
  fetchTaskFromQueueAssignment(callback: ServiceCallback<models.TaskModel>): void;
  fetchTaskFromQueueAssignment(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TaskModel>): void;


  /**
   * @summary Gets a paged list of users.Gets a paged list of users.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the identifier.
   *
   * @param {number} [options.primaryGroupID] Gets or sets the primary group
   * identifier.
   *
   * @param {number} [options.groupID] Gets or sets the group identifier.
   *
   * @param {string} [options.groupName] Gets or sets the name of the group.
   *
   * @param {string} [options.username] Gets or sets the username.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk',
   * 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark',
   * 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk',
   * 'Poweruser'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Active', 'Inactive'
   *
   * @param {string} [options.fullName] Gets or sets the full name.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName',
   * 'Type', 'State'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUsersByFilterWithHttpOperationResponse(options?: { iD? : number, primaryGroupID? : number, groupID? : number, groupName? : string, username? : string, type? : string, state? : string, fullName? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserModel[]>>;

  /**
   * @summary Gets a paged list of users.Gets a paged list of users.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.iD] Gets or sets the identifier.
   *
   * @param {number} [options.primaryGroupID] Gets or sets the primary group
   * identifier.
   *
   * @param {number} [options.groupID] Gets or sets the group identifier.
   *
   * @param {string} [options.groupName] Gets or sets the name of the group.
   *
   * @param {string} [options.username] Gets or sets the username.
   *
   * @param {string} [options.type] Gets or sets the type. Possible values
   * include: 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk',
   * 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark',
   * 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk',
   * 'Poweruser'
   *
   * @param {string} [options.state] Gets or sets the state. Possible values
   * include: 'Active', 'Inactive'
   *
   * @param {string} [options.fullName] Gets or sets the full name.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {string} [options.sortBy] Gets or sets the column to order by.
   * Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName',
   * 'Type', 'State'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUsersByFilter(options?: { iD? : number, primaryGroupID? : number, groupID? : number, groupName? : string, username? : string, type? : string, state? : string, fullName? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserModel[]>;
  getUsersByFilter(callback: ServiceCallback<models.UserModel[]>): void;
  getUsersByFilter(options: { iD? : number, primaryGroupID? : number, groupID? : number, groupName? : string, username? : string, type? : string, state? : string, fullName? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserModel[]>): void;


  /**
   * @summary Creates a new user.
   *
   * @param {object} model The user model.
   *
   * @param {string} model.username Gets or sets the username.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Active', 'Inactive'
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   *
   * @param {string} model.fullName Gets or sets the full name.
   *
   * @param {string} model.iPAddress Gets or sets the ip address.
   *
   * @param {number} [model.entityAcl] Gets or sets the entity acl.
   *
   * @param {number} [model.attachmentAcl] Gets or sets the attachment acl.
   *
   * @param {number} [model.noteAcl] Gets or sets the note acl.
   *
   * @param {number} [model.entityFeature] Gets or sets the entity feature.
   *
   * @param {number} [model.attachmentFeature] Gets or sets the attachment
   * feature.
   *
   * @param {number} [model.noteFeature] Gets or sets the note feature.
   *
   * @param {string} [model.adminMask] Gets or sets the admin mask. Possible
   * values include: 'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin',
   * 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
   * 'ApplicationAdmin'
   *
   * @param {string} [model.address] Gets or sets the address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UserModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createUserWithHttpOperationResponse(model: models.InsertUserRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserModel>>;

  /**
   * @summary Creates a new user.
   *
   * @param {object} model The user model.
   *
   * @param {string} model.username Gets or sets the username.
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Active', 'Inactive'
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   *
   * @param {string} model.fullName Gets or sets the full name.
   *
   * @param {string} model.iPAddress Gets or sets the ip address.
   *
   * @param {number} [model.entityAcl] Gets or sets the entity acl.
   *
   * @param {number} [model.attachmentAcl] Gets or sets the attachment acl.
   *
   * @param {number} [model.noteAcl] Gets or sets the note acl.
   *
   * @param {number} [model.entityFeature] Gets or sets the entity feature.
   *
   * @param {number} [model.attachmentFeature] Gets or sets the attachment
   * feature.
   *
   * @param {number} [model.noteFeature] Gets or sets the note feature.
   *
   * @param {string} [model.adminMask] Gets or sets the admin mask. Possible
   * values include: 'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin',
   * 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
   * 'ApplicationAdmin'
   *
   * @param {string} [model.address] Gets or sets the address.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {UserModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {UserModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UserModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createUser(model: models.InsertUserRequestModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserModel>;
  createUser(model: models.InsertUserRequestModel, callback: ServiceCallback<models.UserModel>): void;
  createUser(model: models.InsertUserRequestModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserModel>): void;


  /**
   * @summary Gets a single user by its unique identifier.
   *
   * @param {number} id The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UserModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUserByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserModel>>;

  /**
   * @summary Gets a single user by its unique identifier.
   *
   * @param {number} id The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {UserModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {UserModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UserModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUserById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserModel>;
  getUserById(id: number, callback: ServiceCallback<models.UserModel>): void;
  getUserById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserModel>): void;


  /**
   * @summary Updates a specified user.
   *
   * @param {number} id The user identifier.
   *
   * @param {object} model The user model.
   *
   * @param {number} [model.primaryGroupID] Gets or sets the primary group
   * identifier.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Active', 'Inactive'
   *
   * @param {string} [model.fullName] Gets or sets the full name.
   *
   * @param {number} [model.objectCount] Gets or sets the object count.
   *
   * @param {string} [model.iPAddress] Gets or sets the ip address.
   *
   * @param {number} [model.entityAcl] Gets or sets the entity acl.
   *
   * @param {number} [model.attachmentAcl] Gets or sets the attachment acl.
   *
   * @param {number} [model.noteAcl] Gets or sets the note acl.
   *
   * @param {number} [model.entityFeature] Gets or sets the entity feature.
   *
   * @param {number} [model.attachmentFeature] Gets or sets the attachment
   * feature.
   *
   * @param {number} [model.noteFeature] Gets or sets the note feature.
   *
   * @param {string} [model.adminMask] Gets or sets the admin mask. Possible
   * values include: 'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin',
   * 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
   * 'ApplicationAdmin'
   *
   * @param {string} [model.address] Gets or sets the address.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved int1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved int2.
   *
   * @param {number} [model.reservedDouble1] Gets or sets the reserved double1.
   *
   * @param {number} [model.reservedDouble2] Gets or sets the reserved double2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {date} [model.userExpiration] Gets or sets the user expiration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateUserWithHttpOperationResponse(id: number, model: models.UserBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates a specified user.
   *
   * @param {number} id The user identifier.
   *
   * @param {object} model The user model.
   *
   * @param {number} [model.primaryGroupID] Gets or sets the primary group
   * identifier.
   *
   * @param {string} [model.type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   *
   * @param {string} [model.state] Gets or sets the state. Possible values
   * include: 'Active', 'Inactive'
   *
   * @param {string} [model.fullName] Gets or sets the full name.
   *
   * @param {number} [model.objectCount] Gets or sets the object count.
   *
   * @param {string} [model.iPAddress] Gets or sets the ip address.
   *
   * @param {number} [model.entityAcl] Gets or sets the entity acl.
   *
   * @param {number} [model.attachmentAcl] Gets or sets the attachment acl.
   *
   * @param {number} [model.noteAcl] Gets or sets the note acl.
   *
   * @param {number} [model.entityFeature] Gets or sets the entity feature.
   *
   * @param {number} [model.attachmentFeature] Gets or sets the attachment
   * feature.
   *
   * @param {number} [model.noteFeature] Gets or sets the note feature.
   *
   * @param {string} [model.adminMask] Gets or sets the admin mask. Possible
   * values include: 'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin',
   * 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
   * 'ApplicationAdmin'
   *
   * @param {string} [model.address] Gets or sets the address.
   *
   * @param {number} [model.reservedInt1] Gets or sets the reserved int1.
   *
   * @param {number} [model.reservedInt2] Gets or sets the reserved int2.
   *
   * @param {number} [model.reservedDouble1] Gets or sets the reserved double1.
   *
   * @param {number} [model.reservedDouble2] Gets or sets the reserved double2.
   *
   * @param {string} [model.reservedString1] Gets or sets the reserved string1.
   *
   * @param {string} [model.reservedString2] Gets or sets the reserved string2.
   *
   * @param {date} [model.userExpiration] Gets or sets the user expiration.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateUser(id: number, model: models.UserBase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateUser(id: number, model: models.UserBase, callback: ServiceCallback<any>): void;
  updateUser(id: number, model: models.UserBase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deactivates a specified user and removes all user associations.
   *
   * @param {number} id The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteUserWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Deactivates a specified user and removes all user associations.
   *
   * @param {number} id The user identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUser(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  deleteUser(id: number, callback: ServiceCallback<any>): void;
  deleteUser(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a paged list of workflows.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {number} [options.entityType] Gets or sets the type of the entity.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {number} [options.sortBy] Gets or sets the column to order by.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getWorkflowsByFilterWithHttpOperationResponse(options?: { applicationID? : number, entityType? : number, name? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowModel[]>>;

  /**
   * @summary Gets a paged list of workflows.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.applicationID] Gets or sets the application
   * identifier.
   *
   * @param {number} [options.entityType] Gets or sets the type of the entity.
   *
   * @param {string} [options.name] Gets or sets the name.
   *
   * @param {number} [options.page] Gets or sets the page number.
   *
   * @param {number} [options.pageSize] Gets or sets the size of the page.
   *
   * @param {string} [options.sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   *
   * @param {number} [options.sortBy] Gets or sets the column to order by.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getWorkflowsByFilter(options?: { applicationID? : number, entityType? : number, name? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowModel[]>;
  getWorkflowsByFilter(callback: ServiceCallback<models.WorkflowModel[]>): void;
  getWorkflowsByFilter(options: { applicationID? : number, entityType? : number, name? : string, page? : number, pageSize? : number, sortOrder? : string, sortBy? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowModel[]>): void;


  /**
   * @summary Gets a single workflow based on its unique identifier.
   *
   * @param {number} id The workflow identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WorkflowModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getWorkflowByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowModel>>;

  /**
   * @summary Gets a single workflow based on its unique identifier.
   *
   * @param {number} id The workflow identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {WorkflowModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {WorkflowModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WorkflowModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getWorkflowById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowModel>;
  getWorkflowById(id: number, callback: ServiceCallback<models.WorkflowModel>): void;
  getWorkflowById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowModel>): void;


  /**
   * @summary Gets queues for a specific workflow.
   *
   * @param {number} id The workflow identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getWorkflowQueuesByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowQueueModel[]>>;

  /**
   * @summary Gets queues for a specific workflow.
   *
   * @param {number} id The workflow identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getWorkflowQueuesById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowQueueModel[]>;
  getWorkflowQueuesById(id: number, callback: ServiceCallback<models.WorkflowQueueModel[]>): void;
  getWorkflowQueuesById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowQueueModel[]>): void;


  /**
   * @summary Gets a single entity template definition completed with all
   * profiles definitions as XML entity definition.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<String>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getXMLTemplateByTypeWithHttpOperationResponse(type: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

  /**
   * @summary Gets a single entity template definition completed with all
   * profiles definitions as XML entity definition.
   *
   * @param {number} type The unique template type.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {String} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {String} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getXMLTemplateByType(type: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
  getXMLTemplateByType(type: number, callback: ServiceCallback<string>): void;
  getXMLTemplateByType(type: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


  /**
   * @summary Creates a new entity template definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<String>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createXMLTemplateWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

  /**
   * @summary Creates a new entity template definition.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {String} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {String} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createXMLTemplate(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
  createXMLTemplate(callback: ServiceCallback<string>): void;
  createXMLTemplate(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

export = SoftheonEnterpriseAPI;
