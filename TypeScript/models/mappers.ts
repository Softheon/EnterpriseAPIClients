/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


export const WorkflowActionModel = {
  required: false,
  serializedName: 'WorkflowActionModel',
  type: {
    name: 'Composite',
    className: 'WorkflowActionModel',
    modelProperties: {
      taskID: {
        required: false,
        serializedName: 'TaskID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      targetID: {
        required: false,
        serializedName: 'TargetID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      queueName: {
        required: false,
        serializedName: 'QueueName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      source: {
        required: false,
        serializedName: 'Source',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      computer: {
        required: false,
        serializedName: 'Computer',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      iPAddress: {
        required: false,
        serializedName: 'IPAddress',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const WorkflowActionRouteModel = {
  required: false,
  serializedName: 'WorkflowActionRouteModel',
  type: {
    name: 'Composite',
    className: 'WorkflowActionRouteModel',
    modelProperties: {
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        type: {
          name: 'Number'
        }
      },
      keepOriginalTask: {
        required: false,
        serializedName: 'KeepOriginalTask',
        type: {
          name: 'Boolean'
        }
      },
      taskID: {
        required: false,
        serializedName: 'TaskID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      targetID: {
        required: false,
        serializedName: 'TargetID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      queueName: {
        required: false,
        serializedName: 'QueueName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      source: {
        required: false,
        serializedName: 'Source',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      computer: {
        required: false,
        serializedName: 'Computer',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      iPAddress: {
        required: false,
        serializedName: 'IPAddress',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const WorkflowActionInitializeModel = {
  required: false,
  serializedName: 'WorkflowActionInitializeModel',
  type: {
    name: 'Composite',
    className: 'WorkflowActionInitializeModel',
    modelProperties: {
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      queueID: {
        required: false,
        serializedName: 'QueueID',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'numberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      },
      queueName: {
        required: false,
        serializedName: 'QueueName',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      source: {
        required: false,
        serializedName: 'Source',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      computer: {
        required: false,
        serializedName: 'Computer',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      iPAddress: {
        required: false,
        serializedName: 'IPAddress',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ApplicationModel = {
  required: false,
  serializedName: 'ApplicationModel',
  type: {
    name: 'Composite',
    className: 'ApplicationModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetAssociationRequestModel = {
  required: false,
  serializedName: 'GetAssociationRequestModel',
  type: {
    name: 'Composite',
    className: 'GetAssociationRequestModel',
    modelProperties: {
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GroupDrawerModel = {
  required: false,
  serializedName: 'GroupDrawerModel',
  type: {
    name: 'Composite',
    className: 'GroupDrawerModel',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'GroupID',
        type: {
          name: 'Number'
        }
      },
      groupName: {
        required: false,
        serializedName: 'GroupName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      drawerName: {
        required: false,
        serializedName: 'DrawerName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const GroupUserModel = {
  required: false,
  serializedName: 'GroupUserModel',
  type: {
    name: 'Composite',
    className: 'GroupUserModel',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'GroupID',
        type: {
          name: 'Number'
        }
      },
      groupName: {
        required: false,
        serializedName: 'GroupName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      userFullName: {
        required: false,
        serializedName: 'UserFullName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GroupQueueModel = {
  required: false,
  serializedName: 'GroupQueueModel',
  type: {
    name: 'Composite',
    className: 'GroupQueueModel',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'GroupID',
        type: {
          name: 'Number'
        }
      },
      groupName: {
        required: false,
        serializedName: 'GroupName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      queueID: {
        required: false,
        serializedName: 'QueueID',
        type: {
          name: 'Number'
        }
      },
      queueName: {
        required: false,
        serializedName: 'QueueName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const GroupApplicationModel = {
  required: false,
  serializedName: 'GroupApplicationModel',
  type: {
    name: 'Composite',
    className: 'GroupApplicationModel',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'GroupID',
        type: {
          name: 'Number'
        }
      },
      groupName: {
        required: false,
        serializedName: 'GroupName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      applicationID: {
        required: false,
        serializedName: 'ApplicationID',
        type: {
          name: 'Number'
        }
      },
      applicationName: {
        required: false,
        serializedName: 'ApplicationName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const UserDrawerModel = {
  required: false,
  serializedName: 'UserDrawerModel',
  type: {
    name: 'Composite',
    className: 'UserDrawerModel',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      userFullName: {
        required: false,
        serializedName: 'UserFullName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      drawerName: {
        required: false,
        serializedName: 'DrawerName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const UserQueueModel = {
  required: false,
  serializedName: 'UserQueueModel',
  type: {
    name: 'Composite',
    className: 'UserQueueModel',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      userFullName: {
        required: false,
        serializedName: 'UserFullName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      queueID: {
        required: false,
        serializedName: 'QueueID',
        type: {
          name: 'Number'
        }
      },
      queueName: {
        required: false,
        serializedName: 'QueueName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const UserApplicationModel = {
  required: false,
  serializedName: 'UserApplicationModel',
  type: {
    name: 'Composite',
    className: 'UserApplicationModel',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      userFullName: {
        required: false,
        serializedName: 'UserFullName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      applicationID: {
        required: false,
        serializedName: 'ApplicationID',
        type: {
          name: 'Number'
        }
      },
      applicationName: {
        required: false,
        serializedName: 'ApplicationName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const GetAttachmentRequestModel = {
  required: false,
  serializedName: 'GetAttachmentRequestModel',
  type: {
    name: 'Composite',
    className: 'GetAttachmentRequestModel',
    modelProperties: {
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      extension: {
        required: false,
        serializedName: 'Extension',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      minSize: {
        required: false,
        serializedName: 'MinSize',
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      maxSize: {
        required: false,
        serializedName: 'MaxSize',
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minInsertionTime: {
        required: false,
        serializedName: 'MinInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      maxInsertionTime: {
        required: false,
        serializedName: 'MaxInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'MinModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'MaxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const AttachmentModel = {
  required: false,
  serializedName: 'AttachmentModel',
  type: {
    name: 'Composite',
    className: 'AttachmentModel',
    modelProperties: {
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      size: {
        required: false,
        serializedName: 'Size',
        type: {
          name: 'Number'
        }
      },
      extension: {
        required: false,
        serializedName: 'Extension',
        type: {
          name: 'String'
        }
      },
      fileName: {
        required: false,
        serializedName: 'FileName',
        type: {
          name: 'String'
        }
      },
      version: {
        required: false,
        serializedName: 'Version',
        type: {
          name: 'Number'
        }
      },
      release: {
        required: false,
        serializedName: 'Release',
        type: {
          name: 'Number'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'Number'
        }
      },
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        type: {
          name: 'Number'
        }
      },
      ownerUserFullName: {
        required: false,
        serializedName: 'OwnerUserFullName',
        type: {
          name: 'String'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        type: {
          name: 'Number'
        }
      },
      ownerGroupName: {
        required: false,
        serializedName: 'OwnerGroupName',
        type: {
          name: 'String'
        }
      },
      includerUserID: {
        required: false,
        serializedName: 'IncluderUserID',
        type: {
          name: 'Number'
        }
      },
      includerUserFullName: {
        required: false,
        serializedName: 'IncluderUserFullName',
        type: {
          name: 'String'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        type: {
          name: 'Number'
        }
      },
      modifierUserFullName: {
        required: false,
        serializedName: 'ModifierUserFullName',
        type: {
          name: 'String'
        }
      },
      insertionTime: {
        required: false,
        serializedName: 'InsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      classProperty: {
        required: false,
        serializedName: 'Class',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      pageNumber: {
        required: false,
        serializedName: 'PageNumber',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const UpdateAttachmentRequestModel = {
  required: false,
  serializedName: 'UpdateAttachmentRequestModel',
  type: {
    name: 'Composite',
    className: 'UpdateAttachmentRequestModel',
    modelProperties: {
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'Number'
        }
      },
      classProperty: {
        required: false,
        serializedName: 'Class',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      pageNumber: {
        required: false,
        serializedName: 'PageNumber',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetAttachmentVersionRequestModel = {
  required: false,
  serializedName: 'GetAttachmentVersionRequestModel',
  type: {
    name: 'Composite',
    className: 'GetAttachmentVersionRequestModel',
    modelProperties: {
      version: {
        required: false,
        serializedName: 'Version',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      accessorUserID: {
        required: false,
        serializedName: 'AccessorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minAccessTime: {
        required: false,
        serializedName: 'MinAccessTime',
        type: {
          name: 'DateTime'
        }
      },
      maxAccessTime: {
        required: false,
        serializedName: 'MaxAccessTime',
        type: {
          name: 'DateTime'
        }
      },
      minCreationTime: {
        required: false,
        serializedName: 'MinCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxCreationTime: {
        required: false,
        serializedName: 'MaxCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'MinModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'MaxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const AttachmentVersionModel = {
  required: false,
  serializedName: 'AttachmentVersionModel',
  type: {
    name: 'Composite',
    className: 'AttachmentVersionModel',
    modelProperties: {
      version: {
        required: false,
        serializedName: 'Version',
        type: {
          name: 'Number'
        }
      },
      attachmentID: {
        required: false,
        serializedName: 'AttachmentID',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        type: {
          name: 'Number'
        }
      },
      accessorUserID: {
        required: false,
        serializedName: 'AccessorUserID',
        type: {
          name: 'Number'
        }
      },
      accessTime: {
        required: false,
        serializedName: 'AccessTime',
        type: {
          name: 'DateTime'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'CreationTime',
        type: {
          name: 'DateTime'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      comment: {
        required: false,
        serializedName: 'Comment',
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedInt3: {
        required: false,
        serializedName: 'ReservedInt3',
        type: {
          name: 'Number'
        }
      },
      reservedInt4: {
        required: false,
        serializedName: 'ReservedInt4',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const DrawerModel = {
  required: false,
  serializedName: 'DrawerModel',
  type: {
    name: 'Composite',
    className: 'DrawerModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      cabinetID: {
        required: false,
        serializedName: 'CabinetID',
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      userFullName: {
        required: false,
        serializedName: 'UserFullName',
        type: {
          name: 'String'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      edition: {
        required: false,
        serializedName: 'Edition',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'Number'
        }
      },
      entityFeature: {
        required: false,
        serializedName: 'EntityFeature',
        type: {
          name: 'Number'
        }
      },
      attachmentFeature: {
        required: false,
        serializedName: 'AttachmentFeature',
        type: {
          name: 'Number'
        }
      },
      noteFeature: {
        required: false,
        serializedName: 'NoteFeature',
        type: {
          name: 'Number'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const DrawerBase = {
  required: false,
  serializedName: 'DrawerBase',
  type: {
    name: 'Composite',
    className: 'DrawerBase',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      edition: {
        required: false,
        serializedName: 'Edition',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'Number'
        }
      },
      entityFeature: {
        required: false,
        serializedName: 'EntityFeature',
        type: {
          name: 'Number'
        }
      },
      attachmentFeature: {
        required: false,
        serializedName: 'AttachmentFeature',
        type: {
          name: 'Number'
        }
      },
      noteFeature: {
        required: false,
        serializedName: 'NoteFeature',
        type: {
          name: 'Number'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetProfileFieldRequestModel = {
  required: false,
  serializedName: 'GetProfileFieldRequestModel',
  type: {
    name: 'Composite',
    className: 'GetProfileFieldRequestModel',
    modelProperties: {
      profileType: {
        required: true,
        serializedName: 'ProfileType',
        type: {
          name: 'Number'
        }
      },
      fieldType: {
        required: true,
        serializedName: 'FieldType',
        type: {
          name: 'String'
        }
      },
      fieldIndex: {
        required: true,
        serializedName: 'FieldIndex',
        type: {
          name: 'Number'
        }
      },
      fieldValue: {
        required: true,
        serializedName: 'FieldValue',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetEntityRequestModel = {
  required: false,
  serializedName: 'GetEntityRequestModel',
  type: {
    name: 'Composite',
    className: 'GetEntityRequestModel',
    modelProperties: {
      drawerID: {
        required: true,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      referenceCount: {
        required: false,
        serializedName: 'ReferenceCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      attachCount: {
        required: false,
        serializedName: 'AttachCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      noteCount: {
        required: false,
        serializedName: 'NoteCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      creatorGroupID: {
        required: false,
        serializedName: 'CreatorGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierGroupID: {
        required: false,
        serializedName: 'ModifierGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      minCreationTime: {
        required: false,
        serializedName: 'MinCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxCreationTime: {
        required: false,
        serializedName: 'MaxCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'MinModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'MaxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      metadata: {
        required: false,
        serializedName: 'Metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'GetProfileFieldRequestModelElementType',
              type: {
                name: 'Composite',
                className: 'GetProfileFieldRequestModel'
              }
          }
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetEntityBaseResponse = {
  required: false,
  serializedName: 'GetEntityBaseResponse',
  type: {
    name: 'Composite',
    className: 'GetEntityBaseResponse',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'Number'
        }
      },
      subtype: {
        required: false,
        serializedName: 'Subtype',
        type: {
          name: 'Number'
        }
      },
      age: {
        required: false,
        serializedName: 'Age',
        type: {
          name: 'Number'
        }
      },
      referenceCount: {
        required: false,
        serializedName: 'ReferenceCount',
        type: {
          name: 'Number'
        }
      },
      accessCount: {
        required: false,
        serializedName: 'AccessCount',
        type: {
          name: 'Number'
        }
      },
      profileCount: {
        required: false,
        serializedName: 'ProfileCount',
        type: {
          name: 'Number'
        }
      },
      attachCount: {
        required: false,
        serializedName: 'AttachCount',
        type: {
          name: 'Number'
        }
      },
      noteCount: {
        required: false,
        serializedName: 'NoteCount',
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        type: {
          name: 'Number'
        }
      },
      ownerUserFullName: {
        required: false,
        serializedName: 'OwnerUserFullName',
        type: {
          name: 'String'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        type: {
          name: 'Number'
        }
      },
      ownerGroupName: {
        required: false,
        serializedName: 'OwnerGroupName',
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        type: {
          name: 'Number'
        }
      },
      creatorUserFullName: {
        required: false,
        serializedName: 'CreatorUserFullName',
        type: {
          name: 'String'
        }
      },
      creatorGroupID: {
        required: false,
        serializedName: 'CreatorGroupID',
        type: {
          name: 'Number'
        }
      },
      creatorGroupName: {
        required: false,
        serializedName: 'CreatorGroupName',
        type: {
          name: 'String'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        type: {
          name: 'Number'
        }
      },
      modifierUserFullName: {
        required: false,
        serializedName: 'ModifierUserFullName',
        type: {
          name: 'String'
        }
      },
      modifierGroupID: {
        required: false,
        serializedName: 'ModifierGroupID',
        type: {
          name: 'Number'
        }
      },
      modifierGroupName: {
        required: false,
        serializedName: 'ModifierGroupName',
        type: {
          name: 'String'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'CreationTime',
        type: {
          name: 'DateTime'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      accessTime: {
        required: false,
        serializedName: 'AccessTime',
        type: {
          name: 'DateTime'
        }
      },
      resolutionTime: {
        required: false,
        serializedName: 'ResolutionTime',
        type: {
          name: 'DateTime'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'Number'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ExtensionModel = {
  required: false,
  serializedName: 'ExtensionModel',
  type: {
    name: 'Composite',
    className: 'ExtensionModel',
    modelProperties: {
      updateAction: {
        required: false,
        serializedName: 'UpdateAction',
        type: {
          name: 'String'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        type: {
          name: 'Number'
        }
      },
      profileID: {
        required: false,
        serializedName: 'ProfileID',
        type: {
          name: 'Number'
        }
      },
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'Number'
        }
      },
      rowNumber: {
        required: false,
        serializedName: 'RowNumber',
        type: {
          name: 'Number'
        }
      },
      strings: {
        required: false,
        serializedName: 'Strings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      integers: {
        required: false,
        serializedName: 'Integers',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'numberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      },
      doubles: {
        required: false,
        serializedName: 'Doubles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'numberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      },
      dates: {
        required: false,
        serializedName: 'Dates',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DateElementType',
              type: {
                name: 'DateTime'
              }
          }
        }
      }
    }
  }
};

export const ProfileModel = {
  required: false,
  serializedName: 'ProfileModel',
  type: {
    name: 'Composite',
    className: 'ProfileModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'Number'
        }
      },
      extensionCount: {
        required: false,
        serializedName: 'ExtensionCount',
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        type: {
          name: 'Number'
        }
      },
      ownerUserFullName: {
        required: false,
        serializedName: 'OwnerUserFullName',
        type: {
          name: 'String'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        type: {
          name: 'Number'
        }
      },
      ownerGroupName: {
        required: false,
        serializedName: 'OwnerGroupName',
        type: {
          name: 'String'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        type: {
          name: 'Number'
        }
      },
      modifierUserFullName: {
        required: false,
        serializedName: 'ModifierUserFullName',
        type: {
          name: 'String'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      strings: {
        required: false,
        serializedName: 'Strings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      integers: {
        required: false,
        serializedName: 'Integers',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'numberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      },
      doubles: {
        required: false,
        serializedName: 'Doubles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'numberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      },
      dates: {
        required: false,
        serializedName: 'Dates',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DateElementType',
              type: {
                name: 'DateTime'
              }
          }
        }
      },
      extensions: {
        required: false,
        serializedName: 'Extensions',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ExtensionModelElementType',
              type: {
                name: 'Composite',
                className: 'ExtensionModel'
              }
          }
        }
      }
    }
  }
};

export const EntityModel = {
  required: false,
  serializedName: 'EntityModel',
  type: {
    name: 'Composite',
    className: 'EntityModel',
    modelProperties: {
      profiles: {
        required: false,
        serializedName: 'Profiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProfileModelElementType',
              type: {
                name: 'Composite',
                className: 'ProfileModel'
              }
          }
        }
      },
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'Number'
        }
      },
      subtype: {
        required: false,
        serializedName: 'Subtype',
        type: {
          name: 'Number'
        }
      },
      age: {
        required: false,
        serializedName: 'Age',
        type: {
          name: 'Number'
        }
      },
      referenceCount: {
        required: false,
        serializedName: 'ReferenceCount',
        type: {
          name: 'Number'
        }
      },
      accessCount: {
        required: false,
        serializedName: 'AccessCount',
        type: {
          name: 'Number'
        }
      },
      profileCount: {
        required: false,
        serializedName: 'ProfileCount',
        type: {
          name: 'Number'
        }
      },
      attachCount: {
        required: false,
        serializedName: 'AttachCount',
        type: {
          name: 'Number'
        }
      },
      noteCount: {
        required: false,
        serializedName: 'NoteCount',
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        type: {
          name: 'Number'
        }
      },
      ownerUserFullName: {
        required: false,
        serializedName: 'OwnerUserFullName',
        type: {
          name: 'String'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        type: {
          name: 'Number'
        }
      },
      ownerGroupName: {
        required: false,
        serializedName: 'OwnerGroupName',
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        type: {
          name: 'Number'
        }
      },
      creatorUserFullName: {
        required: false,
        serializedName: 'CreatorUserFullName',
        type: {
          name: 'String'
        }
      },
      creatorGroupID: {
        required: false,
        serializedName: 'CreatorGroupID',
        type: {
          name: 'Number'
        }
      },
      creatorGroupName: {
        required: false,
        serializedName: 'CreatorGroupName',
        type: {
          name: 'String'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        type: {
          name: 'Number'
        }
      },
      modifierUserFullName: {
        required: false,
        serializedName: 'ModifierUserFullName',
        type: {
          name: 'String'
        }
      },
      modifierGroupID: {
        required: false,
        serializedName: 'ModifierGroupID',
        type: {
          name: 'Number'
        }
      },
      modifierGroupName: {
        required: false,
        serializedName: 'ModifierGroupName',
        type: {
          name: 'String'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'CreationTime',
        type: {
          name: 'DateTime'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      accessTime: {
        required: false,
        serializedName: 'AccessTime',
        type: {
          name: 'DateTime'
        }
      },
      resolutionTime: {
        required: false,
        serializedName: 'ResolutionTime',
        type: {
          name: 'DateTime'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'Number'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const UpdateEntityRequestModel = {
  required: false,
  serializedName: 'UpdateEntityRequestModel',
  type: {
    name: 'Composite',
    className: 'UpdateEntityRequestModel',
    modelProperties: {
      profiles: {
        required: false,
        serializedName: 'Profiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProfileModelElementType',
              type: {
                name: 'Composite',
                className: 'ProfileModel'
              }
          }
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InsertEntityRequestModel = {
  required: false,
  serializedName: 'InsertEntityRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertEntityRequestModel',
    modelProperties: {
      profiles: {
        required: false,
        serializedName: 'Profiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProfileModelElementType',
              type: {
                name: 'Composite',
                className: 'ProfileModel'
              }
          }
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const EntityContentModel = {
  required: false,
  serializedName: 'EntityContentModel',
  type: {
    name: 'Composite',
    className: 'EntityContentModel',
    modelProperties: {
      entityContent: {
        required: false,
        serializedName: 'EntityContent',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetEventRequestModel = {
  required: false,
  serializedName: 'GetEventRequestModel',
  type: {
    name: 'Composite',
    className: 'GetEventRequestModel',
    modelProperties: {
      drawerID: {
        required: true,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: true,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      minEventTime: {
        required: false,
        serializedName: 'MinEventTime',
        type: {
          name: 'DateTime'
        }
      },
      maxEventTime: {
        required: false,
        serializedName: 'MaxEventTime',
        type: {
          name: 'DateTime'
        }
      },
      eventUserID: {
        required: false,
        serializedName: 'EventUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      eventGroupID: {
        required: false,
        serializedName: 'EventGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'String'
        }
      },
      classProperty: {
        required: false,
        serializedName: 'Class',
        type: {
          name: 'String'
        }
      },
      operation: {
        required: false,
        serializedName: 'Operation',
        type: {
          name: 'String'
        }
      },
      minProcessingTime: {
        required: false,
        serializedName: 'MinProcessingTime',
        type: {
          name: 'Number'
        }
      },
      maxProcessingTime: {
        required: false,
        serializedName: 'MaxProcessingTime',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const EventModel = {
  required: false,
  serializedName: 'EventModel',
  type: {
    name: 'Composite',
    className: 'EventModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      eventTime: {
        required: false,
        serializedName: 'EventTime',
        type: {
          name: 'DateTime'
        }
      },
      eventUserID: {
        required: false,
        serializedName: 'EventUserID',
        type: {
          name: 'Number'
        }
      },
      eventUserFullName: {
        required: false,
        serializedName: 'EventUserFullName',
        type: {
          name: 'String'
        }
      },
      eventGroupID: {
        required: false,
        serializedName: 'EventGroupID',
        type: {
          name: 'Number'
        }
      },
      eventGroupName: {
        required: false,
        serializedName: 'EventGroupName',
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'String'
        }
      },
      classProperty: {
        required: false,
        serializedName: 'Class',
        type: {
          name: 'String'
        }
      },
      operation: {
        required: false,
        serializedName: 'Operation',
        type: {
          name: 'String'
        }
      },
      source: {
        required: false,
        serializedName: 'Source',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      computer: {
        required: false,
        serializedName: 'Computer',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      iPAddress: {
        required: false,
        serializedName: 'IPAddress',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      processTime: {
        required: false,
        serializedName: 'ProcessTime',
        type: {
          name: 'Number'
        }
      },
      details: {
        required: false,
        serializedName: 'Details',
        type: {
          name: 'Object'
        }
      }
    }
  }
};

export const GetExtensionRequestModel = {
  required: false,
  serializedName: 'GetExtensionRequestModel',
  type: {
    name: 'Composite',
    className: 'GetExtensionRequestModel',
    modelProperties: {
      drawerID: {
        required: true,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: true,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      profileID: {
        required: true,
        serializedName: 'ProfileID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      id: {
        required: false,
        serializedName: 'ID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetFlowRequestModel = {
  required: false,
  serializedName: 'GetFlowRequestModel',
  type: {
    name: 'Composite',
    className: 'GetFlowRequestModel',
    modelProperties: {
      drawerID: {
        required: true,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: true,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      queueID: {
        required: false,
        serializedName: 'QueueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minWorkflowTime: {
        required: false,
        serializedName: 'MinWorkflowTime',
        type: {
          name: 'DateTime'
        }
      },
      maxWorkflowTime: {
        required: false,
        serializedName: 'MaxWorkflowTime',
        type: {
          name: 'DateTime'
        }
      },
      minInsertionTime: {
        required: false,
        serializedName: 'MinInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      maxInsertionTime: {
        required: false,
        serializedName: 'MaxInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      workflowUserID: {
        required: false,
        serializedName: 'WorkflowUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      workflowGroupID: {
        required: false,
        serializedName: 'WorkflowGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      operation: {
        required: false,
        serializedName: 'Operation',
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        serializedName: 'Status',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      minIndex1: {
        required: false,
        serializedName: 'MinIndex1',
        type: {
          name: 'Number'
        }
      },
      maxIndex1: {
        required: false,
        serializedName: 'MaxIndex1',
        type: {
          name: 'Number'
        }
      },
      minIndex2: {
        required: false,
        serializedName: 'MinIndex2',
        type: {
          name: 'Number'
        }
      },
      maxIndex2: {
        required: false,
        serializedName: 'MaxIndex2',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const FlowModel = {
  required: false,
  serializedName: 'FlowModel',
  type: {
    name: 'Composite',
    className: 'FlowModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      queueID: {
        required: false,
        serializedName: 'QueueID',
        type: {
          name: 'Number'
        }
      },
      workflowTime: {
        required: false,
        serializedName: 'WorkflowTime',
        type: {
          name: 'DateTime'
        }
      },
      insertionTime: {
        required: false,
        serializedName: 'InsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      workflowUserID: {
        required: false,
        serializedName: 'WorkflowUserID',
        type: {
          name: 'Number'
        }
      },
      workflowUserFullName: {
        required: false,
        serializedName: 'WorkflowUserFullName',
        type: {
          name: 'String'
        }
      },
      workflowGroupID: {
        required: false,
        serializedName: 'WorkflowGroupID',
        type: {
          name: 'Number'
        }
      },
      workflowGroupName: {
        required: false,
        serializedName: 'WorkflowGroupName',
        type: {
          name: 'String'
        }
      },
      operation: {
        required: false,
        serializedName: 'Operation',
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        serializedName: 'Status',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      source: {
        required: false,
        serializedName: 'Source',
        type: {
          name: 'String'
        }
      },
      iPAddress: {
        required: false,
        serializedName: 'IPAddress',
        type: {
          name: 'String'
        }
      },
      computer: {
        required: false,
        serializedName: 'Computer',
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        type: {
          name: 'String'
        }
      },
      index1: {
        required: false,
        serializedName: 'Index1',
        type: {
          name: 'Number'
        }
      },
      index2: {
        required: false,
        serializedName: 'Index2',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const GetDefinitionModel = {
  required: false,
  serializedName: 'GetDefinitionModel',
  type: {
    name: 'Composite',
    className: 'GetDefinitionModel',
    modelProperties: {
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const ItemDefinitionModel = {
  required: false,
  serializedName: 'ItemDefinitionModel',
  type: {
    name: 'Composite',
    className: 'ItemDefinitionModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'String'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      },
      value: {
        required: true,
        serializedName: 'Value',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: true,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const FieldDefinitionModel = {
  required: false,
  serializedName: 'FieldDefinitionModel',
  type: {
    name: 'Composite',
    className: 'FieldDefinitionModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'String'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      },
      xmlTag: {
        required: false,
        serializedName: 'XmlTag',
        type: {
          name: 'String'
        }
      },
      type: {
        required: true,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      index: {
        required: true,
        serializedName: 'Index',
        constraints: {
          InclusiveMaximum: 32,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      position: {
        required: true,
        serializedName: 'Position',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        type: {
          name: 'String'
        }
      },
      isEnabled: {
        required: false,
        serializedName: 'IsEnabled',
        type: {
          name: 'Boolean'
        }
      },
      isRequired: {
        required: false,
        serializedName: 'IsRequired',
        type: {
          name: 'String'
        }
      },
      isProtected: {
        required: false,
        serializedName: 'IsProtected',
        type: {
          name: 'Boolean'
        }
      },
      default: {
        required: false,
        serializedName: 'Default',
        type: {
          name: 'String'
        }
      },
      mask: {
        required: false,
        serializedName: 'Mask',
        type: {
          name: 'String'
        }
      },
      length: {
        required: false,
        serializedName: 'Length',
        type: {
          name: 'Number'
        }
      },
      isMultiline: {
        required: false,
        serializedName: 'IsMultiline',
        type: {
          name: 'Boolean'
        }
      },
      format: {
        required: false,
        serializedName: 'Format',
        type: {
          name: 'String'
        }
      },
      isSorted: {
        required: false,
        serializedName: 'IsSorted',
        type: {
          name: 'Boolean'
        }
      },
      select: {
        required: false,
        serializedName: 'Select',
        type: {
          name: 'Number'
        }
      },
      formula: {
        required: false,
        serializedName: 'Formula',
        type: {
          name: 'String'
        }
      },
      hasValidation: {
        required: false,
        serializedName: 'HasValidation',
        type: {
          name: 'Boolean'
        }
      },
      validationColumn: {
        required: false,
        serializedName: 'ValidationColumn',
        type: {
          name: 'String'
        }
      },
      foundOperation: {
        required: false,
        serializedName: 'FoundOperation',
        type: {
          name: 'Number'
        }
      },
      notFoundOperation: {
        required: false,
        serializedName: 'NotFoundOperation',
        type: {
          name: 'Number'
        }
      },
      sampleImage: {
        required: false,
        serializedName: 'SampleImage',
        type: {
          name: 'Number'
        }
      },
      lookup: {
        required: false,
        serializedName: 'Lookup',
        type: {
          name: 'String'
        }
      },
      hasLink: {
        required: false,
        serializedName: 'HasLink',
        type: {
          name: 'Boolean'
        }
      },
      linkEntityType: {
        required: false,
        serializedName: 'LinkEntityType',
        type: {
          name: 'Number'
        }
      },
      linkProfile: {
        required: false,
        serializedName: 'LinkProfile',
        type: {
          name: 'String'
        }
      },
      linkField: {
        required: false,
        serializedName: 'LinkField',
        type: {
          name: 'String'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedBit1: {
        required: false,
        serializedName: 'ReservedBit1',
        type: {
          name: 'Boolean'
        }
      },
      reservedBit2: {
        required: false,
        serializedName: 'ReservedBit2',
        type: {
          name: 'Boolean'
        }
      },
      items: {
        required: false,
        serializedName: 'Items',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ItemDefinitionModelElementType',
              type: {
                name: 'Composite',
                className: 'ItemDefinitionModel'
              }
          }
        }
      },
      fields: {
        required: false,
        serializedName: 'Fields',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'FieldDefinitionModelElementType',
              type: {
                name: 'Composite',
                className: 'FieldDefinitionModel'
              }
          }
        }
      }
    }
  }
};

export const ProfileDefinitionModel = {
  required: false,
  serializedName: 'ProfileDefinitionModel',
  type: {
    name: 'Composite',
    className: 'ProfileDefinitionModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'String'
        }
      },
      type: {
        required: true,
        serializedName: 'Type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      fields: {
        required: false,
        serializedName: 'Fields',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'FieldDefinitionModelElementType',
              type: {
                name: 'Composite',
                className: 'FieldDefinitionModel'
              }
          }
        }
      }
    }
  }
};

export const EntityDefinitionModel = {
  required: false,
  serializedName: 'EntityDefinitionModel',
  type: {
    name: 'Composite',
    className: 'EntityDefinitionModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'String'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'CreationTime',
        type: {
          name: 'DateTime'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      type: {
        required: true,
        serializedName: 'Type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      category: {
        required: true,
        serializedName: 'Category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      hasClass: {
        required: false,
        serializedName: 'HasClass',
        type: {
          name: 'Boolean'
        }
      },
      hasSecurity: {
        required: false,
        serializedName: 'HasSecurity',
        type: {
          name: 'Boolean'
        }
      },
      hasProfiles: {
        required: false,
        serializedName: 'HasProfiles',
        type: {
          name: 'Boolean'
        }
      },
      hasItems: {
        required: false,
        serializedName: 'HasItems',
        type: {
          name: 'Boolean'
        }
      },
      smallImage: {
        required: false,
        serializedName: 'SmallImage',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      largeImage: {
        required: false,
        serializedName: 'LargeImage',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      hasAudit: {
        required: false,
        serializedName: 'HasAudit',
        type: {
          name: 'Boolean'
        }
      },
      allowsViewImages: {
        required: false,
        serializedName: 'AllowsViewImages',
        type: {
          name: 'Boolean'
        }
      },
      isReviewState: {
        required: false,
        serializedName: 'IsReviewState',
        type: {
          name: 'Boolean'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      drawers: {
        required: false,
        serializedName: 'Drawers',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'numberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      },
      profiles: {
        required: false,
        serializedName: 'Profiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProfileDefinitionModelElementType',
              type: {
                name: 'Composite',
                className: 'ProfileDefinitionModel'
              }
          }
        }
      }
    }
  }
};

export const EntityDefinitionBase = {
  required: false,
  serializedName: 'EntityDefinitionBase',
  type: {
    name: 'Composite',
    className: 'EntityDefinitionBase',
    modelProperties: {
      type: {
        required: true,
        serializedName: 'Type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      category: {
        required: true,
        serializedName: 'Category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      hasClass: {
        required: false,
        serializedName: 'HasClass',
        type: {
          name: 'Boolean'
        }
      },
      hasSecurity: {
        required: false,
        serializedName: 'HasSecurity',
        type: {
          name: 'Boolean'
        }
      },
      hasProfiles: {
        required: false,
        serializedName: 'HasProfiles',
        type: {
          name: 'Boolean'
        }
      },
      hasItems: {
        required: false,
        serializedName: 'HasItems',
        type: {
          name: 'Boolean'
        }
      },
      smallImage: {
        required: false,
        serializedName: 'SmallImage',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      largeImage: {
        required: false,
        serializedName: 'LargeImage',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      hasAudit: {
        required: false,
        serializedName: 'HasAudit',
        type: {
          name: 'Boolean'
        }
      },
      allowsViewImages: {
        required: false,
        serializedName: 'AllowsViewImages',
        type: {
          name: 'Boolean'
        }
      },
      isReviewState: {
        required: false,
        serializedName: 'IsReviewState',
        type: {
          name: 'Boolean'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      drawers: {
        required: false,
        serializedName: 'Drawers',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'numberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      },
      profiles: {
        required: false,
        serializedName: 'Profiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProfileDefinitionModelElementType',
              type: {
                name: 'Composite',
                className: 'ProfileDefinitionModel'
              }
          }
        }
      }
    }
  }
};

export const UpdateEntityDefinitionRequestModel = {
  required: false,
  serializedName: 'UpdateEntityDefinitionRequestModel',
  type: {
    name: 'Composite',
    className: 'UpdateEntityDefinitionRequestModel',
    modelProperties: {
      category: {
        required: false,
        serializedName: 'Category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      smallImage: {
        required: false,
        serializedName: 'SmallImage',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      largeImage: {
        required: false,
        serializedName: 'LargeImage',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      hasAudit: {
        required: false,
        serializedName: 'HasAudit',
        type: {
          name: 'Boolean'
        }
      },
      allowsViewImages: {
        required: false,
        serializedName: 'AllowsViewImages',
        type: {
          name: 'Boolean'
        }
      },
      isReviewState: {
        required: false,
        serializedName: 'IsReviewState',
        type: {
          name: 'Boolean'
        }
      },
      profiles: {
        required: false,
        serializedName: 'Profiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProfileDefinitionModelElementType',
              type: {
                name: 'Composite',
                className: 'ProfileDefinitionModel'
              }
          }
        }
      }
    }
  }
};

export const GetLookupFieldModel = {
  required: false,
  serializedName: 'GetLookupFieldModel',
  type: {
    name: 'Composite',
    className: 'GetLookupFieldModel',
    modelProperties: {
      columnName: {
        required: false,
        serializedName: 'ColumnName',
        type: {
          name: 'String'
        }
      },
      columnValue: {
        required: false,
        serializedName: 'ColumnValue',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetFieldValidationModel = {
  required: false,
  serializedName: 'GetFieldValidationModel',
  type: {
    name: 'Composite',
    className: 'GetFieldValidationModel',
    modelProperties: {
      sortColumn: {
        required: false,
        serializedName: 'SortColumn',
        type: {
          name: 'String'
        }
      },
      metadata: {
        required: false,
        serializedName: 'Metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'GetLookupFieldModelElementType',
              type: {
                name: 'Composite',
                className: 'GetLookupFieldModel'
              }
          }
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const LookupField = {
  required: false,
  serializedName: 'LookupField',
  type: {
    name: 'Composite',
    className: 'LookupField',
    modelProperties: {
      column: {
        required: false,
        serializedName: 'Column',
        type: {
          name: 'String'
        }
      },
      profileIndex: {
        required: false,
        serializedName: 'ProfileIndex',
        type: {
          name: 'Number'
        }
      },
      fieldIndex: {
        required: false,
        serializedName: 'FieldIndex',
        type: {
          name: 'Number'
        }
      },
      extensionIndex: {
        required: false,
        serializedName: 'ExtensionIndex',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const FieldValidationModel = {
  required: false,
  serializedName: 'FieldValidationModel',
  type: {
    name: 'Composite',
    className: 'FieldValidationModel',
    modelProperties: {
      lookup: {
        required: false,
        serializedName: 'Lookup',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'LookupFieldElementType',
              type: {
                name: 'Composite',
                className: 'LookupField'
              }
          }
        }
      },
      values: {
        required: false,
        serializedName: 'Values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ObjectElementType',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serializedName: 'stringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
          }
        }
      }
    }
  }
};

export const GetGroupRequestModel = {
  required: false,
  serializedName: 'GetGroupRequestModel',
  type: {
    name: 'Composite',
    className: 'GetGroupRequestModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GroupModel = {
  required: false,
  serializedName: 'GroupModel',
  type: {
    name: 'Composite',
    className: 'GroupModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      queueCount: {
        required: false,
        serializedName: 'QueueCount',
        type: {
          name: 'Number'
        }
      },
      userCount: {
        required: false,
        serializedName: 'UserCount',
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InsertGroupRequestModel = {
  required: false,
  serializedName: 'InsertGroupRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertGroupRequestModel',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GroupBase = {
  required: false,
  serializedName: 'GroupBase',
  type: {
    name: 'Composite',
    className: 'GroupBase',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetEntityLinkRequestModel = {
  required: false,
  serializedName: 'GetEntityLinkRequestModel',
  type: {
    name: 'Composite',
    className: 'GetEntityLinkRequestModel',
    modelProperties: {
      childEntityID: {
        required: false,
        serializedName: 'ChildEntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      childDrawerID: {
        required: false,
        serializedName: 'ChildDrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      childType: {
        required: false,
        serializedName: 'ChildType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minInsertionTime: {
        required: false,
        serializedName: 'MinInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      maxInsertionTime: {
        required: false,
        serializedName: 'MaxInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'MinModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'MaxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const EntityLinkModel = {
  required: false,
  serializedName: 'EntityLinkModel',
  type: {
    name: 'Composite',
    className: 'EntityLinkModel',
    modelProperties: {
      childDrawerID: {
        required: false,
        serializedName: 'ChildDrawerID',
        type: {
          name: 'Number'
        }
      },
      childEntityID: {
        required: false,
        serializedName: 'ChildEntityID',
        type: {
          name: 'Number'
        }
      },
      childType: {
        required: false,
        serializedName: 'ChildType',
        type: {
          name: 'Number'
        }
      },
      virtualName: {
        required: false,
        serializedName: 'VirtualName',
        type: {
          name: 'String'
        }
      },
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        type: {
          name: 'Number'
        }
      },
      ownerUserFullName: {
        required: false,
        serializedName: 'OwnerUserFullName',
        type: {
          name: 'String'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        type: {
          name: 'Number'
        }
      },
      ownerGroupName: {
        required: false,
        serializedName: 'OwnerGroupName',
        type: {
          name: 'String'
        }
      },
      includerUserID: {
        required: false,
        serializedName: 'IncluderUserID',
        type: {
          name: 'Number'
        }
      },
      includerUserFullName: {
        required: false,
        serializedName: 'IncluderUserFullName',
        type: {
          name: 'String'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        type: {
          name: 'Number'
        }
      },
      modifierUserFullName: {
        required: false,
        serializedName: 'ModifierUserFullName',
        type: {
          name: 'String'
        }
      },
      insertionTime: {
        required: false,
        serializedName: 'InsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      classProperty: {
        required: false,
        serializedName: 'Class',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      pageNumber: {
        required: false,
        serializedName: 'PageNumber',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const UpdateEntityLinkRequestModel = {
  required: false,
  serializedName: 'UpdateEntityLinkRequestModel',
  type: {
    name: 'Composite',
    className: 'UpdateEntityLinkRequestModel',
    modelProperties: {
      virtualName: {
        required: false,
        serializedName: 'VirtualName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      classProperty: {
        required: false,
        serializedName: 'Class',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      pageNumber: {
        required: false,
        serializedName: 'PageNumber',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InsertEntityLinkRequestModel = {
  required: false,
  serializedName: 'InsertEntityLinkRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertEntityLinkRequestModel',
    modelProperties: {
      classProperty: {
        required: false,
        serializedName: 'Class',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      pageNumber: {
        required: false,
        serializedName: 'PageNumber',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      childDrawerID: {
        required: false,
        serializedName: 'ChildDrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      childEntityID: {
        required: false,
        serializedName: 'ChildEntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      childType: {
        required: false,
        serializedName: 'ChildType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      virtualName: {
        required: false,
        serializedName: 'VirtualName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const LockModel = {
  required: false,
  serializedName: 'LockModel',
  type: {
    name: 'Composite',
    className: 'LockModel',
    modelProperties: {
      entityID: {
        required: false,
        serializedName: 'EntityID',
        type: {
          name: 'Number'
        }
      },
      sessionID: {
        required: false,
        serializedName: 'SessionID',
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        type: {
          name: 'Number'
        }
      },
      userFullName: {
        required: false,
        serializedName: 'UserFullName',
        type: {
          name: 'String'
        }
      },
      lockTime: {
        required: false,
        serializedName: 'LockTime',
        type: {
          name: 'DateTime'
        }
      },
      expirationTime: {
        required: false,
        serializedName: 'ExpirationTime',
        type: {
          name: 'DateTime'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      applicationName: {
        required: false,
        serializedName: 'ApplicationName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const UpdateLockRequestModel = {
  required: false,
  serializedName: 'UpdateLockRequestModel',
  type: {
    name: 'Composite',
    className: 'UpdateLockRequestModel',
    modelProperties: {
      expirationDuration: {
        required: false,
        serializedName: 'ExpirationDuration',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      applicationName: {
        required: false,
        serializedName: 'ApplicationName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetNoteRequestModel = {
  required: false,
  serializedName: 'GetNoteRequestModel',
  type: {
    name: 'Composite',
    className: 'GetNoteRequestModel',
    modelProperties: {
      drawerID: {
        required: true,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minCreationTime: {
        required: false,
        serializedName: 'MinCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxCreationTime: {
        required: false,
        serializedName: 'MaxCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'MinModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'MaxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      parentID: {
        required: false,
        serializedName: 'ParentID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const NoteModel = {
  required: false,
  serializedName: 'NoteModel',
  type: {
    name: 'Composite',
    className: 'NoteModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        type: {
          name: 'Number'
        }
      },
      ownerUserFullName: {
        required: false,
        serializedName: 'OwnerUserFullName',
        type: {
          name: 'String'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        type: {
          name: 'Number'
        }
      },
      ownerGroupName: {
        required: false,
        serializedName: 'OwnerGroupName',
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'CreatorUserID',
        type: {
          name: 'Number'
        }
      },
      creatorUserFullName: {
        required: false,
        serializedName: 'CreatorUserFullName',
        type: {
          name: 'String'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'ModifierUserID',
        type: {
          name: 'Number'
        }
      },
      modifierUserFullName: {
        required: false,
        serializedName: 'ModifierUserFullName',
        type: {
          name: 'String'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'CreationTime',
        type: {
          name: 'DateTime'
        }
      },
      modificationTime: {
        required: false,
        serializedName: 'ModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      parentID: {
        required: false,
        serializedName: 'ParentID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        constraints: {
          MaxLength: 8000,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const NoteBase = {
  required: false,
  serializedName: 'NoteBase',
  type: {
    name: 'Composite',
    className: 'NoteBase',
    modelProperties: {
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      note: {
        required: false,
        serializedName: 'Note',
        constraints: {
          MaxLength: 8000,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InsertNoteRequestModel = {
  required: false,
  serializedName: 'InsertNoteRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertNoteRequestModel',
    modelProperties: {
      acl: {
        required: false,
        serializedName: 'Acl',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'EntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      note: {
        required: true,
        serializedName: 'Note',
        constraints: {
          MaxLength: 8000,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      parentID: {
        required: false,
        serializedName: 'ParentID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const GetQueueAssignmentModel = {
  required: false,
  serializedName: 'GetQueueAssignmentModel',
  type: {
    name: 'Composite',
    className: 'GetQueueAssignmentModel',
    modelProperties: {
      queueID: {
        required: false,
        serializedName: 'QueueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      groupID: {
        required: false,
        serializedName: 'GroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      order: {
        required: false,
        serializedName: 'Order',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      taskSortColumn: {
        required: false,
        serializedName: 'TaskSortColumn',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      fetchType: {
        required: false,
        serializedName: 'FetchType',
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const QueueAssignmentModel = {
  required: false,
  serializedName: 'QueueAssignmentModel',
  type: {
    name: 'Composite',
    className: 'QueueAssignmentModel',
    modelProperties: {
      queueID: {
        required: false,
        serializedName: 'QueueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      groupID: {
        required: false,
        serializedName: 'GroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      order: {
        required: false,
        serializedName: 'Order',
        type: {
          name: 'Number'
        }
      },
      taskSortColumn: {
        required: false,
        serializedName: 'TaskSortColumn',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      fetchType: {
        required: false,
        serializedName: 'FetchType',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InsertQueueAssignmentRequestModel = {
  required: false,
  serializedName: 'InsertQueueAssignmentRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertQueueAssignmentRequestModel',
    modelProperties: {
      queueID: {
        required: false,
        serializedName: 'QueueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'UserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      order: {
        required: false,
        serializedName: 'Order',
        type: {
          name: 'Number'
        }
      },
      taskSortColumn: {
        required: false,
        serializedName: 'TaskSortColumn',
        type: {
          name: 'String'
        }
      },
      fetchType: {
        required: false,
        serializedName: 'FetchType',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetQueueModel = {
  required: false,
  serializedName: 'GetQueueModel',
  type: {
    name: 'Composite',
    className: 'GetQueueModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      alias: {
        required: false,
        serializedName: 'Alias',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      access: {
        required: false,
        serializedName: 'Access',
        type: {
          name: 'Number'
        }
      },
      bypassSecurity: {
        required: false,
        serializedName: 'BypassSecurity',
        type: {
          name: 'Boolean'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const QueueModel = {
  required: false,
  serializedName: 'QueueModel',
  type: {
    name: 'Composite',
    className: 'QueueModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      userCount: {
        required: false,
        serializedName: 'UserCount',
        type: {
          name: 'Number'
        }
      },
      taskCount: {
        required: false,
        serializedName: 'TaskCount',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      alias: {
        required: false,
        serializedName: 'Alias',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InsertQueueRequestModel = {
  required: false,
  serializedName: 'InsertQueueRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertQueueRequestModel',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      alias: {
        required: true,
        serializedName: 'Alias',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      type: {
        required: true,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const QueueBase = {
  required: false,
  serializedName: 'QueueBase',
  type: {
    name: 'Composite',
    className: 'QueueBase',
    modelProperties: {
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      alias: {
        required: false,
        serializedName: 'Alias',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetTaskModel = {
  required: false,
  serializedName: 'GetTaskModel',
  type: {
    name: 'Composite',
    className: 'GetTaskModel',
    modelProperties: {
      lastTaskID: {
        required: false,
        serializedName: 'LastTaskID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      id: {
        required: false,
        serializedName: 'ID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'Number'
        }
      },
      queueID: {
        required: false,
        serializedName: 'QueueID',
        type: {
          name: 'Number'
        }
      },
      queueType: {
        required: false,
        serializedName: 'QueueType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      taskID: {
        required: false,
        serializedName: 'TaskID',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const TaskModel = {
  required: false,
  serializedName: 'TaskModel',
  type: {
    name: 'Composite',
    className: 'TaskModel',
    modelProperties: {
      taskID: {
        required: false,
        serializedName: 'TaskID',
        type: {
          name: 'Number'
        }
      },
      queueID: {
        required: false,
        serializedName: 'QueueID',
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        type: {
          name: 'Number'
        }
      },
      objectID: {
        required: false,
        serializedName: 'ObjectID',
        type: {
          name: 'Number'
        }
      },
      objectType: {
        required: false,
        serializedName: 'ObjectType',
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'OwnerUserID',
        type: {
          name: 'Number'
        }
      },
      ownerUserFullName: {
        required: false,
        serializedName: 'OwnerUserFullName',
        type: {
          name: 'String'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'OwnerGroupID',
        type: {
          name: 'Number'
        }
      },
      ownerGroupName: {
        required: false,
        serializedName: 'OwnerGroupName',
        type: {
          name: 'String'
        }
      },
      effectiveUserID: {
        required: false,
        serializedName: 'EffectiveUserID',
        type: {
          name: 'Number'
        }
      },
      effectiveUserFullName: {
        required: false,
        serializedName: 'EffectiveUserFullName',
        type: {
          name: 'String'
        }
      },
      effectiveGroupID: {
        required: false,
        serializedName: 'EffectiveGroupID',
        type: {
          name: 'Number'
        }
      },
      effectiveGroupName: {
        required: false,
        serializedName: 'EffectiveGroupName',
        type: {
          name: 'String'
        }
      },
      prevQueueID: {
        required: false,
        serializedName: 'PrevQueueID',
        type: {
          name: 'Number'
        }
      },
      nextQueueID: {
        required: false,
        serializedName: 'NextQueueID',
        type: {
          name: 'Number'
        }
      },
      insertionTime: {
        required: false,
        serializedName: 'InsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      addressID: {
        required: false,
        serializedName: 'AddressID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message1: {
        required: false,
        serializedName: 'Message1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message2: {
        required: false,
        serializedName: 'Message2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message3: {
        required: false,
        serializedName: 'Message3',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message4: {
        required: false,
        serializedName: 'Message4',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message5: {
        required: false,
        serializedName: 'Message5',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message6: {
        required: false,
        serializedName: 'Message6',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message7: {
        required: false,
        serializedName: 'Message7',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message8: {
        required: false,
        serializedName: 'Message8',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message9: {
        required: false,
        serializedName: 'Message9',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message10: {
        required: false,
        serializedName: 'Message10',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message11: {
        required: false,
        serializedName: 'Message11',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message12: {
        required: false,
        serializedName: 'Message12',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message13: {
        required: false,
        serializedName: 'Message13',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message14: {
        required: false,
        serializedName: 'Message14',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message15: {
        required: false,
        serializedName: 'Message15',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message16: {
        required: false,
        serializedName: 'Message16',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'Number'
        }
      },
      priority: {
        required: false,
        serializedName: 'Priority',
        type: {
          name: 'Number'
        }
      },
      resolutionTime: {
        required: false,
        serializedName: 'ResolutionTime',
        type: {
          name: 'DateTime'
        }
      },
      taskFileAttachment: {
        required: false,
        serializedName: 'TaskFileAttachment',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InsertTaskRequestModel = {
  required: false,
  serializedName: 'InsertTaskRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertTaskRequestModel',
    modelProperties: {
      queueID: {
        required: false,
        serializedName: 'QueueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'DrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      objectID: {
        required: false,
        serializedName: 'ObjectID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      objectType: {
        required: false,
        serializedName: 'ObjectType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      prevQueueID: {
        required: false,
        serializedName: 'PrevQueueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      nextQueueID: {
        required: false,
        serializedName: 'NextQueueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      addressID: {
        required: false,
        serializedName: 'AddressID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message1: {
        required: false,
        serializedName: 'Message1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message2: {
        required: false,
        serializedName: 'Message2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message3: {
        required: false,
        serializedName: 'Message3',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message4: {
        required: false,
        serializedName: 'Message4',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message5: {
        required: false,
        serializedName: 'Message5',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message6: {
        required: false,
        serializedName: 'Message6',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message7: {
        required: false,
        serializedName: 'Message7',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message8: {
        required: false,
        serializedName: 'Message8',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message9: {
        required: false,
        serializedName: 'Message9',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message10: {
        required: false,
        serializedName: 'Message10',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message11: {
        required: false,
        serializedName: 'Message11',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message12: {
        required: false,
        serializedName: 'Message12',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message13: {
        required: false,
        serializedName: 'Message13',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message14: {
        required: false,
        serializedName: 'Message14',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message15: {
        required: false,
        serializedName: 'Message15',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message16: {
        required: false,
        serializedName: 'Message16',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'Number'
        }
      },
      priority: {
        required: false,
        serializedName: 'Priority',
        type: {
          name: 'Number'
        }
      },
      resolutionTime: {
        required: false,
        serializedName: 'ResolutionTime',
        type: {
          name: 'DateTime'
        }
      },
      taskFileAttachment: {
        required: false,
        serializedName: 'TaskFileAttachment',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const TaskBase = {
  required: false,
  serializedName: 'TaskBase',
  type: {
    name: 'Composite',
    className: 'TaskBase',
    modelProperties: {
      addressID: {
        required: false,
        serializedName: 'AddressID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message1: {
        required: false,
        serializedName: 'Message1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message2: {
        required: false,
        serializedName: 'Message2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message3: {
        required: false,
        serializedName: 'Message3',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message4: {
        required: false,
        serializedName: 'Message4',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message5: {
        required: false,
        serializedName: 'Message5',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message6: {
        required: false,
        serializedName: 'Message6',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message7: {
        required: false,
        serializedName: 'Message7',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message8: {
        required: false,
        serializedName: 'Message8',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message9: {
        required: false,
        serializedName: 'Message9',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message10: {
        required: false,
        serializedName: 'Message10',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message11: {
        required: false,
        serializedName: 'Message11',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message12: {
        required: false,
        serializedName: 'Message12',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message13: {
        required: false,
        serializedName: 'Message13',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message14: {
        required: false,
        serializedName: 'Message14',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message15: {
        required: false,
        serializedName: 'Message15',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      message16: {
        required: false,
        serializedName: 'Message16',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'Number'
        }
      },
      priority: {
        required: false,
        serializedName: 'Priority',
        type: {
          name: 'Number'
        }
      },
      resolutionTime: {
        required: false,
        serializedName: 'ResolutionTime',
        type: {
          name: 'DateTime'
        }
      },
      taskFileAttachment: {
        required: false,
        serializedName: 'TaskFileAttachment',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const GetUserRequestModel = {
  required: false,
  serializedName: 'GetUserRequestModel',
  type: {
    name: 'Composite',
    className: 'GetUserRequestModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      primaryGroupID: {
        required: false,
        serializedName: 'PrimaryGroupID',
        type: {
          name: 'Number'
        }
      },
      groupID: {
        required: false,
        serializedName: 'GroupID',
        type: {
          name: 'Number'
        }
      },
      groupName: {
        required: false,
        serializedName: 'GroupName',
        type: {
          name: 'String'
        }
      },
      username: {
        required: false,
        serializedName: 'Username',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      fullName: {
        required: false,
        serializedName: 'FullName',
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const UserModel = {
  required: false,
  serializedName: 'UserModel',
  type: {
    name: 'Composite',
    className: 'UserModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      username: {
        required: false,
        serializedName: 'Username',
        type: {
          name: 'String'
        }
      },
      loginCount: {
        required: false,
        serializedName: 'LoginCount',
        type: {
          name: 'Number'
        }
      },
      drawerCount: {
        required: false,
        serializedName: 'DrawerCount',
        type: {
          name: 'Number'
        }
      },
      groupCount: {
        required: false,
        serializedName: 'GroupCount',
        type: {
          name: 'Number'
        }
      },
      queueCount: {
        required: false,
        serializedName: 'QueueCount',
        type: {
          name: 'Number'
        }
      },
      loginTime: {
        required: false,
        serializedName: 'LoginTime',
        type: {
          name: 'Number'
        }
      },
      lastLogin: {
        required: false,
        serializedName: 'LastLogin',
        type: {
          name: 'DateTime'
        }
      },
      primaryGroupID: {
        required: false,
        serializedName: 'PrimaryGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      fullName: {
        required: false,
        serializedName: 'FullName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      objectCount: {
        required: false,
        serializedName: 'ObjectCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      iPAddress: {
        required: false,
        serializedName: 'IPAddress',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      entityAcl: {
        required: false,
        serializedName: 'EntityAcl',
        type: {
          name: 'Number'
        }
      },
      attachmentAcl: {
        required: false,
        serializedName: 'AttachmentAcl',
        type: {
          name: 'Number'
        }
      },
      noteAcl: {
        required: false,
        serializedName: 'NoteAcl',
        type: {
          name: 'Number'
        }
      },
      entityFeature: {
        required: false,
        serializedName: 'EntityFeature',
        type: {
          name: 'Number'
        }
      },
      attachmentFeature: {
        required: false,
        serializedName: 'AttachmentFeature',
        type: {
          name: 'Number'
        }
      },
      noteFeature: {
        required: false,
        serializedName: 'NoteFeature',
        type: {
          name: 'Number'
        }
      },
      adminMask: {
        required: false,
        serializedName: 'AdminMask',
        type: {
          name: 'String'
        }
      },
      address: {
        required: false,
        serializedName: 'Address',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedDouble1: {
        required: false,
        serializedName: 'ReservedDouble1',
        type: {
          name: 'Number'
        }
      },
      reservedDouble2: {
        required: false,
        serializedName: 'ReservedDouble2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 128,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 128,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      userExpiration: {
        required: false,
        serializedName: 'UserExpiration',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const InsertUserRequestModel = {
  required: false,
  serializedName: 'InsertUserRequestModel',
  type: {
    name: 'Composite',
    className: 'InsertUserRequestModel',
    modelProperties: {
      username: {
        required: true,
        serializedName: 'Username',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      fullName: {
        required: true,
        serializedName: 'FullName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      iPAddress: {
        required: true,
        serializedName: 'IPAddress',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      entityAcl: {
        required: false,
        serializedName: 'EntityAcl',
        type: {
          name: 'Number'
        }
      },
      attachmentAcl: {
        required: false,
        serializedName: 'AttachmentAcl',
        type: {
          name: 'Number'
        }
      },
      noteAcl: {
        required: false,
        serializedName: 'NoteAcl',
        type: {
          name: 'Number'
        }
      },
      entityFeature: {
        required: false,
        serializedName: 'EntityFeature',
        type: {
          name: 'Number'
        }
      },
      attachmentFeature: {
        required: false,
        serializedName: 'AttachmentFeature',
        type: {
          name: 'Number'
        }
      },
      noteFeature: {
        required: false,
        serializedName: 'NoteFeature',
        type: {
          name: 'Number'
        }
      },
      adminMask: {
        required: false,
        serializedName: 'AdminMask',
        type: {
          name: 'String'
        }
      },
      address: {
        required: false,
        serializedName: 'Address',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const UserBase = {
  required: false,
  serializedName: 'UserBase',
  type: {
    name: 'Composite',
    className: 'UserBase',
    modelProperties: {
      primaryGroupID: {
        required: false,
        serializedName: 'PrimaryGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      fullName: {
        required: false,
        serializedName: 'FullName',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      objectCount: {
        required: false,
        serializedName: 'ObjectCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      iPAddress: {
        required: false,
        serializedName: 'IPAddress',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      entityAcl: {
        required: false,
        serializedName: 'EntityAcl',
        type: {
          name: 'Number'
        }
      },
      attachmentAcl: {
        required: false,
        serializedName: 'AttachmentAcl',
        type: {
          name: 'Number'
        }
      },
      noteAcl: {
        required: false,
        serializedName: 'NoteAcl',
        type: {
          name: 'Number'
        }
      },
      entityFeature: {
        required: false,
        serializedName: 'EntityFeature',
        type: {
          name: 'Number'
        }
      },
      attachmentFeature: {
        required: false,
        serializedName: 'AttachmentFeature',
        type: {
          name: 'Number'
        }
      },
      noteFeature: {
        required: false,
        serializedName: 'NoteFeature',
        type: {
          name: 'Number'
        }
      },
      adminMask: {
        required: false,
        serializedName: 'AdminMask',
        type: {
          name: 'String'
        }
      },
      address: {
        required: false,
        serializedName: 'Address',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedDouble1: {
        required: false,
        serializedName: 'ReservedDouble1',
        type: {
          name: 'Number'
        }
      },
      reservedDouble2: {
        required: false,
        serializedName: 'ReservedDouble2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 128,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 128,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      userExpiration: {
        required: false,
        serializedName: 'UserExpiration',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const GetWorkflowModel = {
  required: false,
  serializedName: 'GetWorkflowModel',
  type: {
    name: 'Composite',
    className: 'GetWorkflowModel',
    modelProperties: {
      applicationID: {
        required: false,
        serializedName: 'ApplicationID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityType: {
        required: false,
        serializedName: 'EntityType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'Page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'PageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'SortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'SortBy',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const WorkflowModel = {
  required: false,
  serializedName: 'WorkflowModel',
  type: {
    name: 'Composite',
    className: 'WorkflowModel',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        type: {
          name: 'String'
        }
      },
      entityType: {
        required: false,
        serializedName: 'EntityType',
        type: {
          name: 'Number'
        }
      },
      alias: {
        required: false,
        serializedName: 'Alias',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const WorkflowQueueModel = {
  required: false,
  serializedName: 'WorkflowQueueModel',
  type: {
    name: 'Composite',
    className: 'WorkflowQueueModel',
    modelProperties: {
      workflowType: {
        required: false,
        serializedName: 'WorkflowType',
        type: {
          name: 'String'
        }
      },
      index: {
        required: false,
        serializedName: 'Index',
        type: {
          name: 'Number'
        }
      },
      subIndex: {
        required: false,
        serializedName: 'SubIndex',
        type: {
          name: 'Number'
        }
      },
      id: {
        required: false,
        serializedName: 'ID',
        type: {
          name: 'Number'
        }
      },
      userCount: {
        required: false,
        serializedName: 'UserCount',
        type: {
          name: 'Number'
        }
      },
      taskCount: {
        required: false,
        serializedName: 'TaskCount',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'Name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      alias: {
        required: false,
        serializedName: 'Alias',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'State',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'Type',
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'Category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'Description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedInt1: {
        required: false,
        serializedName: 'ReservedInt1',
        type: {
          name: 'Number'
        }
      },
      reservedInt2: {
        required: false,
        serializedName: 'ReservedInt2',
        type: {
          name: 'Number'
        }
      },
      reservedString1: {
        required: false,
        serializedName: 'ReservedString1',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      reservedString2: {
        required: false,
        serializedName: 'ReservedString2',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetDrawerGroupAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetDrawerGroupAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetDrawerGroupAssociationsOptionalParams',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'groupID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetGroupDrawerAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetGroupDrawerAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetGroupDrawerAssociationsOptionalParams',
    modelProperties: {
      drawerID: {
        required: false,
        serializedName: 'drawerID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetUserGroupAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetUserGroupAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetUserGroupAssociationsOptionalParams',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'groupID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetGroupUserAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetGroupUserAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetGroupUserAssociationsOptionalParams',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'userID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetQueueGroupAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetQueueGroupAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetQueueGroupAssociationsOptionalParams',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'groupID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetGroupQueueAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetGroupQueueAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetGroupQueueAssociationsOptionalParams',
    modelProperties: {
      queueID: {
        required: false,
        serializedName: 'queueID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetApplicationGroupAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetApplicationGroupAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetApplicationGroupAssociationsOptionalParams',
    modelProperties: {
      groupID: {
        required: false,
        serializedName: 'groupID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetGroupApplicationAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetGroupApplicationAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetGroupApplicationAssociationsOptionalParams',
    modelProperties: {
      applicationID: {
        required: false,
        serializedName: 'applicationID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetDrawerUserAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetDrawerUserAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetDrawerUserAssociationsOptionalParams',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'userID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetUserDrawerAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetUserDrawerAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetUserDrawerAssociationsOptionalParams',
    modelProperties: {
      drawerID: {
        required: false,
        serializedName: 'drawerID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetQueueUserAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetQueueUserAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetQueueUserAssociationsOptionalParams',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'userID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetUserQueueAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetUserQueueAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetUserQueueAssociationsOptionalParams',
    modelProperties: {
      queueID: {
        required: false,
        serializedName: 'queueID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetApplicationUserAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetApplicationUserAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetApplicationUserAssociationsOptionalParams',
    modelProperties: {
      userID: {
        required: false,
        serializedName: 'userID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetUserApplicationAssociationsOptionalParams = {
  required: false,
  serializedName: 'GetUserApplicationAssociationsOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetUserApplicationAssociationsOptionalParams',
    modelProperties: {
      applicationID: {
        required: false,
        serializedName: 'applicationID',
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetAttachmentsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetAttachmentsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetAttachmentsByFilterOptionalParams',
    modelProperties: {
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      extension: {
        required: false,
        serializedName: 'extension',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      minSize: {
        required: false,
        serializedName: 'minSize',
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      maxSize: {
        required: false,
        serializedName: 'maxSize',
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'entityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'drawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'creatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'modifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minInsertionTime: {
        required: false,
        serializedName: 'minInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      maxInsertionTime: {
        required: false,
        serializedName: 'maxInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'minModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'maxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetAttachmentVersionsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetAttachmentVersionsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetAttachmentVersionsByFilterOptionalParams',
    modelProperties: {
      version: {
        required: false,
        serializedName: 'version',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'creatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      accessorUserID: {
        required: false,
        serializedName: 'accessorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minAccessTime: {
        required: false,
        serializedName: 'minAccessTime',
        type: {
          name: 'DateTime'
        }
      },
      maxAccessTime: {
        required: false,
        serializedName: 'maxAccessTime',
        type: {
          name: 'DateTime'
        }
      },
      minCreationTime: {
        required: false,
        serializedName: 'minCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxCreationTime: {
        required: false,
        serializedName: 'maxCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'minModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'maxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetEntitiesByFilterOptionalParams = {
  required: false,
  serializedName: 'GetEntitiesByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetEntitiesByFilterOptionalParams',
    modelProperties: {
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'String'
        }
      },
      referenceCount: {
        required: false,
        serializedName: 'referenceCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      attachCount: {
        required: false,
        serializedName: 'attachCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      noteCount: {
        required: false,
        serializedName: 'noteCount',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      ownerUserID: {
        required: false,
        serializedName: 'ownerUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      ownerGroupID: {
        required: false,
        serializedName: 'ownerGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'creatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      creatorGroupID: {
        required: false,
        serializedName: 'creatorGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'modifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierGroupID: {
        required: false,
        serializedName: 'modifierGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      minCreationTime: {
        required: false,
        serializedName: 'minCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxCreationTime: {
        required: false,
        serializedName: 'maxCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'minModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'maxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ObjectElementType',
              type: {
                name: 'Object'
              }
          }
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetEventsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetEventsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetEventsByFilterOptionalParams',
    modelProperties: {
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      minEventTime: {
        required: false,
        serializedName: 'minEventTime',
        type: {
          name: 'DateTime'
        }
      },
      maxEventTime: {
        required: false,
        serializedName: 'maxEventTime',
        type: {
          name: 'DateTime'
        }
      },
      eventUserID: {
        required: false,
        serializedName: 'eventUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      eventGroupID: {
        required: false,
        serializedName: 'eventGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      category: {
        required: false,
        serializedName: 'category',
        type: {
          name: 'String'
        }
      },
      classProperty: {
        required: false,
        serializedName: 'class',
        type: {
          name: 'String'
        }
      },
      operation: {
        required: false,
        serializedName: 'operation',
        type: {
          name: 'String'
        }
      },
      minProcessingTime: {
        required: false,
        serializedName: 'minProcessingTime',
        type: {
          name: 'Number'
        }
      },
      maxProcessingTime: {
        required: false,
        serializedName: 'maxProcessingTime',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetExtensionsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetExtensionsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetExtensionsByFilterOptionalParams',
    modelProperties: {
      iD: {
        required: false,
        serializedName: 'iD',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetFlowsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetFlowsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetFlowsByFilterOptionalParams',
    modelProperties: {
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      queueID: {
        required: false,
        serializedName: 'queueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minWorkflowTime: {
        required: false,
        serializedName: 'minWorkflowTime',
        type: {
          name: 'DateTime'
        }
      },
      maxWorkflowTime: {
        required: false,
        serializedName: 'maxWorkflowTime',
        type: {
          name: 'DateTime'
        }
      },
      minInsertionTime: {
        required: false,
        serializedName: 'minInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      maxInsertionTime: {
        required: false,
        serializedName: 'maxInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      workflowUserID: {
        required: false,
        serializedName: 'workflowUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      workflowGroupID: {
        required: false,
        serializedName: 'workflowGroupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      operation: {
        required: false,
        serializedName: 'operation',
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'category',
        type: {
          name: 'String'
        }
      },
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'String'
        }
      },
      minIndex1: {
        required: false,
        serializedName: 'minIndex1',
        type: {
          name: 'Number'
        }
      },
      maxIndex1: {
        required: false,
        serializedName: 'maxIndex1',
        type: {
          name: 'Number'
        }
      },
      minIndex2: {
        required: false,
        serializedName: 'minIndex2',
        type: {
          name: 'Number'
        }
      },
      maxIndex2: {
        required: false,
        serializedName: 'maxIndex2',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetTemplatesByFilterOptionalParams = {
  required: false,
  serializedName: 'GetTemplatesByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetTemplatesByFilterOptionalParams',
    modelProperties: {
      drawerID: {
        required: false,
        serializedName: 'drawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      category: {
        required: false,
        serializedName: 'category',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIValidateTemplateFieldOptionalParams = {
  required: false,
  serializedName: 'ValidateTemplateFieldOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIValidateTemplateFieldOptionalParams',
    modelProperties: {
      sortColumn: {
        required: false,
        serializedName: 'sortColumn',
        type: {
          name: 'String'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ObjectElementType',
              type: {
                name: 'Object'
              }
          }
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetGroupsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetGroupsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetGroupsByFilterOptionalParams',
    modelProperties: {
      iD: {
        required: false,
        serializedName: 'iD',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'userID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetLinksByFilterOptionalParams = {
  required: false,
  serializedName: 'GetLinksByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetLinksByFilterOptionalParams',
    modelProperties: {
      childEntityID: {
        required: false,
        serializedName: 'childEntityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      childDrawerID: {
        required: false,
        serializedName: 'childDrawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      childType: {
        required: false,
        serializedName: 'childType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      acl: {
        required: false,
        serializedName: 'acl',
        type: {
          name: 'Number'
        }
      },
      entityID: {
        required: false,
        serializedName: 'entityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'drawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'creatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'modifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minInsertionTime: {
        required: false,
        serializedName: 'minInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      maxInsertionTime: {
        required: false,
        serializedName: 'maxInsertionTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'minModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'maxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetNotesByFilterOptionalParams = {
  required: false,
  serializedName: 'GetNotesByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetNotesByFilterOptionalParams',
    modelProperties: {
      entityID: {
        required: false,
        serializedName: 'entityID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      creatorUserID: {
        required: false,
        serializedName: 'creatorUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      modifierUserID: {
        required: false,
        serializedName: 'modifierUserID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      minCreationTime: {
        required: false,
        serializedName: 'minCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxCreationTime: {
        required: false,
        serializedName: 'maxCreationTime',
        type: {
          name: 'DateTime'
        }
      },
      minModificationTime: {
        required: false,
        serializedName: 'minModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      maxModificationTime: {
        required: false,
        serializedName: 'maxModificationTime',
        type: {
          name: 'DateTime'
        }
      },
      parentID: {
        required: false,
        serializedName: 'parentID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetQueueAssignmentsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetQueueAssignmentsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetQueueAssignmentsByFilterOptionalParams',
    modelProperties: {
      queueID: {
        required: false,
        serializedName: 'queueID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      userID: {
        required: false,
        serializedName: 'userID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      groupID: {
        required: false,
        serializedName: 'groupID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      order: {
        required: false,
        serializedName: 'order',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      taskSortColumn: {
        required: false,
        serializedName: 'taskSortColumn',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'String'
        }
      },
      fetchType: {
        required: false,
        serializedName: 'fetchType',
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetQueuesByFilterOptionalParams = {
  required: false,
  serializedName: 'GetQueuesByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetQueuesByFilterOptionalParams',
    modelProperties: {
      iD: {
        required: false,
        serializedName: 'iD',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      alias: {
        required: false,
        serializedName: 'alias',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      access: {
        required: false,
        serializedName: 'access',
        type: {
          name: 'Number'
        }
      },
      bypassSecurity: {
        required: false,
        serializedName: 'bypassSecurity',
        type: {
          name: 'Boolean'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetTasksByFilterOptionalParams = {
  required: false,
  serializedName: 'GetTasksByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetTasksByFilterOptionalParams',
    modelProperties: {
      lastTaskID: {
        required: false,
        serializedName: 'lastTaskID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 0
        },
        type: {
          name: 'Number'
        }
      },
      iD: {
        required: false,
        serializedName: 'iD',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'Number'
        }
      },
      queueID: {
        required: false,
        serializedName: 'queueID',
        type: {
          name: 'Number'
        }
      },
      queueType: {
        required: false,
        serializedName: 'queueType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      drawerID: {
        required: false,
        serializedName: 'drawerID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      description: {
        required: false,
        serializedName: 'description',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      taskID: {
        required: false,
        serializedName: 'taskID',
        type: {
          name: 'Number'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetUsersByFilterOptionalParams = {
  required: false,
  serializedName: 'GetUsersByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetUsersByFilterOptionalParams',
    modelProperties: {
      iD: {
        required: false,
        serializedName: 'iD',
        type: {
          name: 'Number'
        }
      },
      primaryGroupID: {
        required: false,
        serializedName: 'primaryGroupID',
        type: {
          name: 'Number'
        }
      },
      groupID: {
        required: false,
        serializedName: 'groupID',
        type: {
          name: 'Number'
        }
      },
      groupName: {
        required: false,
        serializedName: 'groupName',
        type: {
          name: 'String'
        }
      },
      username: {
        required: false,
        serializedName: 'username',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'String'
        }
      },
      fullName: {
        required: false,
        serializedName: 'fullName',
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const SoftheonEnterpriseAPIGetWorkflowsByFilterOptionalParams = {
  required: false,
  serializedName: 'GetWorkflowsByFilterOptions',
  type: {
    name: 'Composite',
    className: 'SoftheonEnterpriseAPIGetWorkflowsByFilterOptionalParams',
    modelProperties: {
      applicationID: {
        required: false,
        serializedName: 'applicationID',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      entityType: {
        required: false,
        serializedName: 'entityType',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        constraints: {
          MaxLength: 255,
          MinLength: 0
        },
        type: {
          name: 'String'
        }
      },
      page: {
        required: false,
        serializedName: 'page',
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      pageSize: {
        required: false,
        serializedName: 'pageSize',
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: 'Number'
        }
      },
      sortOrder: {
        required: false,
        serializedName: 'sortOrder',
        type: {
          name: 'String'
        }
      },
      sortBy: {
        required: false,
        serializedName: 'sortBy',
        type: {
          name: 'Number'
        }
      }
    }
  }
};
