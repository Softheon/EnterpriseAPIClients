/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { RequestOptionsBase } from "ms-rest-js";


/**
 * @interface
 * An interface representing WorkflowActionModel.
 * Defines properties and methods for Workflow Action Model
 *
 */
export interface WorkflowActionModel {
  /**
   * @member {number} [taskID] Gets or sets the task identifier.
   */
  taskID?: number;
  /**
   * @member {number} [targetID] Gets or sets the target id.
   */
  targetID?: number;
  /**
   * @member {string} [queueName] Gets or sets the name of the queue.
   */
  queueName?: string;
  /**
   * @member {string} [source] Gets or sets the source.
   */
  source?: string;
  /**
   * @member {string} [computer] Gets or sets the name of the computer.
   */
  computer?: string;
  /**
   * @member {string} [iPAddress] Gets or sets the IP address.
   */
  iPAddress?: string;
}

/**
 * @interface
 * An interface representing WorkflowActionRouteModel.
 * Defines properties and methods for Workflow Action Route Model
 *
 */
export interface WorkflowActionRouteModel {
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {boolean} [keepOriginalTask] Gets or sets a value indicating
   * whether [keep original task].
   */
  keepOriginalTask?: boolean;
  /**
   * @member {number} [taskID] Gets or sets the task identifier.
   */
  taskID?: number;
  /**
   * @member {number} [targetID] Gets or sets the target id.
   */
  targetID?: number;
  /**
   * @member {string} [queueName] Gets or sets the name of the queue.
   */
  queueName?: string;
  /**
   * @member {string} [source] Gets or sets the source.
   */
  source?: string;
  /**
   * @member {string} [computer] Gets or sets the name of the computer.
   */
  computer?: string;
  /**
   * @member {string} [iPAddress] Gets or sets the IP address.
   */
  iPAddress?: string;
}

/**
 * @interface
 * An interface representing WorkflowActionInitializeModel.
 * Defines properties and methods for Workflow Initialize
 *
 */
export interface WorkflowActionInitializeModel {
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number[]} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number[];
  /**
   * @member {string[]} [queueName] Gets or sets the name of the queue.
   */
  queueName?: string[];
  /**
   * @member {string} [source] Gets or sets the source.
   */
  source?: string;
  /**
   * @member {string} [computer] Gets or sets the name of the computer.
   */
  computer?: string;
  /**
   * @member {string} [iPAddress] Gets or sets the IP address.
   */
  iPAddress?: string;
}

/**
 * @interface
 * An interface representing ApplicationModel.
 * The model that is sent in response to a GET request for Application
 *
 */
export interface ApplicationModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing GetAssociationRequestModel.
 * Model for the GET Association input parameters
 *
 */
export interface GetAssociationRequestModel {
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder;
  /**
   * @member {SortBy} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy;
}

/**
 * @interface
 * An interface representing GroupDrawerModel.
 * The model that is sent in response to a GET request for GroupsDrawer
 * associations
 *
 */
export interface GroupDrawerModel {
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {string} [groupName] Gets or sets the name of the group.
   */
  groupName?: string;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [drawerName] Gets or sets the name of the drawer.
   */
  drawerName?: string;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
}

/**
 * @interface
 * An interface representing GroupUserModel.
 * The model that is sent in response to a GET request for GroupUser
 * associations
 *
 */
export interface GroupUserModel {
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {string} [groupName] Gets or sets the name of the group.
   */
  groupName?: string;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} [userFullName] Gets or sets the full name of the user.
   */
  userFullName?: string;
}

/**
 * @interface
 * An interface representing GroupQueueModel.
 * The model that is sent in response to a GET request for GroupsQueue
 * associations
 *
 */
export interface GroupQueueModel {
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {string} [groupName] Gets or sets the name of the group.
   */
  groupName?: string;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {string} [queueName] Gets or sets the name of the queue.
   */
  queueName?: string;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
}

/**
 * @interface
 * An interface representing GroupApplicationModel.
 * The model that is sent in response to a GET request for GroupsApplication
 * associations
 *
 */
export interface GroupApplicationModel {
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {string} [groupName] Gets or sets the name of the group.
   */
  groupName?: string;
  /**
   * @member {number} [applicationID] Gets or sets the application identifier.
   */
  applicationID?: number;
  /**
   * @member {string} [applicationName] Gets or sets the name of the
   * application.
   */
  applicationName?: string;
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
}

/**
 * @interface
 * An interface representing UserDrawerModel.
 * The model that is sent in response to a GET request for UserDrawer
 * associations
 *
 */
export interface UserDrawerModel {
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} [userFullName] Gets or sets the full name of the user.
   */
  userFullName?: string;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [drawerName] Gets or sets the name of the drawer.
   */
  drawerName?: string;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
}

/**
 * @interface
 * An interface representing UserQueueModel.
 * The model that is sent in response to a GET request for UserQueue
 * associations
 *
 */
export interface UserQueueModel {
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} [userFullName] Gets or sets the full name of the user.
   */
  userFullName?: string;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {string} [queueName] Gets or sets the name of the queue.
   */
  queueName?: string;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
}

/**
 * @interface
 * An interface representing UserApplicationModel.
 * The model that is sent in response to a GET request for UserApplication
 * associations
 *
 */
export interface UserApplicationModel {
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} [userFullName] Gets or sets the full name of the user.
   */
  userFullName?: string;
  /**
   * @member {number} [applicationID] Gets or sets the application identifier.
   */
  applicationID?: number;
  /**
   * @member {string} [applicationName] Gets or sets the name of the
   * application.
   */
  applicationName?: string;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
}

/**
 * @interface
 * An interface representing GetAttachmentRequestModel.
 * Model for the GET Attachment input parameters
 *
 */
export interface GetAttachmentRequestModel {
  /**
   * @member {Type} [type] Gets or sets the type. Possible values include:
   * 'Standard', 'EntityLink', 'WebLink'
   */
  type?: Type;
  /**
   * @member {string} [extension] Gets or sets the extension.
   */
  extension?: string;
  /**
   * @member {number} [minSize] Gets or sets the minimum size.
   */
  minSize?: number;
  /**
   * @member {number} [maxSize] Gets or sets the maximum size.
   */
  maxSize?: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {Date} [minInsertionTime] Gets or sets the minimum insertion time.
   */
  minInsertionTime?: Date;
  /**
   * @member {Date} [maxInsertionTime] Gets or sets the maximum insertion time.
   */
  maxInsertionTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder1} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder1;
  /**
   * @member {SortBy1} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   */
  sortBy?: SortBy1;
}

/**
 * @interface
 * An interface representing AttachmentModel.
 * The model that is sent in response to a GET request for Attachment
 *
 */
export interface AttachmentModel {
  /**
   * @member {Type1} [type] Gets or sets the type. Possible values include:
   * 'Standard', 'EntityLink', 'WebLink'
   */
  type?: Type1;
  /**
   * @member {number} [size] Gets or sets the size.
   */
  size?: number;
  /**
   * @member {string} [extension] Gets or sets the extension.
   */
  extension?: string;
  /**
   * @member {string} [fileName] Gets or sets the filename.
   */
  fileName?: string;
  /**
   * @member {number} [version] Gets or sets the version.
   */
  version?: number;
  /**
   * @member {number} [release] Gets or sets the release.
   */
  release?: number;
  /**
   * @member {number} [category] Gets or sets the category.
   */
  category?: number;
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   */
  ownerUserFullName?: string;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   */
  ownerGroupName?: string;
  /**
   * @member {number} [includerUserID] Gets or sets the includer user
   * identifier.
   */
  includerUserID?: number;
  /**
   * @member {string} [includerUserFullName] Gets or sets the full name of the
   * includer user.
   */
  includerUserFullName?: string;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {string} [modifierUserFullName] Gets or sets the full name of the
   * modifier user.
   */
  modifierUserFullName?: string;
  /**
   * @member {Date} [insertionTime] Gets or sets the insertion time.
   */
  insertionTime?: Date;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time.
   */
  modificationTime?: Date;
  /**
   * @member {number} [classProperty] Gets or sets the class.
   */
  classProperty?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {number} [pageNumber] Gets or sets the page number.
   */
  pageNumber?: number;
  /**
   * @member {State} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic', 'Static',
   * 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   */
  state?: State;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
}

/**
 * @interface
 * An interface representing UpdateAttachmentRequestModel.
 * Model for the PUT Attachment input parameters.
 *
 */
export interface UpdateAttachmentRequestModel {
  /**
   * @member {number} [category] Gets or sets the category.
   */
  category?: number;
  /**
   * @member {number} [classProperty] Gets or sets the class.
   */
  classProperty?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {number} [pageNumber] Gets or sets the page number.
   */
  pageNumber?: number;
  /**
   * @member {State1} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic', 'Static',
   * 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   */
  state?: State1;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
}

/**
 * @interface
 * An interface representing GetAttachmentVersionRequestModel.
 * Model for the GET Attachment Version input parameters
 *
 */
export interface GetAttachmentVersionRequestModel {
  /**
   * @member {number} [version] Gets or sets the indexed version value.
   */
  version?: number;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [accessorUserID] Gets or sets the identifier of the user
   * who accessed the attachment version.
   */
  accessorUserID?: number;
  /**
   * @member {Date} [minAccessTime] Gets or sets the min time the version was
   * last accessed.
   */
  minAccessTime?: Date;
  /**
   * @member {Date} [maxAccessTime] Gets or sets the max time the version was
   * last accessed.
   */
  maxAccessTime?: Date;
  /**
   * @member {Date} [minCreationTime] Gets or sets the min creation time of the
   * attachment version.
   */
  minCreationTime?: Date;
  /**
   * @member {Date} [maxCreationTime] Gets or sets the max creation time of the
   * attachment version.
   */
  maxCreationTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the min modification
   * time of the attachment version.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the max modification
   * time of the attachment version.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder2} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder2;
  /**
   * @member {SortBy2} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Version', 'CreatorUserID', 'AccessorUserID',
   * 'AccessTime', 'CreationTime', 'ModificationTime'
   */
  sortBy?: SortBy2;
}

/**
 * @interface
 * An interface representing AttachmentVersionModel.
 * Attachment Version Model
 *
 */
export interface AttachmentVersionModel {
  /**
   * @member {number} [version] Gets or sets the indexed version value.
   */
  version?: number;
  /**
   * @member {number} [attachmentID] Gets or sets the attachment identifier.
   */
  attachmentID?: number;
  /**
   * @member {string} [name] Gets or sets the string.
   */
  name?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [accessorUserID] Gets or sets the identifier of the user
   * who accessed the attachment version.
   */
  accessorUserID?: number;
  /**
   * @member {Date} [accessTime] Gets or sets the time the version was last
   * accessed.
   */
  accessTime?: Date;
  /**
   * @member {Date} [creationTime] Gets or sets the creation time of the
   * attachment version.
   */
  creationTime?: Date;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time of
   * the attachment version.
   */
  modificationTime?: Date;
  /**
   * @member {string} [comment] Gets or sets the description comment of changes
   * that were made.
   */
  comment?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {number} [reservedInt3] Gets or sets the reserved int3.
   */
  reservedInt3?: number;
  /**
   * @member {number} [reservedInt4] Gets or sets the reserved int4.
   */
  reservedInt4?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing DrawerModel.
 * The model that is sent in response to a GET request for Drawers
 *
 */
export interface DrawerModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [cabinetID] Gets or sets the cabinet identifier.
   */
  cabinetID?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} [userFullName] Gets or sets the full name of the user.
   */
  userFullName?: string;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {number} [edition] Gets or sets the edition.
   */
  edition?: number;
  /**
   * @member {number} [state] Gets or sets the state.
   */
  state?: number;
  /**
   * @member {number} [entityFeature] Gets or sets the entity feature.
   */
  entityFeature?: number;
  /**
   * @member {number} [attachmentFeature] Gets or sets the attachment feature.
   */
  attachmentFeature?: number;
  /**
   * @member {number} [noteFeature] Gets or sets the note feature.
   */
  noteFeature?: number;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved integer 2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing DrawerBase.
 * The Drawer Base class.
 *
 */
export interface DrawerBase {
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {number} [edition] Gets or sets the edition.
   */
  edition?: number;
  /**
   * @member {number} [state] Gets or sets the state.
   */
  state?: number;
  /**
   * @member {number} [entityFeature] Gets or sets the entity feature.
   */
  entityFeature?: number;
  /**
   * @member {number} [attachmentFeature] Gets or sets the attachment feature.
   */
  attachmentFeature?: number;
  /**
   * @member {number} [noteFeature] Gets or sets the note feature.
   */
  noteFeature?: number;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved integer 2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing GetProfileFieldRequestModel.
 * Represents a profile search field
 *
 */
export interface GetProfileFieldRequestModel {
  /**
   * @member {number} profileType Gets or sets the type of the profile.
   */
  profileType: number;
  /**
   * @member {FieldType} fieldType Gets or sets the type of the field. Possible
   * values include: 'String', 'Integer', 'Double', 'DateTime'
   */
  fieldType: FieldType;
  /**
   * @member {number} fieldIndex Gets or sets the index of the field.
   */
  fieldIndex: number;
  /**
   * @member {string} fieldValue Gets or sets the field value.
   */
  fieldValue: string;
}

/**
 * @interface
 * An interface representing GetEntityRequestModel.
 * Model for the GET Entity input parameters
 *
 */
export interface GetEntityRequestModel {
  /**
   * @member {number} drawerID Gets or sets the drawer identifier.
   */
  drawerID: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [type] Gets or sets the type of the entity.
   */
  type?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {State2} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
   * 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
   * 'ReviewedRoutingSlipOpen'
   */
  state?: State2;
  /**
   * @member {number} [referenceCount] Gets or sets the reference count.
   */
  referenceCount?: number;
  /**
   * @member {number} [attachCount] Gets or sets the attach count.
   */
  attachCount?: number;
  /**
   * @member {number} [noteCount] Gets or sets the note count.
   */
  noteCount?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [creatorGroupID] Gets or sets the creator group
   * identifier.
   */
  creatorGroupID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {number} [modifierGroupID] Gets or sets the modifier group
   * identifier.
   */
  modifierGroupID?: number;
  /**
   * @member {Date} [minCreationTime] Gets or sets the minimum creation time.
   */
  minCreationTime?: Date;
  /**
   * @member {Date} [maxCreationTime] Gets or sets the maximum creation time.
   */
  maxCreationTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {GetProfileFieldRequestModel[]} [metadata] Gets or sets the
   * metadata.
   */
  metadata?: GetProfileFieldRequestModel[];
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder3} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder3;
  /**
   * @member {SortBy3} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'CreationTime', 'ModificationTime', 'State',
   * 'Name'
   */
  sortBy?: SortBy3;
}

/**
 * @interface
 * An interface representing GetEntityBaseResponse.
 * The summary model that is sent in response to a GET request for Entity
 *
 */
export interface GetEntityBaseResponse {
  /**
   * @member {number} [id] Gets or sets the entity identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [type] Gets or sets the type.
   */
  type?: number;
  /**
   * @member {number} [subtype] Gets or sets the subtype.
   */
  subtype?: number;
  /**
   * @member {number} [age] Gets or sets the age.
   */
  age?: number;
  /**
   * @member {number} [referenceCount] Gets or sets the reference identifier.
   */
  referenceCount?: number;
  /**
   * @member {number} [accessCount] Gets or sets the access count.
   */
  accessCount?: number;
  /**
   * @member {number} [profileCount] Gets or sets the profile count.
   */
  profileCount?: number;
  /**
   * @member {number} [attachCount] Gets or sets the attach count.
   */
  attachCount?: number;
  /**
   * @member {number} [noteCount] Gets or sets the note count.
   */
  noteCount?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   */
  ownerUserFullName?: string;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   */
  ownerGroupName?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {string} [creatorUserFullName] Gets or sets the full name of the
   * creator user.
   */
  creatorUserFullName?: string;
  /**
   * @member {number} [creatorGroupID] Gets or sets the creator group
   * identifier.
   */
  creatorGroupID?: number;
  /**
   * @member {string} [creatorGroupName] Gets or sets the name of the creator
   * group.
   */
  creatorGroupName?: string;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {string} [modifierUserFullName] Gets or sets the full name of the
   * modifier user.
   */
  modifierUserFullName?: string;
  /**
   * @member {number} [modifierGroupID] Gets or sets the modifier group
   * identifier.
   */
  modifierGroupID?: number;
  /**
   * @member {string} [modifierGroupName] Gets or sets the name of the modifier
   * group.
   */
  modifierGroupName?: string;
  /**
   * @member {Date} [creationTime] Gets or sets the creation time.
   */
  creationTime?: Date;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time.
   */
  modificationTime?: Date;
  /**
   * @member {Date} [accessTime] Gets or sets the access time.
   */
  accessTime?: Date;
  /**
   * @member {Date} [resolutionTime] Gets or sets the resolution time.
   */
  resolutionTime?: Date;
  /**
   * @member {number} [category] Gets or sets the category.
   */
  category?: number;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {State3} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
   * 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
   * 'ReviewedRoutingSlipOpen'
   */
  state?: State3;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing ExtensionModel.
 * The model that is sent in response to a GET request for Extension
 *
 */
export interface ExtensionModel {
  /**
   * @member {UpdateAction} [updateAction] Gets or sets the update action.
   * Possible values include: 'None', 'Update', 'Add', 'Remove'
   */
  updateAction?: UpdateAction;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [profileID] Gets or sets the profile identifier.
   */
  profileID?: number;
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [type] Gets or sets the type.
   */
  type?: number;
  /**
   * @member {number} [rowNumber] Gets or sets the row number.
   */
  rowNumber?: number;
  /**
   * @member {string[]} [strings] Gets or sets the strings.
   */
  strings?: string[];
  /**
   * @member {number[]} [integers] Gets or sets the integers.
   */
  integers?: number[];
  /**
   * @member {number[]} [doubles] Gets or sets the doubles.
   */
  doubles?: number[];
  /**
   * @member {Date[] | string[]} [dates] Gets or sets the dates.
   */
  dates?: Date[] | string[];
}

/**
 * @interface
 * An interface representing ProfileModel.
 * The model that is sent in response to a GET request for Entity
 *
 */
export interface ProfileModel {
  /**
   * @member {number} [id] Gets or sets the profile identifier.
   */
  id?: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [type] Gets or sets the type.
   */
  type?: number;
  /**
   * @member {number} [extensionCount] Gets or sets the extension count.
   */
  extensionCount?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   */
  ownerUserFullName?: string;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   */
  ownerGroupName?: string;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {string} [modifierUserFullName] Gets or sets the full name of the
   * modifier user.
   */
  modifierUserFullName?: string;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time.
   */
  modificationTime?: Date;
  /**
   * @member {string[]} [strings] Gets or sets the strings.
   */
  strings?: string[];
  /**
   * @member {number[]} [integers] Gets or sets the integers.
   */
  integers?: number[];
  /**
   * @member {number[]} [doubles] Gets or sets the doubles.
   */
  doubles?: number[];
  /**
   * @member {Date[] | string[]} [dates] Gets or sets the dates.
   */
  dates?: Date[] | string[];
  /**
   * @member {ExtensionModel[]} [extensions] Gets or sets the extensions.
   */
  extensions?: ExtensionModel[];
}

/**
 * @interface
 * An interface representing EntityModel.
 * The model that is sent in response to a GET request for Entity
 *
 */
export interface EntityModel {
  /**
   * @member {ProfileModel[]} [profiles] Gets or sets the profiles.
   */
  profiles?: ProfileModel[];
  /**
   * @member {number} [id] Gets or sets the entity identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [type] Gets or sets the type.
   */
  type?: number;
  /**
   * @member {number} [subtype] Gets or sets the subtype.
   */
  subtype?: number;
  /**
   * @member {number} [age] Gets or sets the age.
   */
  age?: number;
  /**
   * @member {number} [referenceCount] Gets or sets the reference identifier.
   */
  referenceCount?: number;
  /**
   * @member {number} [accessCount] Gets or sets the access count.
   */
  accessCount?: number;
  /**
   * @member {number} [profileCount] Gets or sets the profile count.
   */
  profileCount?: number;
  /**
   * @member {number} [attachCount] Gets or sets the attach count.
   */
  attachCount?: number;
  /**
   * @member {number} [noteCount] Gets or sets the note count.
   */
  noteCount?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   */
  ownerUserFullName?: string;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   */
  ownerGroupName?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {string} [creatorUserFullName] Gets or sets the full name of the
   * creator user.
   */
  creatorUserFullName?: string;
  /**
   * @member {number} [creatorGroupID] Gets or sets the creator group
   * identifier.
   */
  creatorGroupID?: number;
  /**
   * @member {string} [creatorGroupName] Gets or sets the name of the creator
   * group.
   */
  creatorGroupName?: string;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {string} [modifierUserFullName] Gets or sets the full name of the
   * modifier user.
   */
  modifierUserFullName?: string;
  /**
   * @member {number} [modifierGroupID] Gets or sets the modifier group
   * identifier.
   */
  modifierGroupID?: number;
  /**
   * @member {string} [modifierGroupName] Gets or sets the name of the modifier
   * group.
   */
  modifierGroupName?: string;
  /**
   * @member {Date} [creationTime] Gets or sets the creation time.
   */
  creationTime?: Date;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time.
   */
  modificationTime?: Date;
  /**
   * @member {Date} [accessTime] Gets or sets the access time.
   */
  accessTime?: Date;
  /**
   * @member {Date} [resolutionTime] Gets or sets the resolution time.
   */
  resolutionTime?: Date;
  /**
   * @member {number} [category] Gets or sets the category.
   */
  category?: number;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {State4} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
   * 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
   * 'ReviewedRoutingSlipOpen'
   */
  state?: State4;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing UpdateEntityRequestModel.
 * The model for PUT Entity input parameters.
 *
 */
export interface UpdateEntityRequestModel {
  /**
   * @member {ProfileModel[]} [profiles] Gets or sets the profiles.
   */
  profiles?: ProfileModel[];
  /**
   * @member {State5} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
   * 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
   * 'ReviewedRoutingSlipOpen'
   */
  state?: State5;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing InsertEntityRequestModel.
 * The Insert Entity Model.
 *
 */
export interface InsertEntityRequestModel {
  /**
   * @member {ProfileModel[]} [profiles] Gets or sets the profiles.
   */
  profiles?: ProfileModel[];
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [type] Gets or sets the type.
   */
  type?: number;
  /**
   * @member {string} name Gets or sets the Name.
   */
  name: string;
}

/**
 * @interface
 * An interface representing EntityContentModel.
 * Entity Content Model
 *
 */
export interface EntityContentModel {
  /**
   * @member {EntityContent} [entityContent] Gets or sets the content of the
   * entity. Possible values include: 'None', 'All', 'Profiles', 'Attachments',
   * 'Notes', 'Links', 'Events'
   */
  entityContent?: EntityContent;
}

/**
 * @interface
 * An interface representing GetEventRequestModel.
 * Model for the GET Event input parameters
 *
 */
export interface GetEventRequestModel {
  /**
   * @member {number} drawerID Gets or sets the drawer identifier.
   */
  drawerID: number;
  /**
   * @member {number} entityID Gets or sets the entity identifier.
   */
  entityID: number;
  /**
   * @member {Type2} [type] Gets or sets the type. Possible values include:
   * 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL',
   * 'DDE'
   */
  type?: Type2;
  /**
   * @member {Date} [minEventTime] Gets or sets the minimum event time.
   */
  minEventTime?: Date;
  /**
   * @member {Date} [maxEventTime] Gets or sets the maximum event time.
   */
  maxEventTime?: Date;
  /**
   * @member {number} [eventUserID] Gets or sets the event user identifier.
   */
  eventUserID?: number;
  /**
   * @member {number} [eventGroupID] Gets or sets the event group identifier.
   */
  eventGroupID?: number;
  /**
   * @member {Category} [category] Gets or sets the category. Possible values
   * include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion',
   * 'Field', 'Workflow'
   */
  category?: Category;
  /**
   * @member {ClassProperty} [classProperty] Gets or sets the class. Possible
   * values include: 'Undefined', 'Application', 'Security', 'System'
   */
  classProperty?: ClassProperty;
  /**
   * @member {Operation} [operation] Gets or sets the operation. Possible
   * values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
   * 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge',
   * 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
   * 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward',
   * 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
   */
  operation?: Operation;
  /**
   * @member {number} [minProcessingTime] Gets or sets the minimum processing
   * time.
   */
  minProcessingTime?: number;
  /**
   * @member {number} [maxProcessingTime] Gets or sets the maximum processing
   * time.
   */
  maxProcessingTime?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder4} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder4;
  /**
   * @member {SortBy4} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'EventTime'
   */
  sortBy?: SortBy4;
}

/**
 * @interface
 * An interface representing EventModel.
 * The model that is sent in response to a GET request for Event
 *
 */
export interface EventModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {Type3} [type] Gets or sets the type. Possible values include:
   * 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL',
   * 'DDE'
   */
  type?: Type3;
  /**
   * @member {Date} [eventTime] Gets or sets the event time.
   */
  eventTime?: Date;
  /**
   * @member {number} [eventUserID] Gets or sets the event user identifier.
   */
  eventUserID?: number;
  /**
   * @member {string} [eventUserFullName] Gets or sets the full name of the
   * event user.
   */
  eventUserFullName?: string;
  /**
   * @member {number} [eventGroupID] Gets or sets the event group identifier.
   */
  eventGroupID?: number;
  /**
   * @member {string} [eventGroupName] Gets or sets the name of the event
   * group.
   */
  eventGroupName?: string;
  /**
   * @member {Category1} [category] Gets or sets the category. Possible values
   * include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion',
   * 'Field', 'Workflow'
   */
  category?: Category1;
  /**
   * @member {ClassProperty1} [classProperty] Gets or sets the class. Possible
   * values include: 'Undefined', 'Application', 'Security', 'System'
   */
  classProperty?: ClassProperty1;
  /**
   * @member {Operation1} [operation] Gets or sets the operation. Possible
   * values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
   * 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge',
   * 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
   * 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward',
   * 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
   */
  operation?: Operation1;
  /**
   * @member {string} [source] Gets or sets the source.
   */
  source?: string;
  /**
   * @member {string} [computer] Gets or sets the computer.
   */
  computer?: string;
  /**
   * @member {string} [iPAddress] Gets or sets the ip address.
   */
  iPAddress?: string;
  /**
   * @member {string} [description] Gets or sets the description.
   */
  description?: string;
  /**
   * @member {number} [processTime] Gets or sets the process time.
   */
  processTime?: number;
  /**
   * @member {any} [details] Gets or sets the details.
   */
  details?: any;
}

/**
 * @interface
 * An interface representing GetExtensionRequestModel.
 * Model for the GET Extension input parameters
 *
 */
export interface GetExtensionRequestModel {
  /**
   * @member {number} drawerID Gets or sets the drawer identifier.
   */
  drawerID: number;
  /**
   * @member {number} entityID Gets or sets the entity identifier.
   */
  entityID: number;
  /**
   * @member {number} profileID Gets or sets the profile identifier.
   */
  profileID: number;
  /**
   * @member {number} [id] Gets or sets the extension identifier.
   */
  id?: number;
  /**
   * @member {number} [type] Gets or sets the type of the extension.
   */
  type?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder5} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder5;
  /**
   * @member {SortBy5} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer', 'Double',
   * 'Date'
   */
  sortBy?: SortBy5;
}

/**
 * @interface
 * An interface representing GetFlowRequestModel.
 * Model for the GET Flow input parameters
 *
 */
export interface GetFlowRequestModel {
  /**
   * @member {number} drawerID Gets or sets the drawer identifier.
   */
  drawerID: number;
  /**
   * @member {number} entityID Gets or sets the entity identifier.
   */
  entityID: number;
  /**
   * @member {Type4} [type] Gets or sets the type. Possible values include:
   * 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc',
   * 'Sql', 'Dde'
   */
  type?: Type4;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {Date} [minWorkflowTime] Gets or sets the minimum workflow time.
   */
  minWorkflowTime?: Date;
  /**
   * @member {Date} [maxWorkflowTime] Gets or sets the maximum workflow time.
   */
  maxWorkflowTime?: Date;
  /**
   * @member {Date} [minInsertionTime] Gets or sets the minimum insertion time.
   */
  minInsertionTime?: Date;
  /**
   * @member {Date} [maxInsertionTime] Gets or sets the maximum insertion time.
   */
  maxInsertionTime?: Date;
  /**
   * @member {number} [workflowUserID] Gets or sets the workflow user
   * identifier.
   */
  workflowUserID?: number;
  /**
   * @member {number} [workflowGroupID] Gets or sets the workflow group
   * identifier.
   */
  workflowGroupID?: number;
  /**
   * @member {Operation2} [operation] Gets or sets the operation. Possible
   * values include: 'None', 'Update', 'Reset', 'Override', 'Null'
   */
  operation?: Operation2;
  /**
   * @member {Category2} [category] Gets or sets the category. Possible values
   * include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset',
   * 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
   */
  category?: Category2;
  /**
   * @member {Status} [status] Gets or sets the status. Possible values
   * include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
   */
  status?: Status;
  /**
   * @member {State6} [state] Gets or sets the state. Possible values include:
   * 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override',
   * 'OverrideR', 'WaitingR'
   */
  state?: State6;
  /**
   * @member {number} [minIndex1] Gets or sets the minimum index 1.
   */
  minIndex1?: number;
  /**
   * @member {number} [maxIndex1] Gets or sets the maximum index 1.
   */
  maxIndex1?: number;
  /**
   * @member {number} [minIndex2] Gets or sets the minimum index 2.
   */
  minIndex2?: number;
  /**
   * @member {number} [maxIndex2] Gets or sets the maximum index 2.
   */
  maxIndex2?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder6} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder6;
  /**
   * @member {SortBy6} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime',
   * 'Index'
   */
  sortBy?: SortBy6;
}

/**
 * @interface
 * An interface representing FlowModel.
 * The model that is sent in response to a GET request for Flow
 *
 */
export interface FlowModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {Type5} [type] Gets or sets the type. Possible values include:
   * 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc',
   * 'Sql', 'Dde'
   */
  type?: Type5;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {Date} [workflowTime] Gets or sets the workflow time.
   */
  workflowTime?: Date;
  /**
   * @member {Date} [insertionTime] Gets or sets the insertion time.
   */
  insertionTime?: Date;
  /**
   * @member {number} [workflowUserID] Gets or sets the workflow user
   * identifier.
   */
  workflowUserID?: number;
  /**
   * @member {string} [workflowUserFullName] Gets or sets the full name of the
   * workflow user.
   */
  workflowUserFullName?: string;
  /**
   * @member {number} [workflowGroupID] Gets or sets the workflow group
   * identifier.
   */
  workflowGroupID?: number;
  /**
   * @member {string} [workflowGroupName] Gets or sets the name of the workflow
   * group.
   */
  workflowGroupName?: string;
  /**
   * @member {Operation3} [operation] Gets or sets the operation. Possible
   * values include: 'None', 'Update', 'Reset', 'Override', 'Null'
   */
  operation?: Operation3;
  /**
   * @member {Category3} [category] Gets or sets the category. Possible values
   * include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset',
   * 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
   */
  category?: Category3;
  /**
   * @member {Status1} [status] Gets or sets the status. Possible values
   * include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
   */
  status?: Status1;
  /**
   * @member {State7} [state] Gets or sets the state. Possible values include:
   * 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override',
   * 'OverrideR', 'WaitingR'
   */
  state?: State7;
  /**
   * @member {string} [source] Gets or sets the source.
   */
  source?: string;
  /**
   * @member {string} [iPAddress] Gets or sets the ip address.
   */
  iPAddress?: string;
  /**
   * @member {string} [computer] Gets or sets the computer.
   */
  computer?: string;
  /**
   * @member {string} [description] Gets or sets the description.
   */
  description?: string;
  /**
   * @member {number} [index1] Gets or sets the index1.
   */
  index1?: number;
  /**
   * @member {number} [index2] Gets or sets the index2.
   */
  index2?: number;
}

/**
 * @interface
 * An interface representing GetDefinitionModel.
 * Model for the GET Template input parameters
 *
 */
export interface GetDefinitionModel {
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [category] Gets or sets the category.
   */
  category?: string;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder7} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder7;
  /**
   * @member {number} [sortBy] Gets or sets the column to order by.
   */
  sortBy?: number;
}

/**
 * @interface
 * An interface representing ItemDefinitionModel.
 * Model for template items (drop down values)
 *
 */
export interface ItemDefinitionModel {
  /**
   * @member {string} [id] Gets or sets the identifier.
   */
  id?: string;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {number} value Gets or sets the value.
   */
  value: number;
  /**
   * @member {Type6} type Gets or sets the type. Possible values include:
   * 'Undefined', 'ComboBoxItem', 'ListBoxItem', 'RadioButton',
   * 'ForwardAction', 'ReplyAction'
   */
  type: Type6;
}

/**
 * @interface
 * An interface representing FieldDefinitionModel.
 * Model for Template Fields
 *
 */
export interface FieldDefinitionModel {
  /**
   * @member {string} [id] Gets or sets the identifier.
   */
  id?: string;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {string} [xmlTag] Gets or sets the XML tag.
   */
  xmlTag?: string;
  /**
   * @member {Type7} type Gets or sets the type. Possible values include:
   * 'Undefined', 'String', 'Integer', 'Double', 'DateTime', 'Paragraph',
   * 'CheckBox', 'RadioButton', 'ComboBox', 'ListBox', 'Table', 'LargeText',
   * 'ComboString'
   */
  type: Type7;
  /**
   * @member {number} index Gets or sets the index.
   */
  index: number;
  /**
   * @member {number} position Gets or sets the position.
   */
  position: number;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
  /**
   * @member {boolean} [isEnabled] Gets or sets a value indicating whether this
   * instance is enabled.
   */
  isEnabled?: boolean;
  /**
   * @member {IsRequired} [isRequired] Gets or sets a value indicating whether
   * this instance is required. Possible values include: 'NotRequired',
   * 'Always', 'OnAccept'
   */
  isRequired?: IsRequired;
  /**
   * @member {boolean} [isProtected] Gets or sets a value indicating whether
   * this instance is protected.
   */
  isProtected?: boolean;
  /**
   * @member {string} [default] Gets or sets the default value.
   */
  default?: string;
  /**
   * @member {string} [mask] Gets or sets the mask.
   */
  mask?: string;
  /**
   * @member {number} [length] Gets or sets the length.
   */
  length?: number;
  /**
   * @member {boolean} [isMultiline] Gets or sets a value indicating whether
   * this instance is multiline.
   */
  isMultiline?: boolean;
  /**
   * @member {string} [format] Gets or sets the format.
   */
  format?: string;
  /**
   * @member {boolean} [isSorted] Gets or sets a value indicating whether this
   * instance is sorted.
   */
  isSorted?: boolean;
  /**
   * @member {number} [select] Gets or sets the select.
   */
  select?: number;
  /**
   * @member {string} [formula] Gets or sets the formula.
   */
  formula?: string;
  /**
   * @member {boolean} [hasValidation] Gets or sets a value indicating whether
   * this instance has validation.
   */
  hasValidation?: boolean;
  /**
   * @member {string} [validationColumn] Gets or sets the validation column.
   */
  validationColumn?: string;
  /**
   * @member {number} [foundOperation] Gets or sets the found operation.
   */
  foundOperation?: number;
  /**
   * @member {number} [notFoundOperation] Gets or sets the not found operation.
   */
  notFoundOperation?: number;
  /**
   * @member {number} [sampleImage] Gets or sets the sample image.
   */
  sampleImage?: number;
  /**
   * @member {string} [lookup] Gets or sets the lookup.
   */
  lookup?: string;
  /**
   * @member {boolean} [hasLink] Gets or sets a value indicating whether this
   * instance has linking enabled.
   */
  hasLink?: boolean;
  /**
   * @member {number} [linkEntityType] Gets or sets the type of the link
   * entity.
   */
  linkEntityType?: number;
  /**
   * @member {string} [linkProfile] Gets or sets the link profile.
   */
  linkProfile?: string;
  /**
   * @member {string} [linkField] Gets or sets the link field.
   */
  linkField?: string;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {boolean} [reservedBit1] Gets or sets a value indicating whether
   * [reserved bit1].
   */
  reservedBit1?: boolean;
  /**
   * @member {boolean} [reservedBit2] Gets or sets a value indicating whether
   * [reserved bit2].
   */
  reservedBit2?: boolean;
  /**
   * @member {ItemDefinitionModel[]} [items] Gets or sets the template items.
   */
  items?: ItemDefinitionModel[];
  /**
   * @member {FieldDefinitionModel[]} [fields] Gets or sets the fields.
   */
  fields?: FieldDefinitionModel[];
}

/**
 * @interface
 * An interface representing ProfileDefinitionModel.
 * Model for Template Profiles
 *
 */
export interface ProfileDefinitionModel {
  /**
   * @member {string} [id] Gets or sets the identifier.
   */
  id?: string;
  /**
   * @member {number} type Gets or sets the type.
   */
  type: number;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {FieldDefinitionModel[]} [fields] Gets or sets the fields.
   */
  fields?: FieldDefinitionModel[];
}

/**
 * @interface
 * An interface representing EntityDefinitionModel.
 * Model for entity templates
 *
 */
export interface EntityDefinitionModel {
  /**
   * @member {string} [id] Gets or sets the identifier.
   */
  id?: string;
  /**
   * @member {Date} [creationTime] Gets or sets the creation time.
   */
  creationTime?: Date;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time.
   */
  modificationTime?: Date;
  /**
   * @member {number} type Gets or sets the type of template.
   */
  type: number;
  /**
   * @member {string} category Gets or sets the category of template.
   */
  category: string;
  /**
   * @member {string} name Gets or sets the name of template.
   */
  name: string;
  /**
   * @member {boolean} [hasClass] Gets or sets if the template has classes.
   */
  hasClass?: boolean;
  /**
   * @member {boolean} [hasSecurity] Gets or sets if the template has security.
   */
  hasSecurity?: boolean;
  /**
   * @member {boolean} [hasProfiles] Gets or sets if the template has profiles.
   */
  hasProfiles?: boolean;
  /**
   * @member {boolean} [hasItems] Gets or sets the has items.
   */
  hasItems?: boolean;
  /**
   * @member {string} [smallImage] Gets or sets the small image.
   */
  smallImage?: string;
  /**
   * @member {string} [largeImage] Gets or sets the large image.
   */
  largeImage?: string;
  /**
   * @member {boolean} [hasAudit] Gets or sets if the template has auditing
   * enabled.
   */
  hasAudit?: boolean;
  /**
   * @member {boolean} [allowsViewImages] Gets or sets if the template allows
   * viewing images.
   */
  allowsViewImages?: boolean;
  /**
   * @member {boolean} [isReviewState] Gets or sets if the entity is created in
   * a review state.
   */
  isReviewState?: boolean;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {number[]} [drawers] Gets or sets the drawers.
   */
  drawers?: number[];
  /**
   * @member {ProfileDefinitionModel[]} [profiles] Gets or sets the profiles.
   */
  profiles?: ProfileDefinitionModel[];
}

/**
 * @interface
 * An interface representing EntityDefinitionBase.
 * The entity definition base, also acts as the insert model.
 *
 */
export interface EntityDefinitionBase {
  /**
   * @member {number} type Gets or sets the type of template.
   */
  type: number;
  /**
   * @member {string} category Gets or sets the category of template.
   */
  category: string;
  /**
   * @member {string} name Gets or sets the name of template.
   */
  name: string;
  /**
   * @member {boolean} [hasClass] Gets or sets if the template has classes.
   */
  hasClass?: boolean;
  /**
   * @member {boolean} [hasSecurity] Gets or sets if the template has security.
   */
  hasSecurity?: boolean;
  /**
   * @member {boolean} [hasProfiles] Gets or sets if the template has profiles.
   */
  hasProfiles?: boolean;
  /**
   * @member {boolean} [hasItems] Gets or sets the has items.
   */
  hasItems?: boolean;
  /**
   * @member {string} [smallImage] Gets or sets the small image.
   */
  smallImage?: string;
  /**
   * @member {string} [largeImage] Gets or sets the large image.
   */
  largeImage?: string;
  /**
   * @member {boolean} [hasAudit] Gets or sets if the template has auditing
   * enabled.
   */
  hasAudit?: boolean;
  /**
   * @member {boolean} [allowsViewImages] Gets or sets if the template allows
   * viewing images.
   */
  allowsViewImages?: boolean;
  /**
   * @member {boolean} [isReviewState] Gets or sets if the entity is created in
   * a review state.
   */
  isReviewState?: boolean;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {number[]} [drawers] Gets or sets the drawers.
   */
  drawers?: number[];
  /**
   * @member {ProfileDefinitionModel[]} [profiles] Gets or sets the profiles.
   */
  profiles?: ProfileDefinitionModel[];
}

/**
 * @interface
 * An interface representing UpdateEntityDefinitionRequestModel.
 * The Entity template update class.
 *
 */
export interface UpdateEntityDefinitionRequestModel {
  /**
   * @member {string} [category] Gets or sets the category of template.
   */
  category?: string;
  /**
   * @member {string} [name] Gets or sets the name of templates.
   */
  name?: string;
  /**
   * @member {string} [smallImage] Gets or sets the small image.
   */
  smallImage?: string;
  /**
   * @member {string} [largeImage] Gets or sets the large image.
   */
  largeImage?: string;
  /**
   * @member {boolean} [hasAudit] Gets or sets if the template has auditing
   * enabled.
   */
  hasAudit?: boolean;
  /**
   * @member {boolean} [allowsViewImages] Gets or sets if the template allows
   * viewing images.
   */
  allowsViewImages?: boolean;
  /**
   * @member {boolean} [isReviewState] Gets or sets if the entity is created in
   * a review state.
   */
  isReviewState?: boolean;
  /**
   * @member {ProfileDefinitionModel[]} [profiles] Gets or sets the profiles.
   */
  profiles?: ProfileDefinitionModel[];
}

/**
 * @interface
 * An interface representing GetLookupFieldModel.
 * Model for the GET Lookup Fields input parameters
 *
 */
export interface GetLookupFieldModel {
  /**
   * @member {string} [columnName] Gets or sets the name of the column.
   */
  columnName?: string;
  /**
   * @member {string} [columnValue] Gets or sets the column value.
   */
  columnValue?: string;
}

/**
 * @interface
 * An interface representing GetFieldValidationModel.
 * Model for the GET Template input parameters
 *
 */
export interface GetFieldValidationModel {
  /**
   * @member {string} [sortColumn] Gets or sets the sort column.
   */
  sortColumn?: string;
  /**
   * @member {GetLookupFieldModel[]} [metadata] Gets or sets the metadata
   * search options.
   */
  metadata?: GetLookupFieldModel[];
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder8} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder8;
  /**
   * @member {number} [sortBy] Gets or sets the column to order by.
   */
  sortBy?: number;
}

/**
 * @interface
 * An interface representing LookupField.
 */
export interface LookupField {
  /**
   * @member {string} [column]
   */
  column?: string;
  /**
   * @member {number} [profileIndex]
   */
  profileIndex?: number;
  /**
   * @member {number} [fieldIndex]
   */
  fieldIndex?: number;
  /**
   * @member {number} [extensionIndex]
   */
  extensionIndex?: number;
}

/**
 * @interface
 * An interface representing FieldValidationModel.
 * Model for Template Field Validation
 *
 */
export interface FieldValidationModel {
  /**
   * @member {LookupField[]} [lookup] Gets or sets the lookup.
   */
  lookup?: LookupField[];
  /**
   * @member {{ [propertyName: string]: string }[]} [values] Gets or sets the
   * values.
   */
  values?: { [propertyName: string]: string }[];
}

/**
 * @interface
 * An interface representing GetGroupRequestModel.
 * Model for the GET Group input parameters
 *
 */
export interface GetGroupRequestModel {
  /**
   * @member {number} [id] Gets or sets the group identifier.
   */
  id?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {Type8} [type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   */
  type?: Type8;
  /**
   * @member {State8} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   */
  state?: State8;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder9} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder9;
  /**
   * @member {SortBy7} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Name', 'Type', 'State'
   */
  sortBy?: SortBy7;
}

/**
 * @interface
 * An interface representing GroupModel.
 * The model that is sent in response to a GET request for Groups
 *
 */
export interface GroupModel {
  /**
   * @member {number} [id] Gets or sets the group identifier.
   */
  id?: number;
  /**
   * @member {number} [queueCount] Gets or sets the queue count.
   */
  queueCount?: number;
  /**
   * @member {number} [userCount] Gets or sets the user count.
   */
  userCount?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {Type9} [type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   */
  type?: Type9;
  /**
   * @member {State9} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   */
  state?: State9;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing InsertGroupRequestModel.
 * Model for POST Group input Parameters.
 *
 */
export interface InsertGroupRequestModel {
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {Type10} [type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   */
  type?: Type10;
}

/**
 * @interface
 * An interface representing GroupBase.
 * The Group Base class.
 *
 */
export interface GroupBase {
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {Type11} [type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   */
  type?: Type11;
  /**
   * @member {State10} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   */
  state?: State10;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing GetEntityLinkRequestModel.
 * Model for the GET Link input parameters
 *
 */
export interface GetEntityLinkRequestModel {
  /**
   * @member {number} [childEntityID] Gets or sets the child entity identifier.
   */
  childEntityID?: number;
  /**
   * @member {number} [childDrawerID] Gets or sets the child drawer identifier.
   */
  childDrawerID?: number;
  /**
   * @member {number} [childType] Gets or sets the type of the child.
   */
  childType?: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {Date} [minInsertionTime] Gets or sets the minimum insertion time.
   */
  minInsertionTime?: Date;
  /**
   * @member {Date} [maxInsertionTime] Gets or sets the maximum insertion time.
   */
  maxInsertionTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder10} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder10;
  /**
   * @member {SortBy8} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   */
  sortBy?: SortBy8;
}

/**
 * @interface
 * An interface representing EntityLinkModel.
 * The model that is sent in response to a GET request for Link
 *
 */
export interface EntityLinkModel {
  /**
   * @member {number} [childDrawerID] Gets or sets the child drawer identifier.
   */
  childDrawerID?: number;
  /**
   * @member {number} [childEntityID] Gets or sets the child entity identifier.
   */
  childEntityID?: number;
  /**
   * @member {number} [childType] Gets or sets the type of the child.
   */
  childType?: number;
  /**
   * @member {string} [virtualName] Gets or sets the name of the virtual.
   */
  virtualName?: string;
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   */
  ownerUserFullName?: string;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   */
  ownerGroupName?: string;
  /**
   * @member {number} [includerUserID] Gets or sets the includer user
   * identifier.
   */
  includerUserID?: number;
  /**
   * @member {string} [includerUserFullName] Gets or sets the full name of the
   * includer user.
   */
  includerUserFullName?: string;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {string} [modifierUserFullName] Gets or sets the full name of the
   * modifier user.
   */
  modifierUserFullName?: string;
  /**
   * @member {Date} [insertionTime] Gets or sets the insertion time.
   */
  insertionTime?: Date;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time.
   */
  modificationTime?: Date;
  /**
   * @member {number} [classProperty] Gets or sets the class.
   */
  classProperty?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {number} [pageNumber] Gets or sets the page number.
   */
  pageNumber?: number;
  /**
   * @member {State11} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic', 'Static',
   * 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   */
  state?: State11;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
}

/**
 * @interface
 * An interface representing UpdateEntityLinkRequestModel.
 * The model for PUT EntityLink input parameters.
 *
 */
export interface UpdateEntityLinkRequestModel {
  /**
   * @member {string} [virtualName] Gets or sets the name of the virtual.
   */
  virtualName?: string;
  /**
   * @member {number} [classProperty] Gets or sets the class.
   */
  classProperty?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {number} [pageNumber] Gets or sets the page number.
   */
  pageNumber?: number;
  /**
   * @member {State12} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic', 'Static',
   * 'New', 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
   * 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
   * 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2', 'Dynres1',
   * 'User1', 'User2', 'User3', 'User4', 'User5', 'User6', 'User7', 'User8',
   * 'User9', 'User10', 'User11', 'User12', 'User13', 'User14', 'User15',
   * 'User16'
   */
  state?: State12;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
}

/**
 * @interface
 * An interface representing InsertEntityLinkRequestModel.
 * The EntityLink model for POST Requests.
 *
 */
export interface InsertEntityLinkRequestModel {
  /**
   * @member {number} [classProperty] Gets or sets the class.
   */
  classProperty?: number;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {number} [pageNumber] Gets or sets the page number.
   */
  pageNumber?: number;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
  /**
   * @member {number} [childDrawerID] Gets or sets the child drawer identifier.
   */
  childDrawerID?: number;
  /**
   * @member {number} [childEntityID] Gets or sets the child entity identifier.
   */
  childEntityID?: number;
  /**
   * @member {number} [childType] Gets or sets the type of the child.
   */
  childType?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {string} [virtualName] Gets or sets the name of the virtual.
   */
  virtualName?: string;
}

/**
 * @interface
 * An interface representing LockModel.
 * The model that is sent in response to a GET request for Locks
 *
 */
export interface LockModel {
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [sessionID] Gets or sets the user session identifier.
   */
  sessionID?: number;
  /**
   * @member {number} [userID] Gets or sets the identifier of the user who
   * inserted the entity lock.
   */
  userID?: number;
  /**
   * @member {string} [userFullName] Gets or sets the full name of the user who
   * inserted the lock.
   */
  userFullName?: string;
  /**
   * @member {Date} [lockTime] Gets or sets the time when the lock was placed
   * on the entity.
   */
  lockTime?: Date;
  /**
   * @member {Date} [expirationTime] Gets or sets the expiration time of the
   * lock.
   */
  expirationTime?: Date;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions
   * of the lock.
   */
  acl?: number;
  /**
   * @member {string} [applicationName] Gets or sets the name of the
   * application creating the lock.
   */
  applicationName?: string;
}

/**
 * @interface
 * An interface representing UpdateLockRequestModel.
 * Update request model for Locks
 *
 */
export interface UpdateLockRequestModel {
  /**
   * @member {number} [expirationDuration] Gets or sets the expiration duration
   * of the lock in minutes.
   */
  expirationDuration?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions
   * of the lock.
   */
  acl?: number;
  /**
   * @member {string} [applicationName] Gets or sets the name of the
   * application creating the lock.
   */
  applicationName?: string;
}

/**
 * @interface
 * An interface representing GetNoteRequestModel.
 * Model for the GET Note input parameters
 *
 */
export interface GetNoteRequestModel {
  /**
   * @member {number} drawerID Gets or sets the drawer identifier.
   */
  drawerID: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {Date} [minCreationTime] Gets or sets the minimum creation time.
   */
  minCreationTime?: Date;
  /**
   * @member {Date} [maxCreationTime] Gets or sets the maximum creation time.
   */
  maxCreationTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [parentID] Gets or sets the parent note identifier.
   */
  parentID?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder11} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder11;
  /**
   * @member {SortBy9} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'EntityID', 'Name', 'CreationTime',
   * 'ModificationTime'
   */
  sortBy?: SortBy9;
}

/**
 * @interface
 * An interface representing NoteModel.
 * The model that is sent in response to a GET request for Notes
 *
 */
export interface NoteModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   */
  ownerUserFullName?: string;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   */
  ownerGroupName?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {string} [creatorUserFullName] Gets or sets the full name of the
   * creator user.
   */
  creatorUserFullName?: string;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {string} [modifierUserFullName] Gets or sets the full name of the
   * modifier user.
   */
  modifierUserFullName?: string;
  /**
   * @member {Date} [creationTime] Gets or sets the creation time.
   */
  creationTime?: Date;
  /**
   * @member {Date} [modificationTime] Gets or sets the modification time.
   */
  modificationTime?: Date;
  /**
   * @member {number} [parentID] Gets or sets the parent identifier.
   */
  parentID?: number;
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
}

/**
 * @interface
 * An interface representing NoteBase.
 * Note Base Class.
 *
 */
export interface NoteBase {
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [note] Gets or sets the note.
   */
  note?: string;
}

/**
 * @interface
 * An interface representing InsertNoteRequestModel.
 * Model for POST Note input parameters.
 *
 */
export interface InsertNoteRequestModel {
  /**
   * @member {number} [acl] Gets or sets the acl.
   */
  acl?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {string} note Gets or sets the note.
   */
  note: string;
  /**
   * @member {number} [parentID] Gets or sets the parent identifier.
   */
  parentID?: number;
}

/**
 * @interface
 * An interface representing GetQueueAssignmentModel.
 * Defines the criteria to perform a query on assignments
 *
 */
export interface GetQueueAssignmentModel {
  /**
   * @member {number} [queueID] Gets or sets the unique queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {Type12} [type] Gets or sets the queue assignment type. Possible
   * values include: 'Unspecified', 'Primary', 'Secondary'
   */
  type?: Type12;
  /**
   * @member {number} [order] Gets or sets the sort order.
   */
  order?: number;
  /**
   * @member {TaskSortColumn} [taskSortColumn] Gets or sets the task sort
   * column. Possible values include: 'TaskID', 'QueueID', 'DrawerID',
   * 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description',
   * 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   */
  taskSortColumn?: TaskSortColumn;
  /**
   * @member {State13} [state] Gets or sets the state. Possible values include:
   * 'Unspecified', 'Inactive', 'Active'
   */
  state?: State13;
  /**
   * @member {FetchType} [fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   */
  fetchType?: FetchType;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder12} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder12;
  /**
   * @member {SortBy10} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order',
   * 'FetchType'
   */
  sortBy?: SortBy10;
}

/**
 * @interface
 * An interface representing QueueAssignmentModel.
 * Defines properties and methods for Queue Assignment
 *
 */
export interface QueueAssignmentModel {
  /**
   * @member {number} [queueID] Gets or sets the unique queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {Type13} [type] Gets or sets the queue assignment type. Possible
   * values include: 'Unspecified', 'Primary', 'Secondary'
   */
  type?: Type13;
  /**
   * @member {number} [order] Gets or sets the sort order.
   */
  order?: number;
  /**
   * @member {TaskSortColumn1} [taskSortColumn] Gets or sets the task sort
   * column. Possible values include: 'TaskID', 'QueueID', 'DrawerID',
   * 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description',
   * 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   */
  taskSortColumn?: TaskSortColumn1;
  /**
   * @member {State14} [state] Gets or sets the state. Possible values include:
   * 'Unspecified', 'Inactive', 'Active'
   */
  state?: State14;
  /**
   * @member {FetchType1} [fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   */
  fetchType?: FetchType1;
}

/**
 * @interface
 * An interface representing InsertQueueAssignmentRequestModel.
 * Model for POST/PUT Queue Assignment input parameters.
 *
 */
export interface InsertQueueAssignmentRequestModel {
  /**
   * @member {number} [queueID] Gets or sets the unique queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {Type14} [type] Gets or sets the queue assignment type. Possible
   * values include: 'Unspecified', 'Primary', 'Secondary'
   */
  type?: Type14;
  /**
   * @member {number} [order] Gets or sets the sort order.
   */
  order?: number;
  /**
   * @member {TaskSortColumn2} [taskSortColumn] Gets or sets the task sort
   * column. Possible values include: 'TaskID', 'QueueID', 'DrawerID',
   * 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description',
   * 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   */
  taskSortColumn?: TaskSortColumn2;
  /**
   * @member {FetchType2} [fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   */
  fetchType?: FetchType2;
}

/**
 * @interface
 * An interface representing GetQueueModel.
 * Defines the criteria to perform a query on queues
 *
 */
export interface GetQueueModel {
  /**
   * @member {number} [id] Gets or sets the queue identifier.
   */
  id?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [alias] Gets or sets the alias.
   */
  alias?: string;
  /**
   * @member {Type15} [type] Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   */
  type?: Type15;
  /**
   * @member {number} [access] Gets or sets the access level.
   */
  access?: number;
  /**
   * @member {boolean} [bypassSecurity] Gets or sets a value indicating whether
   * to bypass security checks.
   */
  bypassSecurity?: boolean;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder13} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder13;
  /**
   * @member {SortBy11} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'Name', 'Alias'
   */
  sortBy?: SortBy11;
}

/**
 * @interface
 * An interface representing QueueModel.
 * Defines properties and methods for Queues
 *
 */
export interface QueueModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [userCount] Gets or sets the user count.
   */
  userCount?: number;
  /**
   * @member {number} [taskCount] Gets or sets the task count.
   */
  taskCount?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [alias] Gets or sets the alias.
   */
  alias?: string;
  /**
   * @member {State15} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   */
  state?: State15;
  /**
   * @member {Type16} [type] Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   */
  type?: Type16;
  /**
   * @member {string} [category] Gets or sets the category.
   */
  category?: string;
  /**
   * @member {string} [description] Gets or sets the description.
   */
  description?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved integer 2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string 1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string 2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing InsertQueueRequestModel.
 * Model for POST Queue input parameters.
 *
 */
export interface InsertQueueRequestModel {
  /**
   * @member {string} name Gets or sets the name.
   */
  name: string;
  /**
   * @member {string} alias Gets or sets the alias.
   */
  alias: string;
  /**
   * @member {Type17} type Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   */
  type: Type17;
}

/**
 * @interface
 * An interface representing QueueBase.
 * Model for PUT Queue parameters.
 *
 */
export interface QueueBase {
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [alias] Gets or sets the alias.
   */
  alias?: string;
  /**
   * @member {State16} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   */
  state?: State16;
  /**
   * @member {Type18} [type] Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   */
  type?: Type18;
  /**
   * @member {string} [category] Gets or sets the category.
   */
  category?: string;
  /**
   * @member {string} [description] Gets or sets the description.
   */
  description?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved integer 2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string 1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string 2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing GetTaskModel.
 * Model for the GET Task input parameters
 *
 */
export interface GetTaskModel {
  /**
   * @member {number} [lastTaskID] Gets or sets the last task identifier.
   */
  lastTaskID?: number;
  /**
   * @member {number} [id] Gets or sets the entity identifier.
   */
  id?: number;
  /**
   * @member {number} [type] Gets or sets the type of the entity.
   */
  type?: number;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [queueType] Gets or sets the type of the queue.
   */
  queueType?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [description] Gets or sets the task description.
   */
  description?: string;
  /**
   * @member {number} [taskID] Gets or sets the task identifier.
   */
  taskID?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder14} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder14;
  /**
   * @member {SortBy12} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority',
   * 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
   */
  sortBy?: SortBy12;
}

/**
 * @interface
 * An interface representing TaskModel.
 * The model that is sent in response to a GET request for Tasks
 *
 */
export interface TaskModel {
  /**
   * @member {number} [taskID] Gets or sets the task identifier.
   */
  taskID?: number;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [objectID] Gets or sets the object identifier (entity).
   */
  objectID?: number;
  /**
   * @member {number} [objectType] Gets or sets the type of the object
   * (entity).
   */
  objectType?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the task owner user
   * identifier.
   */
  ownerUserID?: number;
  /**
   * @member {string} [ownerUserFullName] Gets or sets the full name of the
   * owner user.
   */
  ownerUserFullName?: string;
  /**
   * @member {number} [ownerGroupID] Gets or sets the task owner group
   * identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {string} [ownerGroupName] Gets or sets the name of the owner
   * group.
   */
  ownerGroupName?: string;
  /**
   * @member {number} [effectiveUserID] Gets or sets the effective user
   * identifier.
   */
  effectiveUserID?: number;
  /**
   * @member {string} [effectiveUserFullName] Gets or sets the full name of the
   * effective user.
   */
  effectiveUserFullName?: string;
  /**
   * @member {number} [effectiveGroupID] Gets or sets the effective group
   * identifier.
   */
  effectiveGroupID?: number;
  /**
   * @member {string} [effectiveGroupName] Gets or sets the name of the
   * effective group.
   */
  effectiveGroupName?: string;
  /**
   * @member {number} [prevQueueID] Gets or sets the previous queue identifier.
   */
  prevQueueID?: number;
  /**
   * @member {number} [nextQueueID] Gets or sets the next queue identifier.
   */
  nextQueueID?: number;
  /**
   * @member {Date} [insertionTime] Gets or sets the task insertion time.
   */
  insertionTime?: Date;
  /**
   * @member {number} [addressID] Gets or sets the address identifier.
   */
  addressID?: number;
  /**
   * @member {string} [description] Gets or sets the description of the task.
   */
  description?: string;
  /**
   * @member {string} [message1] Gets or sets message 1.
   */
  message1?: string;
  /**
   * @member {string} [message2] Gets or sets message 2.
   */
  message2?: string;
  /**
   * @member {string} [message3] Gets or sets message 3.
   */
  message3?: string;
  /**
   * @member {string} [message4] Gets or sets message 4.
   */
  message4?: string;
  /**
   * @member {string} [message5] Gets or sets message5.
   */
  message5?: string;
  /**
   * @member {string} [message6] Gets or sets message 6.
   */
  message6?: string;
  /**
   * @member {string} [message7] Gets or sets message 7.
   */
  message7?: string;
  /**
   * @member {string} [message8] Gets or sets message 8.
   */
  message8?: string;
  /**
   * @member {string} [message9] Gets or sets message 9.
   */
  message9?: string;
  /**
   * @member {string} [message10] Gets or sets message 10.
   */
  message10?: string;
  /**
   * @member {string} [message11] Gets or sets message 11.
   */
  message11?: string;
  /**
   * @member {string} [message12] Gets or sets message 12.
   */
  message12?: string;
  /**
   * @member {string} [message13] Gets or sets message 13.
   */
  message13?: string;
  /**
   * @member {string} [message14] Gets or sets message 14.
   */
  message14?: string;
  /**
   * @member {string} [message15] Gets or sets message 15.
   */
  message15?: string;
  /**
   * @member {string} [message16] Gets or sets message 16.
   */
  message16?: string;
  /**
   * @member {number} [state] Gets or sets the task state.
   */
  state?: number;
  /**
   * @member {number} [priority] Gets or sets the task priority.
   */
  priority?: number;
  /**
   * @member {Date} [resolutionTime] Gets or sets the task resolution time.
   */
  resolutionTime?: Date;
  /**
   * @member {string} [taskFileAttachment] Gets or sets the task file
   * attachment name.
   */
  taskFileAttachment?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {string} [reservedString1] Gets or sets reserved string 1.
   */
  reservedString1?: string;
}

/**
 * @interface
 * An interface representing InsertTaskRequestModel.
 * Model for POST Task input parameters.
 *
 */
export interface InsertTaskRequestModel {
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [objectID] Gets or sets the object identifier (entity).
   */
  objectID?: number;
  /**
   * @member {number} [objectType] Gets or sets the type of the object
   * (entity).
   */
  objectType?: number;
  /**
   * @member {number} [prevQueueID] Gets or sets the previous queue identifier.
   */
  prevQueueID?: number;
  /**
   * @member {number} [nextQueueID] Gets or sets the next queue identifier.
   */
  nextQueueID?: number;
  /**
   * @member {number} [addressID] Gets or sets the address identifier.
   */
  addressID?: number;
  /**
   * @member {string} [description] Gets or sets the description of the task.
   */
  description?: string;
  /**
   * @member {string} [message1] Gets or sets message 1.
   */
  message1?: string;
  /**
   * @member {string} [message2] Gets or sets message 2.
   */
  message2?: string;
  /**
   * @member {string} [message3] Gets or sets message 3.
   */
  message3?: string;
  /**
   * @member {string} [message4] Gets or sets message 4.
   */
  message4?: string;
  /**
   * @member {string} [message5] Gets or sets message5.
   */
  message5?: string;
  /**
   * @member {string} [message6] Gets or sets message 6.
   */
  message6?: string;
  /**
   * @member {string} [message7] Gets or sets message 7.
   */
  message7?: string;
  /**
   * @member {string} [message8] Gets or sets message 8.
   */
  message8?: string;
  /**
   * @member {string} [message9] Gets or sets message 9.
   */
  message9?: string;
  /**
   * @member {string} [message10] Gets or sets message 10.
   */
  message10?: string;
  /**
   * @member {string} [message11] Gets or sets message 11.
   */
  message11?: string;
  /**
   * @member {string} [message12] Gets or sets message 12.
   */
  message12?: string;
  /**
   * @member {string} [message13] Gets or sets message 13.
   */
  message13?: string;
  /**
   * @member {string} [message14] Gets or sets message 14.
   */
  message14?: string;
  /**
   * @member {string} [message15] Gets or sets message 15.
   */
  message15?: string;
  /**
   * @member {string} [message16] Gets or sets message 16.
   */
  message16?: string;
  /**
   * @member {number} [state] Gets or sets the task state.
   */
  state?: number;
  /**
   * @member {number} [priority] Gets or sets the task priority.
   */
  priority?: number;
  /**
   * @member {Date} [resolutionTime] Gets or sets the task resolution time.
   */
  resolutionTime?: Date;
  /**
   * @member {string} [taskFileAttachment] Gets or sets the task file
   * attachment name.
   */
  taskFileAttachment?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {string} [reservedString1] Gets or sets reserved string 1.
   */
  reservedString1?: string;
}

/**
 * @interface
 * An interface representing TaskBase.
 * The task base class, also used as the model for updating tasks.
 *
 */
export interface TaskBase {
  /**
   * @member {number} [addressID] Gets or sets the address identifier.
   */
  addressID?: number;
  /**
   * @member {string} [description] Gets or sets the description of the task.
   */
  description?: string;
  /**
   * @member {string} [message1] Gets or sets message 1.
   */
  message1?: string;
  /**
   * @member {string} [message2] Gets or sets message 2.
   */
  message2?: string;
  /**
   * @member {string} [message3] Gets or sets message 3.
   */
  message3?: string;
  /**
   * @member {string} [message4] Gets or sets message 4.
   */
  message4?: string;
  /**
   * @member {string} [message5] Gets or sets message5.
   */
  message5?: string;
  /**
   * @member {string} [message6] Gets or sets message 6.
   */
  message6?: string;
  /**
   * @member {string} [message7] Gets or sets message 7.
   */
  message7?: string;
  /**
   * @member {string} [message8] Gets or sets message 8.
   */
  message8?: string;
  /**
   * @member {string} [message9] Gets or sets message 9.
   */
  message9?: string;
  /**
   * @member {string} [message10] Gets or sets message 10.
   */
  message10?: string;
  /**
   * @member {string} [message11] Gets or sets message 11.
   */
  message11?: string;
  /**
   * @member {string} [message12] Gets or sets message 12.
   */
  message12?: string;
  /**
   * @member {string} [message13] Gets or sets message 13.
   */
  message13?: string;
  /**
   * @member {string} [message14] Gets or sets message 14.
   */
  message14?: string;
  /**
   * @member {string} [message15] Gets or sets message 15.
   */
  message15?: string;
  /**
   * @member {string} [message16] Gets or sets message 16.
   */
  message16?: string;
  /**
   * @member {number} [state] Gets or sets the task state.
   */
  state?: number;
  /**
   * @member {number} [priority] Gets or sets the task priority.
   */
  priority?: number;
  /**
   * @member {Date} [resolutionTime] Gets or sets the task resolution time.
   */
  resolutionTime?: Date;
  /**
   * @member {string} [taskFileAttachment] Gets or sets the task file
   * attachment name.
   */
  taskFileAttachment?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {string} [reservedString1] Gets or sets reserved string 1.
   */
  reservedString1?: string;
}

/**
 * @interface
 * An interface representing GetUserRequestModel.
 * Model for the GET User input parameters
 *
 */
export interface GetUserRequestModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [primaryGroupID] Gets or sets the primary group
   * identifier.
   */
  primaryGroupID?: number;
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {string} [groupName] Gets or sets the name of the group.
   */
  groupName?: string;
  /**
   * @member {string} [username] Gets or sets the username.
   */
  username?: string;
  /**
   * @member {Type19} [type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   */
  type?: Type19;
  /**
   * @member {State17} [state] Gets or sets the state. Possible values include:
   * 'Active', 'Inactive'
   */
  state?: State17;
  /**
   * @member {string} [fullName] Gets or sets the full name.
   */
  fullName?: string;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder15} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder15;
  /**
   * @member {SortBy13} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName',
   * 'Type', 'State'
   */
  sortBy?: SortBy13;
}

/**
 * @interface
 * An interface representing UserModel.
 * The model that is sent in response to a GET request for Users
 *
 */
export interface UserModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {string} [username] Gets or sets the username.
   */
  username?: string;
  /**
   * @member {number} [loginCount] Gets or sets the login count.
   */
  loginCount?: number;
  /**
   * @member {number} [drawerCount] Gets or sets the drawer count.
   */
  drawerCount?: number;
  /**
   * @member {number} [groupCount] Gets or sets the group count.
   */
  groupCount?: number;
  /**
   * @member {number} [queueCount] Gets or sets the queue count.
   */
  queueCount?: number;
  /**
   * @member {number} [loginTime] Gets or sets the login time.
   */
  loginTime?: number;
  /**
   * @member {Date} [lastLogin] Gets or sets the last login.
   */
  lastLogin?: Date;
  /**
   * @member {number} [primaryGroupID] Gets or sets the primary group
   * identifier.
   */
  primaryGroupID?: number;
  /**
   * @member {Type20} [type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   */
  type?: Type20;
  /**
   * @member {State18} [state] Gets or sets the state. Possible values include:
   * 'Active', 'Inactive'
   */
  state?: State18;
  /**
   * @member {string} [fullName] Gets or sets the full name.
   */
  fullName?: string;
  /**
   * @member {number} [objectCount] Gets or sets the object count.
   */
  objectCount?: number;
  /**
   * @member {string} [iPAddress] Gets or sets the ip address.
   */
  iPAddress?: string;
  /**
   * @member {number} [entityAcl] Gets or sets the entity acl.
   */
  entityAcl?: number;
  /**
   * @member {number} [attachmentAcl] Gets or sets the attachment acl.
   */
  attachmentAcl?: number;
  /**
   * @member {number} [noteAcl] Gets or sets the note acl.
   */
  noteAcl?: number;
  /**
   * @member {number} [entityFeature] Gets or sets the entity feature.
   */
  entityFeature?: number;
  /**
   * @member {number} [attachmentFeature] Gets or sets the attachment feature.
   */
  attachmentFeature?: number;
  /**
   * @member {number} [noteFeature] Gets or sets the note feature.
   */
  noteFeature?: number;
  /**
   * @member {AdminMask} [adminMask] Gets or sets the admin mask. Possible
   * values include: 'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin',
   * 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
   * 'ApplicationAdmin'
   */
  adminMask?: AdminMask;
  /**
   * @member {string} [address] Gets or sets the address.
   */
  address?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {number} [reservedDouble1] Gets or sets the reserved double1.
   */
  reservedDouble1?: number;
  /**
   * @member {number} [reservedDouble2] Gets or sets the reserved double2.
   */
  reservedDouble2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
  /**
   * @member {Date} [userExpiration] Gets or sets the user expiration.
   */
  userExpiration?: Date;
}

/**
 * @interface
 * An interface representing InsertUserRequestModel.
 * Model for POST User input parameters.
 *
 */
export interface InsertUserRequestModel {
  /**
   * @member {string} username Gets or sets the username.
   */
  username: string;
  /**
   * @member {State19} [state] Gets or sets the state. Possible values include:
   * 'Active', 'Inactive'
   */
  state?: State19;
  /**
   * @member {Type21} [type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   */
  type?: Type21;
  /**
   * @member {string} fullName Gets or sets the full name.
   */
  fullName: string;
  /**
   * @member {string} iPAddress Gets or sets the ip address.
   */
  iPAddress: string;
  /**
   * @member {number} [entityAcl] Gets or sets the entity acl.
   */
  entityAcl?: number;
  /**
   * @member {number} [attachmentAcl] Gets or sets the attachment acl.
   */
  attachmentAcl?: number;
  /**
   * @member {number} [noteAcl] Gets or sets the note acl.
   */
  noteAcl?: number;
  /**
   * @member {number} [entityFeature] Gets or sets the entity feature.
   */
  entityFeature?: number;
  /**
   * @member {number} [attachmentFeature] Gets or sets the attachment feature.
   */
  attachmentFeature?: number;
  /**
   * @member {number} [noteFeature] Gets or sets the note feature.
   */
  noteFeature?: number;
  /**
   * @member {AdminMask1} [adminMask] Gets or sets the admin mask. Possible
   * values include: 'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin',
   * 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
   * 'ApplicationAdmin'
   */
  adminMask?: AdminMask1;
  /**
   * @member {string} [address] Gets or sets the address.
   */
  address?: string;
}

/**
 * @interface
 * An interface representing UserBase.
 * The UserBase Class.
 *
 */
export interface UserBase {
  /**
   * @member {number} [primaryGroupID] Gets or sets the primary group
   * identifier.
   */
  primaryGroupID?: number;
  /**
   * @member {Type22} [type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   */
  type?: Type22;
  /**
   * @member {State20} [state] Gets or sets the state. Possible values include:
   * 'Active', 'Inactive'
   */
  state?: State20;
  /**
   * @member {string} [fullName] Gets or sets the full name.
   */
  fullName?: string;
  /**
   * @member {number} [objectCount] Gets or sets the object count.
   */
  objectCount?: number;
  /**
   * @member {string} [iPAddress] Gets or sets the ip address.
   */
  iPAddress?: string;
  /**
   * @member {number} [entityAcl] Gets or sets the entity acl.
   */
  entityAcl?: number;
  /**
   * @member {number} [attachmentAcl] Gets or sets the attachment acl.
   */
  attachmentAcl?: number;
  /**
   * @member {number} [noteAcl] Gets or sets the note acl.
   */
  noteAcl?: number;
  /**
   * @member {number} [entityFeature] Gets or sets the entity feature.
   */
  entityFeature?: number;
  /**
   * @member {number} [attachmentFeature] Gets or sets the attachment feature.
   */
  attachmentFeature?: number;
  /**
   * @member {number} [noteFeature] Gets or sets the note feature.
   */
  noteFeature?: number;
  /**
   * @member {AdminMask2} [adminMask] Gets or sets the admin mask. Possible
   * values include: 'None', 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin',
   * 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
   * 'ApplicationAdmin'
   */
  adminMask?: AdminMask2;
  /**
   * @member {string} [address] Gets or sets the address.
   */
  address?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved int1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved int2.
   */
  reservedInt2?: number;
  /**
   * @member {number} [reservedDouble1] Gets or sets the reserved double1.
   */
  reservedDouble1?: number;
  /**
   * @member {number} [reservedDouble2] Gets or sets the reserved double2.
   */
  reservedDouble2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string2.
   */
  reservedString2?: string;
  /**
   * @member {Date} [userExpiration] Gets or sets the user expiration.
   */
  userExpiration?: Date;
}

/**
 * @interface
 * An interface representing GetWorkflowModel.
 * Model for the GET Workflow input parameters
 *
 */
export interface GetWorkflowModel {
  /**
   * @member {number} [applicationID] Gets or sets the application identifier.
   */
  applicationID?: number;
  /**
   * @member {number} [entityType] Gets or sets the type of the entity.
   */
  entityType?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder16} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder16;
  /**
   * @member {number} [sortBy] Gets or sets the column to order by.
   */
  sortBy?: number;
}

/**
 * @interface
 * An interface representing WorkflowModel.
 * The model that is sent in response to a GET request for Workflow
 *
 */
export interface WorkflowModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [entityType] Gets or sets the type of the entity.
   */
  entityType?: number;
  /**
   * @member {string} [alias] Gets or sets the alias.
   */
  alias?: string;
}

/**
 * @interface
 * An interface representing WorkflowQueueModel.
 * Defines properties and methods for workflow queues
 *
 */
export interface WorkflowQueueModel {
  /**
   * @member {WorkflowType} [workflowType] Gets or sets the type of the
   * workflow. Possible values include: 'Uncategorized', 'Auto',
   * 'StraightThrough', 'Exception', 'Holding', 'Any'
   */
  workflowType?: WorkflowType;
  /**
   * @member {number} [index] Gets or sets the index.
   */
  index?: number;
  /**
   * @member {number} [subIndex] Gets or sets the subindex.
   */
  subIndex?: number;
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {number} [userCount] Gets or sets the user count.
   */
  userCount?: number;
  /**
   * @member {number} [taskCount] Gets or sets the task count.
   */
  taskCount?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [alias] Gets or sets the alias.
   */
  alias?: string;
  /**
   * @member {State21} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   */
  state?: State21;
  /**
   * @member {Type23} [type] Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   */
  type?: Type23;
  /**
   * @member {string} [category] Gets or sets the category.
   */
  category?: string;
  /**
   * @member {string} [description] Gets or sets the description.
   */
  description?: string;
  /**
   * @member {number} [reservedInt1] Gets or sets the reserved integer 1.
   */
  reservedInt1?: number;
  /**
   * @member {number} [reservedInt2] Gets or sets the reserved integer 2.
   */
  reservedInt2?: number;
  /**
   * @member {string} [reservedString1] Gets or sets the reserved string 1.
   */
  reservedString1?: string;
  /**
   * @member {string} [reservedString2] Gets or sets the reserved string 2.
   */
  reservedString2?: string;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetDrawerGroupAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetDrawerGroupAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [groupID] The group identifier.
   */
  groupID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder17} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder17;
  /**
   * @member {SortBy14} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy14;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetGroupDrawerAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetGroupDrawerAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [drawerID] The drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder18} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder18;
  /**
   * @member {SortBy15} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy15;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetUserGroupAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetUserGroupAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [groupID] The group identifier.
   */
  groupID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder19} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder19;
  /**
   * @member {SortBy16} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy16;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetGroupUserAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetGroupUserAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [userID] The user identifier.
   */
  userID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder20} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder20;
  /**
   * @member {SortBy17} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy17;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetQueueGroupAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetQueueGroupAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [groupID] The group identifier.
   */
  groupID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder21} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder21;
  /**
   * @member {SortBy18} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy18;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetGroupQueueAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetGroupQueueAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [queueID] The queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder22} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder22;
  /**
   * @member {SortBy19} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy19;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetApplicationGroupAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetApplicationGroupAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [groupID] The group identifier.
   */
  groupID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder23} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder23;
  /**
   * @member {SortBy20} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy20;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetGroupApplicationAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetGroupApplicationAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [applicationID] The application identifier.
   */
  applicationID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder24} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder24;
  /**
   * @member {SortBy21} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy21;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetDrawerUserAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetDrawerUserAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [userID] The user identifier.
   */
  userID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder25} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder25;
  /**
   * @member {SortBy22} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy22;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetUserDrawerAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetUserDrawerAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [drawerID] The drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder26} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder26;
  /**
   * @member {SortBy23} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy23;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetQueueUserAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetQueueUserAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [userID] The user identifier.
   */
  userID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder27} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder27;
  /**
   * @member {SortBy24} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy24;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetUserQueueAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetUserQueueAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [queueID] The queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder28} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder28;
  /**
   * @member {SortBy25} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy25;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetApplicationUserAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetApplicationUserAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [userID] The user identifier.
   */
  userID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder29} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder29;
  /**
   * @member {SortBy26} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy26;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetUserApplicationAssociationsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetUserApplicationAssociationsOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [applicationID] The application identifier.
   */
  applicationID?: number;
  /**
   * @member {number} [acl] Gets or sets the access control level permissions.
   */
  acl?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder30} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder30;
  /**
   * @member {SortBy27} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID',
   * 'UserID', 'QueueID', 'Acl'
   */
  sortBy?: SortBy27;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetAttachmentsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetAttachmentsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {Type24} [type] Gets or sets the type. Possible values include:
   * 'Standard', 'EntityLink', 'WebLink'
   */
  type?: Type24;
  /**
   * @member {string} [extension] Gets or sets the extension.
   */
  extension?: string;
  /**
   * @member {number} [minSize] Gets or sets the minimum size.
   */
  minSize?: number;
  /**
   * @member {number} [maxSize] Gets or sets the maximum size.
   */
  maxSize?: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {Date} [minInsertionTime] Gets or sets the minimum insertion time.
   */
  minInsertionTime?: Date;
  /**
   * @member {Date} [maxInsertionTime] Gets or sets the maximum insertion time.
   */
  maxInsertionTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder31} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder31;
  /**
   * @member {SortBy28} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   */
  sortBy?: SortBy28;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetAttachmentVersionsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetAttachmentVersionsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [version] Gets or sets the indexed version value.
   */
  version?: number;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [accessorUserID] Gets or sets the identifier of the user
   * who accessed the attachment version.
   */
  accessorUserID?: number;
  /**
   * @member {Date} [minAccessTime] Gets or sets the min time the version was
   * last accessed.
   */
  minAccessTime?: Date;
  /**
   * @member {Date} [maxAccessTime] Gets or sets the max time the version was
   * last accessed.
   */
  maxAccessTime?: Date;
  /**
   * @member {Date} [minCreationTime] Gets or sets the min creation time of the
   * attachment version.
   */
  minCreationTime?: Date;
  /**
   * @member {Date} [maxCreationTime] Gets or sets the max creation time of the
   * attachment version.
   */
  maxCreationTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the min modification
   * time of the attachment version.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the max modification
   * time of the attachment version.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder32} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder32;
  /**
   * @member {SortBy29} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'Version', 'CreatorUserID', 'AccessorUserID',
   * 'AccessTime', 'CreationTime', 'ModificationTime'
   */
  sortBy?: SortBy29;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetEntitiesByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetEntitiesByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [type] Gets or sets the type of the entity.
   */
  type?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {State22} [state] Gets or sets the state. Possible values include:
   * 'Undefined', 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
   * 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
   * 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
   * 'ReviewedRoutingSlipOpen'
   */
  state?: State22;
  /**
   * @member {number} [referenceCount] Gets or sets the reference count.
   */
  referenceCount?: number;
  /**
   * @member {number} [attachCount] Gets or sets the attach count.
   */
  attachCount?: number;
  /**
   * @member {number} [noteCount] Gets or sets the note count.
   */
  noteCount?: number;
  /**
   * @member {number} [ownerUserID] Gets or sets the owner user identifier.
   */
  ownerUserID?: number;
  /**
   * @member {number} [ownerGroupID] Gets or sets the owner group identifier.
   */
  ownerGroupID?: number;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [creatorGroupID] Gets or sets the creator group
   * identifier.
   */
  creatorGroupID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {number} [modifierGroupID] Gets or sets the modifier group
   * identifier.
   */
  modifierGroupID?: number;
  /**
   * @member {Date} [minCreationTime] Gets or sets the minimum creation time.
   */
  minCreationTime?: Date;
  /**
   * @member {Date} [maxCreationTime] Gets or sets the maximum creation time.
   */
  maxCreationTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {any[]} [metadata] Gets or sets the metadata.
   */
  metadata?: any[];
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder33} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder33;
  /**
   * @member {SortBy30} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'CreationTime', 'ModificationTime', 'State',
   * 'Name'
   */
  sortBy?: SortBy30;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetEventsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetEventsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {Type25} [type] Gets or sets the type. Possible values include:
   * 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL',
   * 'DDE'
   */
  type?: Type25;
  /**
   * @member {Date} [minEventTime] Gets or sets the minimum event time.
   */
  minEventTime?: Date;
  /**
   * @member {Date} [maxEventTime] Gets or sets the maximum event time.
   */
  maxEventTime?: Date;
  /**
   * @member {number} [eventUserID] Gets or sets the event user identifier.
   */
  eventUserID?: number;
  /**
   * @member {number} [eventGroupID] Gets or sets the event group identifier.
   */
  eventGroupID?: number;
  /**
   * @member {Category4} [category] Gets or sets the category. Possible values
   * include: 'Undefined', 'Entity', 'Profile', 'Attachment', 'Discussion',
   * 'Field', 'Workflow'
   */
  category?: Category4;
  /**
   * @member {ClassProperty2} [classProperty] Gets or sets the class. Possible
   * values include: 'Undefined', 'Application', 'Security', 'System'
   */
  classProperty?: ClassProperty2;
  /**
   * @member {Operation4} [operation] Gets or sets the operation. Possible
   * values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
   * 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge',
   * 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
   * 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward',
   * 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
   */
  operation?: Operation4;
  /**
   * @member {number} [minProcessingTime] Gets or sets the minimum processing
   * time.
   */
  minProcessingTime?: number;
  /**
   * @member {number} [maxProcessingTime] Gets or sets the maximum processing
   * time.
   */
  maxProcessingTime?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder34} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder34;
  /**
   * @member {SortBy31} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'EventTime'
   */
  sortBy?: SortBy31;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetExtensionsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetExtensionsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [iD] Gets or sets the extension identifier.
   */
  iD?: number;
  /**
   * @member {number} [type] Gets or sets the type of the extension.
   */
  type?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder35} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder35;
  /**
   * @member {SortBy32} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer', 'Double',
   * 'Date'
   */
  sortBy?: SortBy32;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetFlowsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetFlowsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {Type26} [type] Gets or sets the type. Possible values include:
   * 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc',
   * 'Sql', 'Dde'
   */
  type?: Type26;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {Date} [minWorkflowTime] Gets or sets the minimum workflow time.
   */
  minWorkflowTime?: Date;
  /**
   * @member {Date} [maxWorkflowTime] Gets or sets the maximum workflow time.
   */
  maxWorkflowTime?: Date;
  /**
   * @member {Date} [minInsertionTime] Gets or sets the minimum insertion time.
   */
  minInsertionTime?: Date;
  /**
   * @member {Date} [maxInsertionTime] Gets or sets the maximum insertion time.
   */
  maxInsertionTime?: Date;
  /**
   * @member {number} [workflowUserID] Gets or sets the workflow user
   * identifier.
   */
  workflowUserID?: number;
  /**
   * @member {number} [workflowGroupID] Gets or sets the workflow group
   * identifier.
   */
  workflowGroupID?: number;
  /**
   * @member {Operation5} [operation] Gets or sets the operation. Possible
   * values include: 'None', 'Update', 'Reset', 'Override', 'Null'
   */
  operation?: Operation5;
  /**
   * @member {Category5} [category] Gets or sets the category. Possible values
   * include: 'None', 'Direct', 'AdHoc', 'Production', 'Review', 'Reset',
   * 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
   */
  category?: Category5;
  /**
   * @member {Status2} [status] Gets or sets the status. Possible values
   * include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
   */
  status?: Status2;
  /**
   * @member {State23} [state] Gets or sets the state. Possible values include:
   * 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override',
   * 'OverrideR', 'WaitingR'
   */
  state?: State23;
  /**
   * @member {number} [minIndex1] Gets or sets the minimum index 1.
   */
  minIndex1?: number;
  /**
   * @member {number} [maxIndex1] Gets or sets the maximum index 1.
   */
  maxIndex1?: number;
  /**
   * @member {number} [minIndex2] Gets or sets the minimum index 2.
   */
  minIndex2?: number;
  /**
   * @member {number} [maxIndex2] Gets or sets the maximum index 2.
   */
  maxIndex2?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder36} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder36;
  /**
   * @member {SortBy33} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime',
   * 'Index'
   */
  sortBy?: SortBy33;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetTemplatesByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetTemplatesByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [category] Gets or sets the category.
   */
  category?: string;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder37} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder37;
  /**
   * @member {number} [sortBy] Gets or sets the column to order by.
   */
  sortBy?: number;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIValidateTemplateFieldOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIValidateTemplateFieldOptionalParams extends RequestOptionsBase {
  /**
   * @member {string} [sortColumn] Gets or sets the sort column.
   */
  sortColumn?: string;
  /**
   * @member {any[]} [metadata] Gets or sets the metadata search options.
   */
  metadata?: any[];
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder38} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder38;
  /**
   * @member {number} [sortBy] Gets or sets the column to order by.
   */
  sortBy?: number;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetGroupsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetGroupsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [iD] Gets or sets the group identifier.
   */
  iD?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {Type27} [type] Gets or sets the type. Possible values include:
   * 'Generic', 'Access', 'Role'
   */
  type?: Type27;
  /**
   * @member {State24} [state] Gets or sets the state. Possible values include:
   * 'Inactive', 'Active'
   */
  state?: State24;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder39} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder39;
  /**
   * @member {SortBy34} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Name', 'Type', 'State'
   */
  sortBy?: SortBy34;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetLinksByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetLinksByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [childEntityID] Gets or sets the child entity identifier.
   */
  childEntityID?: number;
  /**
   * @member {number} [childDrawerID] Gets or sets the child drawer identifier.
   */
  childDrawerID?: number;
  /**
   * @member {number} [childType] Gets or sets the type of the child.
   */
  childType?: number;
  /**
   * @member {number} [acl] Gets or sets the access control list.
   */
  acl?: number;
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {Date} [minInsertionTime] Gets or sets the minimum insertion time.
   */
  minInsertionTime?: Date;
  /**
   * @member {Date} [maxInsertionTime] Gets or sets the maximum insertion time.
   */
  maxInsertionTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder40} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder40;
  /**
   * @member {SortBy35} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
   * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
   */
  sortBy?: SortBy35;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetNotesByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetNotesByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [entityID] Gets or sets the entity identifier.
   */
  entityID?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [creatorUserID] Gets or sets the creator user identifier.
   */
  creatorUserID?: number;
  /**
   * @member {number} [modifierUserID] Gets or sets the modifier user
   * identifier.
   */
  modifierUserID?: number;
  /**
   * @member {Date} [minCreationTime] Gets or sets the minimum creation time.
   */
  minCreationTime?: Date;
  /**
   * @member {Date} [maxCreationTime] Gets or sets the maximum creation time.
   */
  maxCreationTime?: Date;
  /**
   * @member {Date} [minModificationTime] Gets or sets the minimum modification
   * time.
   */
  minModificationTime?: Date;
  /**
   * @member {Date} [maxModificationTime] Gets or sets the maximum modification
   * time.
   */
  maxModificationTime?: Date;
  /**
   * @member {number} [parentID] Gets or sets the parent note identifier.
   */
  parentID?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder41} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder41;
  /**
   * @member {SortBy36} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'EntityID', 'Name', 'CreationTime',
   * 'ModificationTime'
   */
  sortBy?: SortBy36;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetQueueAssignmentsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetQueueAssignmentsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [queueID] Gets or sets the unique queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [userID] Gets or sets the user identifier.
   */
  userID?: number;
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {Type28} [type] Gets or sets the queue assignment type. Possible
   * values include: 'Unspecified', 'Primary', 'Secondary'
   */
  type?: Type28;
  /**
   * @member {number} [order] Gets or sets the sort order.
   */
  order?: number;
  /**
   * @member {TaskSortColumn3} [taskSortColumn] Gets or sets the task sort
   * column. Possible values include: 'TaskID', 'QueueID', 'DrawerID',
   * 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description',
   * 'Message1', 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
   * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
   * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
   * 'ReservedInt1', 'ReservedString1'
   */
  taskSortColumn?: TaskSortColumn3;
  /**
   * @member {State25} [state] Gets or sets the state. Possible values include:
   * 'Unspecified', 'Inactive', 'Active'
   */
  state?: State25;
  /**
   * @member {FetchType3} [fetchType] Gets or sets the type of the fetch.
   * Possible values include: 'Unspecified', 'Manual', 'Push'
   */
  fetchType?: FetchType3;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder42} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder42;
  /**
   * @member {SortBy37} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order',
   * 'FetchType'
   */
  sortBy?: SortBy37;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetQueuesByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetQueuesByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [iD] Gets or sets the queue identifier.
   */
  iD?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {string} [alias] Gets or sets the alias.
   */
  alias?: string;
  /**
   * @member {Type29} [type] Gets or sets the type. Possible values include:
   * 'Inbound', 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle',
   * 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
   * 'CdoInfostore', 'CdoFolder'
   */
  type?: Type29;
  /**
   * @member {number} [access] Gets or sets the access level.
   */
  access?: number;
  /**
   * @member {boolean} [bypassSecurity] Gets or sets a value indicating whether
   * to bypass security checks.
   */
  bypassSecurity?: boolean;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder43} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder43;
  /**
   * @member {SortBy38} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'Type', 'Name', 'Alias'
   */
  sortBy?: SortBy38;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetTasksByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetTasksByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [lastTaskID] Gets or sets the last task identifier.
   */
  lastTaskID?: number;
  /**
   * @member {number} [iD] Gets or sets the entity identifier.
   */
  iD?: number;
  /**
   * @member {number} [type] Gets or sets the type of the entity.
   */
  type?: number;
  /**
   * @member {number} [queueID] Gets or sets the queue identifier.
   */
  queueID?: number;
  /**
   * @member {number} [queueType] Gets or sets the type of the queue.
   */
  queueType?: number;
  /**
   * @member {number} [drawerID] Gets or sets the drawer identifier.
   */
  drawerID?: number;
  /**
   * @member {string} [description] Gets or sets the task description.
   */
  description?: string;
  /**
   * @member {number} [taskID] Gets or sets the task identifier.
   */
  taskID?: number;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder44} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder44;
  /**
   * @member {SortBy39} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority',
   * 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
   */
  sortBy?: SortBy39;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetUsersByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetUsersByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [iD] Gets or sets the identifier.
   */
  iD?: number;
  /**
   * @member {number} [primaryGroupID] Gets or sets the primary group
   * identifier.
   */
  primaryGroupID?: number;
  /**
   * @member {number} [groupID] Gets or sets the group identifier.
   */
  groupID?: number;
  /**
   * @member {string} [groupName] Gets or sets the name of the group.
   */
  groupName?: string;
  /**
   * @member {string} [username] Gets or sets the username.
   */
  username?: string;
  /**
   * @member {Type30} [type] Gets or sets the type. Possible values include:
   * 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
   * 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark', 'ReportDesk',
   * 'ColdDesk', 'PortalDesk', 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
   */
  type?: Type30;
  /**
   * @member {State26} [state] Gets or sets the state. Possible values include:
   * 'Active', 'Inactive'
   */
  state?: State26;
  /**
   * @member {string} [fullName] Gets or sets the full name.
   */
  fullName?: string;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder45} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder45;
  /**
   * @member {SortBy40} [sortBy] Gets or sets the column to order by. Possible
   * values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName',
   * 'Type', 'State'
   */
  sortBy?: SortBy40;
}

/**
 * @interface
 * An interface representing SoftheonEnterpriseAPIGetWorkflowsByFilterOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonEnterpriseAPIGetWorkflowsByFilterOptionalParams extends RequestOptionsBase {
  /**
   * @member {number} [applicationID] Gets or sets the application identifier.
   */
  applicationID?: number;
  /**
   * @member {number} [entityType] Gets or sets the type of the entity.
   */
  entityType?: number;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
  /**
   * @member {number} [page] Gets or sets the page number.
   */
  page?: number;
  /**
   * @member {number} [pageSize] Gets or sets the size of the page.
   */
  pageSize?: number;
  /**
   * @member {SortOrder46} [sortOrder] Gets or sets the order. Possible values
   * include: 'Unspecified', 'Ascending', 'Descending'
   */
  sortOrder?: SortOrder46;
  /**
   * @member {number} [sortBy] Gets or sets the column to order by.
   */
  sortBy?: number;
}

/**
 * Defines values for SortOrder.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder = <SortOrder>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy = <SortBy>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for Type.
 * Possible values include: 'Standard', 'EntityLink', 'WebLink'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type {
  Standard = 'Standard',
  EntityLink = 'EntityLink',
  WebLink = 'WebLink',
}

/**
 * Defines values for SortOrder1.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder1 = <SortOrder1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder1 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy1.
 * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
 * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy1 = <SortBy1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy1 {
  PageNumber = 'PageNumber',
  ID = 'ID',
  Type = 'Type',
  InsertionTime = 'InsertionTime',
  ModificationTime = 'ModificationTime',
  CrossReferenceID = 'CrossReferenceID',
  SubType = 'SubType',
  Extension = 'Extension',
  Name = 'Name',
}

/**
 * Defines values for Type1.
 * Possible values include: 'Standard', 'EntityLink', 'WebLink'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type1 = <Type1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type1 {
  Standard = 'Standard',
  EntityLink = 'EntityLink',
  WebLink = 'WebLink',
}

/**
 * Defines values for State.
 * Possible values include: 'Undefined', 'MaxStates', 'Reserved',
 * 'UserDefined', 'Dynamic', 'Static', 'New', 'CheckedOut', 'Internal',
 * 'Statres5', 'Linked', 'Statres4', 'Statres3', 'Statres2', 'Statres1',
 * 'Locked', 'OnServerCache', 'OnClientCache', 'Fetching', 'Dynres4',
 * 'Dynres3', 'Dynres2', 'Dynres1', 'User1', 'User2', 'User3', 'User4',
 * 'User5', 'User6', 'User7', 'User8', 'User9', 'User10', 'User11', 'User12',
 * 'User13', 'User14', 'User15', 'User16'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State = <State>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State {
  Undefined = 'Undefined',
  MaxStates = 'MaxStates',
  Reserved = 'Reserved',
  UserDefined = 'UserDefined',
  Dynamic = 'Dynamic',
  Static = 'Static',
  New = 'New',
  CheckedOut = 'CheckedOut',
  Internal = 'Internal',
  Statres5 = 'Statres5',
  Linked = 'Linked',
  Statres4 = 'Statres4',
  Statres3 = 'Statres3',
  Statres2 = 'Statres2',
  Statres1 = 'Statres1',
  Locked = 'Locked',
  OnServerCache = 'OnServerCache',
  OnClientCache = 'OnClientCache',
  Fetching = 'Fetching',
  Dynres4 = 'Dynres4',
  Dynres3 = 'Dynres3',
  Dynres2 = 'Dynres2',
  Dynres1 = 'Dynres1',
  User1 = 'User1',
  User2 = 'User2',
  User3 = 'User3',
  User4 = 'User4',
  User5 = 'User5',
  User6 = 'User6',
  User7 = 'User7',
  User8 = 'User8',
  User9 = 'User9',
  User10 = 'User10',
  User11 = 'User11',
  User12 = 'User12',
  User13 = 'User13',
  User14 = 'User14',
  User15 = 'User15',
  User16 = 'User16',
}

/**
 * Defines values for State1.
 * Possible values include: 'Undefined', 'MaxStates', 'Reserved',
 * 'UserDefined', 'Dynamic', 'Static', 'New', 'CheckedOut', 'Internal',
 * 'Statres5', 'Linked', 'Statres4', 'Statres3', 'Statres2', 'Statres1',
 * 'Locked', 'OnServerCache', 'OnClientCache', 'Fetching', 'Dynres4',
 * 'Dynres3', 'Dynres2', 'Dynres1', 'User1', 'User2', 'User3', 'User4',
 * 'User5', 'User6', 'User7', 'User8', 'User9', 'User10', 'User11', 'User12',
 * 'User13', 'User14', 'User15', 'User16'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State1 = <State1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State1 {
  Undefined = 'Undefined',
  MaxStates = 'MaxStates',
  Reserved = 'Reserved',
  UserDefined = 'UserDefined',
  Dynamic = 'Dynamic',
  Static = 'Static',
  New = 'New',
  CheckedOut = 'CheckedOut',
  Internal = 'Internal',
  Statres5 = 'Statres5',
  Linked = 'Linked',
  Statres4 = 'Statres4',
  Statres3 = 'Statres3',
  Statres2 = 'Statres2',
  Statres1 = 'Statres1',
  Locked = 'Locked',
  OnServerCache = 'OnServerCache',
  OnClientCache = 'OnClientCache',
  Fetching = 'Fetching',
  Dynres4 = 'Dynres4',
  Dynres3 = 'Dynres3',
  Dynres2 = 'Dynres2',
  Dynres1 = 'Dynres1',
  User1 = 'User1',
  User2 = 'User2',
  User3 = 'User3',
  User4 = 'User4',
  User5 = 'User5',
  User6 = 'User6',
  User7 = 'User7',
  User8 = 'User8',
  User9 = 'User9',
  User10 = 'User10',
  User11 = 'User11',
  User12 = 'User12',
  User13 = 'User13',
  User14 = 'User14',
  User15 = 'User15',
  User16 = 'User16',
}

/**
 * Defines values for SortOrder2.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder2 = <SortOrder2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder2 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy2.
 * Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID',
 * 'AccessTime', 'CreationTime', 'ModificationTime'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy2 = <SortBy2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy2 {
  Version = 'Version',
  CreatorUserID = 'CreatorUserID',
  AccessorUserID = 'AccessorUserID',
  AccessTime = 'AccessTime',
  CreationTime = 'CreationTime',
  ModificationTime = 'ModificationTime',
}

/**
 * Defines values for FieldType.
 * Possible values include: 'String', 'Integer', 'Double', 'DateTime'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: FieldType = <FieldType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum FieldType {
  String = 'String',
  Integer = 'Integer',
  Double = 'Double',
  DateTime = 'DateTime',
}

/**
 * Defines values for State2.
 * Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended',
 * 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed',
 * 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
 * 'ReviewedRoutingSlipOpen'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State2 = <State2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State2 {
  Undefined = 'Undefined',
  Available = 'Available',
  Locked = 'Locked',
  Suspended = 'Suspended',
  Archived = 'Archived',
  Deleted = 'Deleted',
  Canceled = 'Canceled',
  Complete = 'Complete',
  Reviewed = 'Reviewed',
  ReviewedSuspended = 'ReviewedSuspended',
  ReviewedComplete = 'ReviewedComplete',
  Rejected = 'Rejected',
  RoutingSlipOpen = 'RoutingSlipOpen',
  ReviewedRoutingSlipOpen = 'ReviewedRoutingSlipOpen',
}

/**
 * Defines values for SortOrder3.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder3 = <SortOrder3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder3 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy3.
 * Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime',
 * 'State', 'Name'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy3 = <SortBy3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy3 {
  ID = 'ID',
  Type = 'Type',
  CreationTime = 'CreationTime',
  ModificationTime = 'ModificationTime',
  State = 'State',
  Name = 'Name',
}

/**
 * Defines values for State3.
 * Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended',
 * 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed',
 * 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
 * 'ReviewedRoutingSlipOpen'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State3 = <State3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State3 {
  Undefined = 'Undefined',
  Available = 'Available',
  Locked = 'Locked',
  Suspended = 'Suspended',
  Archived = 'Archived',
  Deleted = 'Deleted',
  Canceled = 'Canceled',
  Complete = 'Complete',
  Reviewed = 'Reviewed',
  ReviewedSuspended = 'ReviewedSuspended',
  ReviewedComplete = 'ReviewedComplete',
  Rejected = 'Rejected',
  RoutingSlipOpen = 'RoutingSlipOpen',
  ReviewedRoutingSlipOpen = 'ReviewedRoutingSlipOpen',
}

/**
 * Defines values for UpdateAction.
 * Possible values include: 'None', 'Update', 'Add', 'Remove'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: UpdateAction =
 * <UpdateAction>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum UpdateAction {
  None = 'None',
  Update = 'Update',
  Add = 'Add',
  Remove = 'Remove',
}

/**
 * Defines values for State4.
 * Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended',
 * 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed',
 * 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
 * 'ReviewedRoutingSlipOpen'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State4 = <State4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State4 {
  Undefined = 'Undefined',
  Available = 'Available',
  Locked = 'Locked',
  Suspended = 'Suspended',
  Archived = 'Archived',
  Deleted = 'Deleted',
  Canceled = 'Canceled',
  Complete = 'Complete',
  Reviewed = 'Reviewed',
  ReviewedSuspended = 'ReviewedSuspended',
  ReviewedComplete = 'ReviewedComplete',
  Rejected = 'Rejected',
  RoutingSlipOpen = 'RoutingSlipOpen',
  ReviewedRoutingSlipOpen = 'ReviewedRoutingSlipOpen',
}

/**
 * Defines values for State5.
 * Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended',
 * 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed',
 * 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
 * 'ReviewedRoutingSlipOpen'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State5 = <State5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State5 {
  Undefined = 'Undefined',
  Available = 'Available',
  Locked = 'Locked',
  Suspended = 'Suspended',
  Archived = 'Archived',
  Deleted = 'Deleted',
  Canceled = 'Canceled',
  Complete = 'Complete',
  Reviewed = 'Reviewed',
  ReviewedSuspended = 'ReviewedSuspended',
  ReviewedComplete = 'ReviewedComplete',
  Rejected = 'Rejected',
  RoutingSlipOpen = 'RoutingSlipOpen',
  ReviewedRoutingSlipOpen = 'ReviewedRoutingSlipOpen',
}

/**
 * Defines values for EntityContent.
 * Possible values include: 'None', 'All', 'Profiles', 'Attachments', 'Notes',
 * 'Links', 'Events'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: EntityContent =
 * <EntityContent>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum EntityContent {
  None = 'None',
  All = 'All',
  Profiles = 'Profiles',
  Attachments = 'Attachments',
  Notes = 'Notes',
  Links = 'Links',
  Events = 'Events',
}

/**
 * Defines values for Type2.
 * Possible values include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug',
 * 'Process', 'RPC', 'SQL', 'DDE'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type2 = <Type2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type2 {
  Undefined = 'Undefined',
  Fatal = 'Fatal',
  Warning = 'Warning',
  Info = 'Info',
  Debug = 'Debug',
  Process = 'Process',
  RPC = 'RPC',
  SQL = 'SQL',
  DDE = 'DDE',
}

/**
 * Defines values for Category.
 * Possible values include: 'Undefined', 'Entity', 'Profile', 'Attachment',
 * 'Discussion', 'Field', 'Workflow'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Category = <Category>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Category {
  Undefined = 'Undefined',
  Entity = 'Entity',
  Profile = 'Profile',
  Attachment = 'Attachment',
  Discussion = 'Discussion',
  Field = 'Field',
  Workflow = 'Workflow',
}

/**
 * Defines values for ClassProperty.
 * Possible values include: 'Undefined', 'Application', 'Security', 'System'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ClassProperty =
 * <ClassProperty>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ClassProperty {
  Undefined = 'Undefined',
  Application = 'Application',
  Security = 'Security',
  System = 'System',
}

/**
 * Defines values for Operation.
 * Possible values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy',
 * 'Lock', 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge',
 * 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
 * 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward',
 * 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Operation = <Operation>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Operation {
  Undefined = 'Undefined',
  Insert = 'Insert',
  Update = 'Update',
  Delete = 'Delete',
  Copy = 'Copy',
  Lock = 'Lock',
  Unlock = 'Unlock',
  Open = 'Open',
  Close = 'Close',
  Checkout = 'Checkout',
  Checkin = 'Checkin',
  View = 'View',
  Merge = 'Merge',
  Split = 'Split',
  Classify = 'Classify',
  Null = 'Null',
  OpenWF = 'OpenWF',
  Remove = 'Remove',
  ReturnToTop = 'ReturnToTop',
  ReturnToBottom = 'ReturnToBottom',
  Accept = 'Accept',
  Suspend = 'Suspend',
  Reject = 'Reject',
  Route = 'Route',
  Forward = 'Forward',
  Reply = 'Reply',
  Reassign = 'Reassign',
  Reset = 'Reset',
  Override = 'Override',
  Rollback = 'Rollback',
  Archive = 'Archive',
}

/**
 * Defines values for SortOrder4.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder4 = <SortOrder4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder4 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy4.
 * Possible values include: 'ID', 'Type', 'EventTime'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy4 = <SortBy4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy4 {
  ID = 'ID',
  Type = 'Type',
  EventTime = 'EventTime',
}

/**
 * Defines values for Type3.
 * Possible values include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug',
 * 'Process', 'RPC', 'SQL', 'DDE'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type3 = <Type3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type3 {
  Undefined = 'Undefined',
  Fatal = 'Fatal',
  Warning = 'Warning',
  Info = 'Info',
  Debug = 'Debug',
  Process = 'Process',
  RPC = 'RPC',
  SQL = 'SQL',
  DDE = 'DDE',
}

/**
 * Defines values for Category1.
 * Possible values include: 'Undefined', 'Entity', 'Profile', 'Attachment',
 * 'Discussion', 'Field', 'Workflow'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Category1 = <Category1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Category1 {
  Undefined = 'Undefined',
  Entity = 'Entity',
  Profile = 'Profile',
  Attachment = 'Attachment',
  Discussion = 'Discussion',
  Field = 'Field',
  Workflow = 'Workflow',
}

/**
 * Defines values for ClassProperty1.
 * Possible values include: 'Undefined', 'Application', 'Security', 'System'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ClassProperty1 =
 * <ClassProperty1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ClassProperty1 {
  Undefined = 'Undefined',
  Application = 'Application',
  Security = 'Security',
  System = 'System',
}

/**
 * Defines values for Operation1.
 * Possible values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy',
 * 'Lock', 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge',
 * 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
 * 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward',
 * 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Operation1 = <Operation1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Operation1 {
  Undefined = 'Undefined',
  Insert = 'Insert',
  Update = 'Update',
  Delete = 'Delete',
  Copy = 'Copy',
  Lock = 'Lock',
  Unlock = 'Unlock',
  Open = 'Open',
  Close = 'Close',
  Checkout = 'Checkout',
  Checkin = 'Checkin',
  View = 'View',
  Merge = 'Merge',
  Split = 'Split',
  Classify = 'Classify',
  Null = 'Null',
  OpenWF = 'OpenWF',
  Remove = 'Remove',
  ReturnToTop = 'ReturnToTop',
  ReturnToBottom = 'ReturnToBottom',
  Accept = 'Accept',
  Suspend = 'Suspend',
  Reject = 'Reject',
  Route = 'Route',
  Forward = 'Forward',
  Reply = 'Reply',
  Reassign = 'Reassign',
  Reset = 'Reset',
  Override = 'Override',
  Rollback = 'Rollback',
  Archive = 'Archive',
}

/**
 * Defines values for SortOrder5.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder5 = <SortOrder5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder5 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy5.
 * Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer',
 * 'Double', 'Date'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy5 = <SortBy5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy5 {
  RowNumber = 'RowNumber',
  ID = 'ID',
  Type = 'Type',
  String = 'String',
  Integer = 'Integer',
  Double = 'Double',
  Date = 'Date',
}

/**
 * Defines values for Type4.
 * Possible values include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info',
 * 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type4 = <Type4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type4 {
  None = 'None',
  Workflow = 'Workflow',
  Fatal = 'Fatal',
  Warning = 'Warning',
  Info = 'Info',
  Debug = 'Debug',
  Process = 'Process',
  Rpc = 'Rpc',
  Sql = 'Sql',
  Dde = 'Dde',
}

/**
 * Defines values for Operation2.
 * Possible values include: 'None', 'Update', 'Reset', 'Override', 'Null'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Operation2 = <Operation2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Operation2 {
  None = 'None',
  Update = 'Update',
  Reset = 'Reset',
  Override = 'Override',
  Null = 'Null',
}

/**
 * Defines values for Category2.
 * Possible values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review',
 * 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Category2 = <Category2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Category2 {
  None = 'None',
  Direct = 'Direct',
  AdHoc = 'AdHoc',
  Production = 'Production',
  Review = 'Review',
  Reset = 'Reset',
  RoutingSlip = 'RoutingSlip',
  ReviewRoutingSlip = 'ReviewRoutingSlip',
  Override = 'Override',
}

/**
 * Defines values for Status.
 * Possible values include: 'None', 'Approved', 'Rejected', 'Suspended',
 * 'ApprovedR', 'NoneR'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Status = <Status>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Status {
  None = 'None',
  Approved = 'Approved',
  Rejected = 'Rejected',
  Suspended = 'Suspended',
  ApprovedR = 'ApprovedR',
  NoneR = 'NoneR',
}

/**
 * Defines values for State6.
 * Possible values include: 'None', 'Processed', 'Pending', 'Waiting',
 * 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State6 = <State6>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State6 {
  None = 'None',
  Processed = 'Processed',
  Pending = 'Pending',
  Waiting = 'Waiting',
  ProcessedR = 'ProcessedR',
  Override = 'Override',
  OverrideR = 'OverrideR',
  WaitingR = 'WaitingR',
}

/**
 * Defines values for SortOrder6.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder6 = <SortOrder6>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder6 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy6.
 * Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime',
 * 'InsertionTime', 'Index'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy6 = <SortBy6>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy6 {
  ID = 'ID',
  Type = 'Type',
  QueueID = 'QueueID',
  WorkflowTime = 'WorkflowTime',
  InsertionTime = 'InsertionTime',
  Index = 'Index',
}

/**
 * Defines values for Type5.
 * Possible values include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info',
 * 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type5 = <Type5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type5 {
  None = 'None',
  Workflow = 'Workflow',
  Fatal = 'Fatal',
  Warning = 'Warning',
  Info = 'Info',
  Debug = 'Debug',
  Process = 'Process',
  Rpc = 'Rpc',
  Sql = 'Sql',
  Dde = 'Dde',
}

/**
 * Defines values for Operation3.
 * Possible values include: 'None', 'Update', 'Reset', 'Override', 'Null'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Operation3 = <Operation3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Operation3 {
  None = 'None',
  Update = 'Update',
  Reset = 'Reset',
  Override = 'Override',
  Null = 'Null',
}

/**
 * Defines values for Category3.
 * Possible values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review',
 * 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Category3 = <Category3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Category3 {
  None = 'None',
  Direct = 'Direct',
  AdHoc = 'AdHoc',
  Production = 'Production',
  Review = 'Review',
  Reset = 'Reset',
  RoutingSlip = 'RoutingSlip',
  ReviewRoutingSlip = 'ReviewRoutingSlip',
  Override = 'Override',
}

/**
 * Defines values for Status1.
 * Possible values include: 'None', 'Approved', 'Rejected', 'Suspended',
 * 'ApprovedR', 'NoneR'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Status1 = <Status1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Status1 {
  None = 'None',
  Approved = 'Approved',
  Rejected = 'Rejected',
  Suspended = 'Suspended',
  ApprovedR = 'ApprovedR',
  NoneR = 'NoneR',
}

/**
 * Defines values for State7.
 * Possible values include: 'None', 'Processed', 'Pending', 'Waiting',
 * 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State7 = <State7>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State7 {
  None = 'None',
  Processed = 'Processed',
  Pending = 'Pending',
  Waiting = 'Waiting',
  ProcessedR = 'ProcessedR',
  Override = 'Override',
  OverrideR = 'OverrideR',
  WaitingR = 'WaitingR',
}

/**
 * Defines values for SortOrder7.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder7 = <SortOrder7>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder7 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for Type6.
 * Possible values include: 'Undefined', 'ComboBoxItem', 'ListBoxItem',
 * 'RadioButton', 'ForwardAction', 'ReplyAction'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type6 = <Type6>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type6 {
  Undefined = 'Undefined',
  ComboBoxItem = 'ComboBoxItem',
  ListBoxItem = 'ListBoxItem',
  RadioButton = 'RadioButton',
  ForwardAction = 'ForwardAction',
  ReplyAction = 'ReplyAction',
}

/**
 * Defines values for Type7.
 * Possible values include: 'Undefined', 'String', 'Integer', 'Double',
 * 'DateTime', 'Paragraph', 'CheckBox', 'RadioButton', 'ComboBox', 'ListBox',
 * 'Table', 'LargeText', 'ComboString'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type7 = <Type7>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type7 {
  Undefined = 'Undefined',
  String = 'String',
  Integer = 'Integer',
  Double = 'Double',
  DateTime = 'DateTime',
  Paragraph = 'Paragraph',
  CheckBox = 'CheckBox',
  RadioButton = 'RadioButton',
  ComboBox = 'ComboBox',
  ListBox = 'ListBox',
  Table = 'Table',
  LargeText = 'LargeText',
  ComboString = 'ComboString',
}

/**
 * Defines values for IsRequired.
 * Possible values include: 'NotRequired', 'Always', 'OnAccept'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: IsRequired = <IsRequired>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum IsRequired {
  NotRequired = 'NotRequired',
  Always = 'Always',
  OnAccept = 'OnAccept',
}

/**
 * Defines values for SortOrder8.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder8 = <SortOrder8>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder8 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for Type8.
 * Possible values include: 'Generic', 'Access', 'Role'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type8 = <Type8>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type8 {
  Generic = 'Generic',
  Access = 'Access',
  Role = 'Role',
}

/**
 * Defines values for State8.
 * Possible values include: 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State8 = <State8>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State8 {
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for SortOrder9.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder9 = <SortOrder9>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder9 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy7.
 * Possible values include: 'ID', 'Name', 'Type', 'State'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy7 = <SortBy7>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy7 {
  ID = 'ID',
  Name = 'Name',
  Type = 'Type',
  State = 'State',
}

/**
 * Defines values for Type9.
 * Possible values include: 'Generic', 'Access', 'Role'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type9 = <Type9>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type9 {
  Generic = 'Generic',
  Access = 'Access',
  Role = 'Role',
}

/**
 * Defines values for State9.
 * Possible values include: 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State9 = <State9>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State9 {
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for Type10.
 * Possible values include: 'Generic', 'Access', 'Role'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type10 = <Type10>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type10 {
  Generic = 'Generic',
  Access = 'Access',
  Role = 'Role',
}

/**
 * Defines values for Type11.
 * Possible values include: 'Generic', 'Access', 'Role'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type11 = <Type11>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type11 {
  Generic = 'Generic',
  Access = 'Access',
  Role = 'Role',
}

/**
 * Defines values for State10.
 * Possible values include: 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State10 = <State10>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State10 {
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for SortOrder10.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder10 =
 * <SortOrder10>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder10 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy8.
 * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
 * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy8 = <SortBy8>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy8 {
  PageNumber = 'PageNumber',
  ID = 'ID',
  Type = 'Type',
  InsertionTime = 'InsertionTime',
  ModificationTime = 'ModificationTime',
  CrossReferenceID = 'CrossReferenceID',
  SubType = 'SubType',
  Extension = 'Extension',
  Name = 'Name',
}

/**
 * Defines values for State11.
 * Possible values include: 'Undefined', 'MaxStates', 'Reserved',
 * 'UserDefined', 'Dynamic', 'Static', 'New', 'CheckedOut', 'Internal',
 * 'Statres5', 'Linked', 'Statres4', 'Statres3', 'Statres2', 'Statres1',
 * 'Locked', 'OnServerCache', 'OnClientCache', 'Fetching', 'Dynres4',
 * 'Dynres3', 'Dynres2', 'Dynres1', 'User1', 'User2', 'User3', 'User4',
 * 'User5', 'User6', 'User7', 'User8', 'User9', 'User10', 'User11', 'User12',
 * 'User13', 'User14', 'User15', 'User16'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State11 = <State11>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State11 {
  Undefined = 'Undefined',
  MaxStates = 'MaxStates',
  Reserved = 'Reserved',
  UserDefined = 'UserDefined',
  Dynamic = 'Dynamic',
  Static = 'Static',
  New = 'New',
  CheckedOut = 'CheckedOut',
  Internal = 'Internal',
  Statres5 = 'Statres5',
  Linked = 'Linked',
  Statres4 = 'Statres4',
  Statres3 = 'Statres3',
  Statres2 = 'Statres2',
  Statres1 = 'Statres1',
  Locked = 'Locked',
  OnServerCache = 'OnServerCache',
  OnClientCache = 'OnClientCache',
  Fetching = 'Fetching',
  Dynres4 = 'Dynres4',
  Dynres3 = 'Dynres3',
  Dynres2 = 'Dynres2',
  Dynres1 = 'Dynres1',
  User1 = 'User1',
  User2 = 'User2',
  User3 = 'User3',
  User4 = 'User4',
  User5 = 'User5',
  User6 = 'User6',
  User7 = 'User7',
  User8 = 'User8',
  User9 = 'User9',
  User10 = 'User10',
  User11 = 'User11',
  User12 = 'User12',
  User13 = 'User13',
  User14 = 'User14',
  User15 = 'User15',
  User16 = 'User16',
}

/**
 * Defines values for State12.
 * Possible values include: 'Undefined', 'MaxStates', 'Reserved',
 * 'UserDefined', 'Dynamic', 'Static', 'New', 'CheckedOut', 'Internal',
 * 'Statres5', 'Linked', 'Statres4', 'Statres3', 'Statres2', 'Statres1',
 * 'Locked', 'OnServerCache', 'OnClientCache', 'Fetching', 'Dynres4',
 * 'Dynres3', 'Dynres2', 'Dynres1', 'User1', 'User2', 'User3', 'User4',
 * 'User5', 'User6', 'User7', 'User8', 'User9', 'User10', 'User11', 'User12',
 * 'User13', 'User14', 'User15', 'User16'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State12 = <State12>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State12 {
  Undefined = 'Undefined',
  MaxStates = 'MaxStates',
  Reserved = 'Reserved',
  UserDefined = 'UserDefined',
  Dynamic = 'Dynamic',
  Static = 'Static',
  New = 'New',
  CheckedOut = 'CheckedOut',
  Internal = 'Internal',
  Statres5 = 'Statres5',
  Linked = 'Linked',
  Statres4 = 'Statres4',
  Statres3 = 'Statres3',
  Statres2 = 'Statres2',
  Statres1 = 'Statres1',
  Locked = 'Locked',
  OnServerCache = 'OnServerCache',
  OnClientCache = 'OnClientCache',
  Fetching = 'Fetching',
  Dynres4 = 'Dynres4',
  Dynres3 = 'Dynres3',
  Dynres2 = 'Dynres2',
  Dynres1 = 'Dynres1',
  User1 = 'User1',
  User2 = 'User2',
  User3 = 'User3',
  User4 = 'User4',
  User5 = 'User5',
  User6 = 'User6',
  User7 = 'User7',
  User8 = 'User8',
  User9 = 'User9',
  User10 = 'User10',
  User11 = 'User11',
  User12 = 'User12',
  User13 = 'User13',
  User14 = 'User14',
  User15 = 'User15',
  User16 = 'User16',
}

/**
 * Defines values for SortOrder11.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder11 =
 * <SortOrder11>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder11 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy9.
 * Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime',
 * 'ModificationTime'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy9 = <SortBy9>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy9 {
  ID = 'ID',
  EntityID = 'EntityID',
  Name = 'Name',
  CreationTime = 'CreationTime',
  ModificationTime = 'ModificationTime',
}

/**
 * Defines values for Type12.
 * Possible values include: 'Unspecified', 'Primary', 'Secondary'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type12 = <Type12>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type12 {
  Unspecified = 'Unspecified',
  Primary = 'Primary',
  Secondary = 'Secondary',
}

/**
 * Defines values for TaskSortColumn.
 * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
 * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
 * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
 * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
 * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
 * 'ReservedInt1', 'ReservedString1'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TaskSortColumn =
 * <TaskSortColumn>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TaskSortColumn {
  TaskID = 'TaskID',
  QueueID = 'QueueID',
  DrawerID = 'DrawerID',
  AddressID = 'AddressID',
  ObjectID = 'ObjectID',
  ObjectType = 'ObjectType',
  State = 'State',
  Priority = 'Priority',
  Description = 'Description',
  Message1 = 'Message1',
  Message2 = 'Message2',
  Message3 = 'Message3',
  Message4 = 'Message4',
  Message5 = 'Message5',
  OwnerUserID = 'OwnerUserID',
  OwnerGroupID = 'OwnerGroupID',
  EffectiveUserID = 'EffectiveUserID',
  EffectiveGroupID = 'EffectiveGroupID',
  PreviousQueueID = 'PreviousQueueID',
  NextQueueID = 'NextQueueID',
  InsertionTime = 'InsertionTime',
  ResolutionTime = 'ResolutionTime',
  TaskFileAttachment = 'TaskFileAttachment',
  ReservedInt1 = 'ReservedInt1',
  ReservedString1 = 'ReservedString1',
}

/**
 * Defines values for State13.
 * Possible values include: 'Unspecified', 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State13 = <State13>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State13 {
  Unspecified = 'Unspecified',
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for FetchType.
 * Possible values include: 'Unspecified', 'Manual', 'Push'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: FetchType = <FetchType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum FetchType {
  Unspecified = 'Unspecified',
  Manual = 'Manual',
  Push = 'Push',
}

/**
 * Defines values for SortOrder12.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder12 =
 * <SortOrder12>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder12 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy10.
 * Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State',
 * 'Order', 'FetchType'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy10 = <SortBy10>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy10 {
  QueueID = 'QueueID',
  UserID = 'UserID',
  GroupID = 'GroupID',
  Type = 'Type',
  State = 'State',
  Order = 'Order',
  FetchType = 'FetchType',
}

/**
 * Defines values for Type13.
 * Possible values include: 'Unspecified', 'Primary', 'Secondary'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type13 = <Type13>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type13 {
  Unspecified = 'Unspecified',
  Primary = 'Primary',
  Secondary = 'Secondary',
}

/**
 * Defines values for TaskSortColumn1.
 * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
 * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
 * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
 * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
 * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
 * 'ReservedInt1', 'ReservedString1'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TaskSortColumn1 =
 * <TaskSortColumn1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TaskSortColumn1 {
  TaskID = 'TaskID',
  QueueID = 'QueueID',
  DrawerID = 'DrawerID',
  AddressID = 'AddressID',
  ObjectID = 'ObjectID',
  ObjectType = 'ObjectType',
  State = 'State',
  Priority = 'Priority',
  Description = 'Description',
  Message1 = 'Message1',
  Message2 = 'Message2',
  Message3 = 'Message3',
  Message4 = 'Message4',
  Message5 = 'Message5',
  OwnerUserID = 'OwnerUserID',
  OwnerGroupID = 'OwnerGroupID',
  EffectiveUserID = 'EffectiveUserID',
  EffectiveGroupID = 'EffectiveGroupID',
  PreviousQueueID = 'PreviousQueueID',
  NextQueueID = 'NextQueueID',
  InsertionTime = 'InsertionTime',
  ResolutionTime = 'ResolutionTime',
  TaskFileAttachment = 'TaskFileAttachment',
  ReservedInt1 = 'ReservedInt1',
  ReservedString1 = 'ReservedString1',
}

/**
 * Defines values for State14.
 * Possible values include: 'Unspecified', 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State14 = <State14>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State14 {
  Unspecified = 'Unspecified',
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for FetchType1.
 * Possible values include: 'Unspecified', 'Manual', 'Push'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: FetchType1 = <FetchType1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum FetchType1 {
  Unspecified = 'Unspecified',
  Manual = 'Manual',
  Push = 'Push',
}

/**
 * Defines values for Type14.
 * Possible values include: 'Unspecified', 'Primary', 'Secondary'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type14 = <Type14>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type14 {
  Unspecified = 'Unspecified',
  Primary = 'Primary',
  Secondary = 'Secondary',
}

/**
 * Defines values for TaskSortColumn2.
 * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
 * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
 * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
 * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
 * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
 * 'ReservedInt1', 'ReservedString1'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TaskSortColumn2 =
 * <TaskSortColumn2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TaskSortColumn2 {
  TaskID = 'TaskID',
  QueueID = 'QueueID',
  DrawerID = 'DrawerID',
  AddressID = 'AddressID',
  ObjectID = 'ObjectID',
  ObjectType = 'ObjectType',
  State = 'State',
  Priority = 'Priority',
  Description = 'Description',
  Message1 = 'Message1',
  Message2 = 'Message2',
  Message3 = 'Message3',
  Message4 = 'Message4',
  Message5 = 'Message5',
  OwnerUserID = 'OwnerUserID',
  OwnerGroupID = 'OwnerGroupID',
  EffectiveUserID = 'EffectiveUserID',
  EffectiveGroupID = 'EffectiveGroupID',
  PreviousQueueID = 'PreviousQueueID',
  NextQueueID = 'NextQueueID',
  InsertionTime = 'InsertionTime',
  ResolutionTime = 'ResolutionTime',
  TaskFileAttachment = 'TaskFileAttachment',
  ReservedInt1 = 'ReservedInt1',
  ReservedString1 = 'ReservedString1',
}

/**
 * Defines values for FetchType2.
 * Possible values include: 'Unspecified', 'Manual', 'Push'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: FetchType2 = <FetchType2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum FetchType2 {
  Unspecified = 'Unspecified',
  Manual = 'Manual',
  Push = 'Push',
}

/**
 * Defines values for Type15.
 * Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared',
 * 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule',
 * 'System', 'Other', 'CdoInfostore', 'CdoFolder'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type15 = <Type15>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type15 {
  Inbound = 'Inbound',
  Outbound = 'Outbound',
  Access = 'Access',
  Any = 'Any',
  Shared = 'Shared',
  Public = 'Public',
  Recycle = 'Recycle',
  Fax = 'Fax',
  Print = 'Print',
  Scan = 'Scan',
  Ocr = 'Ocr',
  Workflow = 'Workflow',
  Schedule = 'Schedule',
  System = 'System',
  Other = 'Other',
  CdoInfostore = 'CdoInfostore',
  CdoFolder = 'CdoFolder',
}

/**
 * Defines values for SortOrder13.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder13 =
 * <SortOrder13>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder13 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy11.
 * Possible values include: 'ID', 'Type', 'Name', 'Alias'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy11 = <SortBy11>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy11 {
  ID = 'ID',
  Type = 'Type',
  Name = 'Name',
  Alias = 'Alias',
}

/**
 * Defines values for State15.
 * Possible values include: 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State15 = <State15>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State15 {
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for Type16.
 * Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared',
 * 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule',
 * 'System', 'Other', 'CdoInfostore', 'CdoFolder'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type16 = <Type16>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type16 {
  Inbound = 'Inbound',
  Outbound = 'Outbound',
  Access = 'Access',
  Any = 'Any',
  Shared = 'Shared',
  Public = 'Public',
  Recycle = 'Recycle',
  Fax = 'Fax',
  Print = 'Print',
  Scan = 'Scan',
  Ocr = 'Ocr',
  Workflow = 'Workflow',
  Schedule = 'Schedule',
  System = 'System',
  Other = 'Other',
  CdoInfostore = 'CdoInfostore',
  CdoFolder = 'CdoFolder',
}

/**
 * Defines values for Type17.
 * Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared',
 * 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule',
 * 'System', 'Other', 'CdoInfostore', 'CdoFolder'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type17 = <Type17>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type17 {
  Inbound = 'Inbound',
  Outbound = 'Outbound',
  Access = 'Access',
  Any = 'Any',
  Shared = 'Shared',
  Public = 'Public',
  Recycle = 'Recycle',
  Fax = 'Fax',
  Print = 'Print',
  Scan = 'Scan',
  Ocr = 'Ocr',
  Workflow = 'Workflow',
  Schedule = 'Schedule',
  System = 'System',
  Other = 'Other',
  CdoInfostore = 'CdoInfostore',
  CdoFolder = 'CdoFolder',
}

/**
 * Defines values for State16.
 * Possible values include: 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State16 = <State16>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State16 {
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for Type18.
 * Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared',
 * 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule',
 * 'System', 'Other', 'CdoInfostore', 'CdoFolder'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type18 = <Type18>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type18 {
  Inbound = 'Inbound',
  Outbound = 'Outbound',
  Access = 'Access',
  Any = 'Any',
  Shared = 'Shared',
  Public = 'Public',
  Recycle = 'Recycle',
  Fax = 'Fax',
  Print = 'Print',
  Scan = 'Scan',
  Ocr = 'Ocr',
  Workflow = 'Workflow',
  Schedule = 'Schedule',
  System = 'System',
  Other = 'Other',
  CdoInfostore = 'CdoInfostore',
  CdoFolder = 'CdoFolder',
}

/**
 * Defines values for SortOrder14.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder14 =
 * <SortOrder14>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder14 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy12.
 * Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority',
 * 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy12 = <SortBy12>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy12 {
  TaskID = 'TaskID',
  QueueID = 'QueueID',
  ObjectID = 'ObjectID',
  Priority = 'Priority',
  Description = 'Description',
  InsertionTime = 'InsertionTime',
  ResolutionTime = 'ResolutionTime',
  ReservedInt1 = 'ReservedInt1',
}

/**
 * Defines values for Type19.
 * Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk',
 * 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
 * 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
 * 'DocumentDesk', 'Poweruser'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type19 = <Type19>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type19 {
  ImageDesk = 'ImageDesk',
  PublishDesk = 'PublishDesk',
  FaxDesk = 'FaxDesk',
  CaptureDesk = 'CaptureDesk',
  RecognitionDesk = 'RecognitionDesk',
  PortalUser = 'PortalUser',
  AdminDesk = 'AdminDesk',
  WorkflowDesk = 'WorkflowDesk',
  Benchmark = 'Benchmark',
  ReportDesk = 'ReportDesk',
  ColdDesk = 'ColdDesk',
  PortalDesk = 'PortalDesk',
  WorkflowArchitect = 'WorkflowArchitect',
  DocumentDesk = 'DocumentDesk',
  Poweruser = 'Poweruser',
}

/**
 * Defines values for State17.
 * Possible values include: 'Active', 'Inactive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State17 = <State17>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State17 {
  Active = 'Active',
  Inactive = 'Inactive',
}

/**
 * Defines values for SortOrder15.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder15 =
 * <SortOrder15>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder15 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy13.
 * Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName',
 * 'Type', 'State'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy13 = <SortBy13>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy13 {
  ID = 'ID',
  PrimaryGroupID = 'PrimaryGroupID',
  Username = 'Username',
  UserFullName = 'UserFullName',
  Type = 'Type',
  State = 'State',
}

/**
 * Defines values for Type20.
 * Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk',
 * 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
 * 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
 * 'DocumentDesk', 'Poweruser'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type20 = <Type20>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type20 {
  ImageDesk = 'ImageDesk',
  PublishDesk = 'PublishDesk',
  FaxDesk = 'FaxDesk',
  CaptureDesk = 'CaptureDesk',
  RecognitionDesk = 'RecognitionDesk',
  PortalUser = 'PortalUser',
  AdminDesk = 'AdminDesk',
  WorkflowDesk = 'WorkflowDesk',
  Benchmark = 'Benchmark',
  ReportDesk = 'ReportDesk',
  ColdDesk = 'ColdDesk',
  PortalDesk = 'PortalDesk',
  WorkflowArchitect = 'WorkflowArchitect',
  DocumentDesk = 'DocumentDesk',
  Poweruser = 'Poweruser',
}

/**
 * Defines values for State18.
 * Possible values include: 'Active', 'Inactive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State18 = <State18>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State18 {
  Active = 'Active',
  Inactive = 'Inactive',
}

/**
 * Defines values for AdminMask.
 * Possible values include: 'None', 'CabinetAdmin', 'DrawerAdmin',
 * 'GroupAdmin', 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
 * 'ApplicationAdmin'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AdminMask = <AdminMask>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AdminMask {
  None = 'None',
  CabinetAdmin = 'CabinetAdmin',
  DrawerAdmin = 'DrawerAdmin',
  GroupAdmin = 'GroupAdmin',
  UserAdmin = 'UserAdmin',
  WorkflowAdmin = 'WorkflowAdmin',
  VersionAdmin = 'VersionAdmin',
  TemplateAdmin = 'TemplateAdmin',
  ApplicationAdmin = 'ApplicationAdmin',
}

/**
 * Defines values for State19.
 * Possible values include: 'Active', 'Inactive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State19 = <State19>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State19 {
  Active = 'Active',
  Inactive = 'Inactive',
}

/**
 * Defines values for Type21.
 * Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk',
 * 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
 * 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
 * 'DocumentDesk', 'Poweruser'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type21 = <Type21>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type21 {
  ImageDesk = 'ImageDesk',
  PublishDesk = 'PublishDesk',
  FaxDesk = 'FaxDesk',
  CaptureDesk = 'CaptureDesk',
  RecognitionDesk = 'RecognitionDesk',
  PortalUser = 'PortalUser',
  AdminDesk = 'AdminDesk',
  WorkflowDesk = 'WorkflowDesk',
  Benchmark = 'Benchmark',
  ReportDesk = 'ReportDesk',
  ColdDesk = 'ColdDesk',
  PortalDesk = 'PortalDesk',
  WorkflowArchitect = 'WorkflowArchitect',
  DocumentDesk = 'DocumentDesk',
  Poweruser = 'Poweruser',
}

/**
 * Defines values for AdminMask1.
 * Possible values include: 'None', 'CabinetAdmin', 'DrawerAdmin',
 * 'GroupAdmin', 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
 * 'ApplicationAdmin'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AdminMask1 = <AdminMask1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AdminMask1 {
  None = 'None',
  CabinetAdmin = 'CabinetAdmin',
  DrawerAdmin = 'DrawerAdmin',
  GroupAdmin = 'GroupAdmin',
  UserAdmin = 'UserAdmin',
  WorkflowAdmin = 'WorkflowAdmin',
  VersionAdmin = 'VersionAdmin',
  TemplateAdmin = 'TemplateAdmin',
  ApplicationAdmin = 'ApplicationAdmin',
}

/**
 * Defines values for Type22.
 * Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk',
 * 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
 * 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
 * 'DocumentDesk', 'Poweruser'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type22 = <Type22>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type22 {
  ImageDesk = 'ImageDesk',
  PublishDesk = 'PublishDesk',
  FaxDesk = 'FaxDesk',
  CaptureDesk = 'CaptureDesk',
  RecognitionDesk = 'RecognitionDesk',
  PortalUser = 'PortalUser',
  AdminDesk = 'AdminDesk',
  WorkflowDesk = 'WorkflowDesk',
  Benchmark = 'Benchmark',
  ReportDesk = 'ReportDesk',
  ColdDesk = 'ColdDesk',
  PortalDesk = 'PortalDesk',
  WorkflowArchitect = 'WorkflowArchitect',
  DocumentDesk = 'DocumentDesk',
  Poweruser = 'Poweruser',
}

/**
 * Defines values for State20.
 * Possible values include: 'Active', 'Inactive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State20 = <State20>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State20 {
  Active = 'Active',
  Inactive = 'Inactive',
}

/**
 * Defines values for AdminMask2.
 * Possible values include: 'None', 'CabinetAdmin', 'DrawerAdmin',
 * 'GroupAdmin', 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
 * 'ApplicationAdmin'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AdminMask2 = <AdminMask2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AdminMask2 {
  None = 'None',
  CabinetAdmin = 'CabinetAdmin',
  DrawerAdmin = 'DrawerAdmin',
  GroupAdmin = 'GroupAdmin',
  UserAdmin = 'UserAdmin',
  WorkflowAdmin = 'WorkflowAdmin',
  VersionAdmin = 'VersionAdmin',
  TemplateAdmin = 'TemplateAdmin',
  ApplicationAdmin = 'ApplicationAdmin',
}

/**
 * Defines values for SortOrder16.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder16 =
 * <SortOrder16>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder16 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for WorkflowType.
 * Possible values include: 'Uncategorized', 'Auto', 'StraightThrough',
 * 'Exception', 'Holding', 'Any'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: WorkflowType =
 * <WorkflowType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum WorkflowType {
  Uncategorized = 'Uncategorized',
  Auto = 'Auto',
  StraightThrough = 'StraightThrough',
  Exception = 'Exception',
  Holding = 'Holding',
  Any = 'Any',
}

/**
 * Defines values for State21.
 * Possible values include: 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State21 = <State21>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State21 {
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for Type23.
 * Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared',
 * 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule',
 * 'System', 'Other', 'CdoInfostore', 'CdoFolder'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type23 = <Type23>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type23 {
  Inbound = 'Inbound',
  Outbound = 'Outbound',
  Access = 'Access',
  Any = 'Any',
  Shared = 'Shared',
  Public = 'Public',
  Recycle = 'Recycle',
  Fax = 'Fax',
  Print = 'Print',
  Scan = 'Scan',
  Ocr = 'Ocr',
  Workflow = 'Workflow',
  Schedule = 'Schedule',
  System = 'System',
  Other = 'Other',
  CdoInfostore = 'CdoInfostore',
  CdoFolder = 'CdoFolder',
}

/**
 * Defines values for SortOrder17.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder17 =
 * <SortOrder17>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder17 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy14.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy14 = <SortBy14>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy14 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder18.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder18 =
 * <SortOrder18>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder18 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy15.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy15 = <SortBy15>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy15 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder19.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder19 =
 * <SortOrder19>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder19 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy16.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy16 = <SortBy16>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy16 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder20.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder20 =
 * <SortOrder20>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder20 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy17.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy17 = <SortBy17>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy17 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder21.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder21 =
 * <SortOrder21>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder21 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy18.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy18 = <SortBy18>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy18 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder22.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder22 =
 * <SortOrder22>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder22 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy19.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy19 = <SortBy19>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy19 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder23.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder23 =
 * <SortOrder23>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder23 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy20.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy20 = <SortBy20>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy20 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder24.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder24 =
 * <SortOrder24>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder24 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy21.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy21 = <SortBy21>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy21 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder25.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder25 =
 * <SortOrder25>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder25 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy22.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy22 = <SortBy22>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy22 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder26.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder26 =
 * <SortOrder26>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder26 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy23.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy23 = <SortBy23>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy23 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder27.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder27 =
 * <SortOrder27>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder27 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy24.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy24 = <SortBy24>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy24 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder28.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder28 =
 * <SortOrder28>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder28 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy25.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy25 = <SortBy25>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy25 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder29.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder29 =
 * <SortOrder29>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder29 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy26.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy26 = <SortBy26>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy26 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for SortOrder30.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder30 =
 * <SortOrder30>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder30 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy27.
 * Possible values include: 'Unspecified', 'DrawerID', 'ApplicationID',
 * 'GroupID', 'UserID', 'QueueID', 'Acl'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy27 = <SortBy27>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy27 {
  Unspecified = 'Unspecified',
  DrawerID = 'DrawerID',
  ApplicationID = 'ApplicationID',
  GroupID = 'GroupID',
  UserID = 'UserID',
  QueueID = 'QueueID',
  Acl = 'Acl',
}

/**
 * Defines values for Type24.
 * Possible values include: 'Standard', 'EntityLink', 'WebLink'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type24 = <Type24>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type24 {
  Standard = 'Standard',
  EntityLink = 'EntityLink',
  WebLink = 'WebLink',
}

/**
 * Defines values for SortOrder31.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder31 =
 * <SortOrder31>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder31 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy28.
 * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
 * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy28 = <SortBy28>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy28 {
  PageNumber = 'PageNumber',
  ID = 'ID',
  Type = 'Type',
  InsertionTime = 'InsertionTime',
  ModificationTime = 'ModificationTime',
  CrossReferenceID = 'CrossReferenceID',
  SubType = 'SubType',
  Extension = 'Extension',
  Name = 'Name',
}

/**
 * Defines values for SortOrder32.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder32 =
 * <SortOrder32>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder32 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy29.
 * Possible values include: 'Version', 'CreatorUserID', 'AccessorUserID',
 * 'AccessTime', 'CreationTime', 'ModificationTime'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy29 = <SortBy29>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy29 {
  Version = 'Version',
  CreatorUserID = 'CreatorUserID',
  AccessorUserID = 'AccessorUserID',
  AccessTime = 'AccessTime',
  CreationTime = 'CreationTime',
  ModificationTime = 'ModificationTime',
}

/**
 * Defines values for State22.
 * Possible values include: 'Undefined', 'Available', 'Locked', 'Suspended',
 * 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed',
 * 'ReviewedSuspended', 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
 * 'ReviewedRoutingSlipOpen'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State22 = <State22>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State22 {
  Undefined = 'Undefined',
  Available = 'Available',
  Locked = 'Locked',
  Suspended = 'Suspended',
  Archived = 'Archived',
  Deleted = 'Deleted',
  Canceled = 'Canceled',
  Complete = 'Complete',
  Reviewed = 'Reviewed',
  ReviewedSuspended = 'ReviewedSuspended',
  ReviewedComplete = 'ReviewedComplete',
  Rejected = 'Rejected',
  RoutingSlipOpen = 'RoutingSlipOpen',
  ReviewedRoutingSlipOpen = 'ReviewedRoutingSlipOpen',
}

/**
 * Defines values for SortOrder33.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder33 =
 * <SortOrder33>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder33 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy30.
 * Possible values include: 'ID', 'Type', 'CreationTime', 'ModificationTime',
 * 'State', 'Name'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy30 = <SortBy30>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy30 {
  ID = 'ID',
  Type = 'Type',
  CreationTime = 'CreationTime',
  ModificationTime = 'ModificationTime',
  State = 'State',
  Name = 'Name',
}

/**
 * Defines values for Type25.
 * Possible values include: 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug',
 * 'Process', 'RPC', 'SQL', 'DDE'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type25 = <Type25>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type25 {
  Undefined = 'Undefined',
  Fatal = 'Fatal',
  Warning = 'Warning',
  Info = 'Info',
  Debug = 'Debug',
  Process = 'Process',
  RPC = 'RPC',
  SQL = 'SQL',
  DDE = 'DDE',
}

/**
 * Defines values for Category4.
 * Possible values include: 'Undefined', 'Entity', 'Profile', 'Attachment',
 * 'Discussion', 'Field', 'Workflow'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Category4 = <Category4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Category4 {
  Undefined = 'Undefined',
  Entity = 'Entity',
  Profile = 'Profile',
  Attachment = 'Attachment',
  Discussion = 'Discussion',
  Field = 'Field',
  Workflow = 'Workflow',
}

/**
 * Defines values for ClassProperty2.
 * Possible values include: 'Undefined', 'Application', 'Security', 'System'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ClassProperty2 =
 * <ClassProperty2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ClassProperty2 {
  Undefined = 'Undefined',
  Application = 'Application',
  Security = 'Security',
  System = 'System',
}

/**
 * Defines values for Operation4.
 * Possible values include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy',
 * 'Lock', 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge',
 * 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
 * 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route', 'Forward',
 * 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback', 'Archive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Operation4 = <Operation4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Operation4 {
  Undefined = 'Undefined',
  Insert = 'Insert',
  Update = 'Update',
  Delete = 'Delete',
  Copy = 'Copy',
  Lock = 'Lock',
  Unlock = 'Unlock',
  Open = 'Open',
  Close = 'Close',
  Checkout = 'Checkout',
  Checkin = 'Checkin',
  View = 'View',
  Merge = 'Merge',
  Split = 'Split',
  Classify = 'Classify',
  Null = 'Null',
  OpenWF = 'OpenWF',
  Remove = 'Remove',
  ReturnToTop = 'ReturnToTop',
  ReturnToBottom = 'ReturnToBottom',
  Accept = 'Accept',
  Suspend = 'Suspend',
  Reject = 'Reject',
  Route = 'Route',
  Forward = 'Forward',
  Reply = 'Reply',
  Reassign = 'Reassign',
  Reset = 'Reset',
  Override = 'Override',
  Rollback = 'Rollback',
  Archive = 'Archive',
}

/**
 * Defines values for SortOrder34.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder34 =
 * <SortOrder34>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder34 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy31.
 * Possible values include: 'ID', 'Type', 'EventTime'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy31 = <SortBy31>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy31 {
  ID = 'ID',
  Type = 'Type',
  EventTime = 'EventTime',
}

/**
 * Defines values for SortOrder35.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder35 =
 * <SortOrder35>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder35 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy32.
 * Possible values include: 'RowNumber', 'ID', 'Type', 'String', 'Integer',
 * 'Double', 'Date'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy32 = <SortBy32>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy32 {
  RowNumber = 'RowNumber',
  ID = 'ID',
  Type = 'Type',
  String = 'String',
  Integer = 'Integer',
  Double = 'Double',
  Date = 'Date',
}

/**
 * Defines values for Type26.
 * Possible values include: 'None', 'Workflow', 'Fatal', 'Warning', 'Info',
 * 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type26 = <Type26>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type26 {
  None = 'None',
  Workflow = 'Workflow',
  Fatal = 'Fatal',
  Warning = 'Warning',
  Info = 'Info',
  Debug = 'Debug',
  Process = 'Process',
  Rpc = 'Rpc',
  Sql = 'Sql',
  Dde = 'Dde',
}

/**
 * Defines values for Operation5.
 * Possible values include: 'None', 'Update', 'Reset', 'Override', 'Null'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Operation5 = <Operation5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Operation5 {
  None = 'None',
  Update = 'Update',
  Reset = 'Reset',
  Override = 'Override',
  Null = 'Null',
}

/**
 * Defines values for Category5.
 * Possible values include: 'None', 'Direct', 'AdHoc', 'Production', 'Review',
 * 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Category5 = <Category5>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Category5 {
  None = 'None',
  Direct = 'Direct',
  AdHoc = 'AdHoc',
  Production = 'Production',
  Review = 'Review',
  Reset = 'Reset',
  RoutingSlip = 'RoutingSlip',
  ReviewRoutingSlip = 'ReviewRoutingSlip',
  Override = 'Override',
}

/**
 * Defines values for Status2.
 * Possible values include: 'None', 'Approved', 'Rejected', 'Suspended',
 * 'ApprovedR', 'NoneR'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Status2 = <Status2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Status2 {
  None = 'None',
  Approved = 'Approved',
  Rejected = 'Rejected',
  Suspended = 'Suspended',
  ApprovedR = 'ApprovedR',
  NoneR = 'NoneR',
}

/**
 * Defines values for State23.
 * Possible values include: 'None', 'Processed', 'Pending', 'Waiting',
 * 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State23 = <State23>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State23 {
  None = 'None',
  Processed = 'Processed',
  Pending = 'Pending',
  Waiting = 'Waiting',
  ProcessedR = 'ProcessedR',
  Override = 'Override',
  OverrideR = 'OverrideR',
  WaitingR = 'WaitingR',
}

/**
 * Defines values for SortOrder36.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder36 =
 * <SortOrder36>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder36 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy33.
 * Possible values include: 'ID', 'Type', 'QueueID', 'WorkflowTime',
 * 'InsertionTime', 'Index'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy33 = <SortBy33>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy33 {
  ID = 'ID',
  Type = 'Type',
  QueueID = 'QueueID',
  WorkflowTime = 'WorkflowTime',
  InsertionTime = 'InsertionTime',
  Index = 'Index',
}

/**
 * Defines values for SortOrder37.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder37 =
 * <SortOrder37>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder37 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortOrder38.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder38 =
 * <SortOrder38>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder38 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for Type27.
 * Possible values include: 'Generic', 'Access', 'Role'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type27 = <Type27>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type27 {
  Generic = 'Generic',
  Access = 'Access',
  Role = 'Role',
}

/**
 * Defines values for State24.
 * Possible values include: 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State24 = <State24>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State24 {
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for SortOrder39.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder39 =
 * <SortOrder39>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder39 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy34.
 * Possible values include: 'ID', 'Name', 'Type', 'State'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy34 = <SortBy34>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy34 {
  ID = 'ID',
  Name = 'Name',
  Type = 'Type',
  State = 'State',
}

/**
 * Defines values for SortOrder40.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder40 =
 * <SortOrder40>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder40 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy35.
 * Possible values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
 * 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension', 'Name'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy35 = <SortBy35>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy35 {
  PageNumber = 'PageNumber',
  ID = 'ID',
  Type = 'Type',
  InsertionTime = 'InsertionTime',
  ModificationTime = 'ModificationTime',
  CrossReferenceID = 'CrossReferenceID',
  SubType = 'SubType',
  Extension = 'Extension',
  Name = 'Name',
}

/**
 * Defines values for SortOrder41.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder41 =
 * <SortOrder41>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder41 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy36.
 * Possible values include: 'ID', 'EntityID', 'Name', 'CreationTime',
 * 'ModificationTime'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy36 = <SortBy36>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy36 {
  ID = 'ID',
  EntityID = 'EntityID',
  Name = 'Name',
  CreationTime = 'CreationTime',
  ModificationTime = 'ModificationTime',
}

/**
 * Defines values for Type28.
 * Possible values include: 'Unspecified', 'Primary', 'Secondary'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type28 = <Type28>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type28 {
  Unspecified = 'Unspecified',
  Primary = 'Primary',
  Secondary = 'Secondary',
}

/**
 * Defines values for TaskSortColumn3.
 * Possible values include: 'TaskID', 'QueueID', 'DrawerID', 'AddressID',
 * 'ObjectID', 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
 * 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
 * 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID', 'PreviousQueueID',
 * 'NextQueueID', 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
 * 'ReservedInt1', 'ReservedString1'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TaskSortColumn3 =
 * <TaskSortColumn3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TaskSortColumn3 {
  TaskID = 'TaskID',
  QueueID = 'QueueID',
  DrawerID = 'DrawerID',
  AddressID = 'AddressID',
  ObjectID = 'ObjectID',
  ObjectType = 'ObjectType',
  State = 'State',
  Priority = 'Priority',
  Description = 'Description',
  Message1 = 'Message1',
  Message2 = 'Message2',
  Message3 = 'Message3',
  Message4 = 'Message4',
  Message5 = 'Message5',
  OwnerUserID = 'OwnerUserID',
  OwnerGroupID = 'OwnerGroupID',
  EffectiveUserID = 'EffectiveUserID',
  EffectiveGroupID = 'EffectiveGroupID',
  PreviousQueueID = 'PreviousQueueID',
  NextQueueID = 'NextQueueID',
  InsertionTime = 'InsertionTime',
  ResolutionTime = 'ResolutionTime',
  TaskFileAttachment = 'TaskFileAttachment',
  ReservedInt1 = 'ReservedInt1',
  ReservedString1 = 'ReservedString1',
}

/**
 * Defines values for State25.
 * Possible values include: 'Unspecified', 'Inactive', 'Active'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State25 = <State25>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State25 {
  Unspecified = 'Unspecified',
  Inactive = 'Inactive',
  Active = 'Active',
}

/**
 * Defines values for FetchType3.
 * Possible values include: 'Unspecified', 'Manual', 'Push'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: FetchType3 = <FetchType3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum FetchType3 {
  Unspecified = 'Unspecified',
  Manual = 'Manual',
  Push = 'Push',
}

/**
 * Defines values for SortOrder42.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder42 =
 * <SortOrder42>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder42 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy37.
 * Possible values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State',
 * 'Order', 'FetchType'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy37 = <SortBy37>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy37 {
  QueueID = 'QueueID',
  UserID = 'UserID',
  GroupID = 'GroupID',
  Type = 'Type',
  State = 'State',
  Order = 'Order',
  FetchType = 'FetchType',
}

/**
 * Defines values for Type29.
 * Possible values include: 'Inbound', 'Outbound', 'Access', 'Any', 'Shared',
 * 'Public', 'Recycle', 'Fax', 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule',
 * 'System', 'Other', 'CdoInfostore', 'CdoFolder'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type29 = <Type29>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type29 {
  Inbound = 'Inbound',
  Outbound = 'Outbound',
  Access = 'Access',
  Any = 'Any',
  Shared = 'Shared',
  Public = 'Public',
  Recycle = 'Recycle',
  Fax = 'Fax',
  Print = 'Print',
  Scan = 'Scan',
  Ocr = 'Ocr',
  Workflow = 'Workflow',
  Schedule = 'Schedule',
  System = 'System',
  Other = 'Other',
  CdoInfostore = 'CdoInfostore',
  CdoFolder = 'CdoFolder',
}

/**
 * Defines values for SortOrder43.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder43 =
 * <SortOrder43>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder43 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy38.
 * Possible values include: 'ID', 'Type', 'Name', 'Alias'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy38 = <SortBy38>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy38 {
  ID = 'ID',
  Type = 'Type',
  Name = 'Name',
  Alias = 'Alias',
}

/**
 * Defines values for SortOrder44.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder44 =
 * <SortOrder44>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder44 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy39.
 * Possible values include: 'TaskID', 'QueueID', 'ObjectID', 'Priority',
 * 'Description', 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy39 = <SortBy39>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy39 {
  TaskID = 'TaskID',
  QueueID = 'QueueID',
  ObjectID = 'ObjectID',
  Priority = 'Priority',
  Description = 'Description',
  InsertionTime = 'InsertionTime',
  ResolutionTime = 'ResolutionTime',
  ReservedInt1 = 'ReservedInt1',
}

/**
 * Defines values for Type30.
 * Possible values include: 'ImageDesk', 'PublishDesk', 'FaxDesk',
 * 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
 * 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
 * 'DocumentDesk', 'Poweruser'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type30 = <Type30>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type30 {
  ImageDesk = 'ImageDesk',
  PublishDesk = 'PublishDesk',
  FaxDesk = 'FaxDesk',
  CaptureDesk = 'CaptureDesk',
  RecognitionDesk = 'RecognitionDesk',
  PortalUser = 'PortalUser',
  AdminDesk = 'AdminDesk',
  WorkflowDesk = 'WorkflowDesk',
  Benchmark = 'Benchmark',
  ReportDesk = 'ReportDesk',
  ColdDesk = 'ColdDesk',
  PortalDesk = 'PortalDesk',
  WorkflowArchitect = 'WorkflowArchitect',
  DocumentDesk = 'DocumentDesk',
  Poweruser = 'Poweruser',
}

/**
 * Defines values for State26.
 * Possible values include: 'Active', 'Inactive'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State26 = <State26>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State26 {
  Active = 'Active',
  Inactive = 'Inactive',
}

/**
 * Defines values for SortOrder45.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder45 =
 * <SortOrder45>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder45 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}

/**
 * Defines values for SortBy40.
 * Possible values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName',
 * 'Type', 'State'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortBy40 = <SortBy40>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortBy40 {
  ID = 'ID',
  PrimaryGroupID = 'PrimaryGroupID',
  Username = 'Username',
  UserFullName = 'UserFullName',
  Type = 'Type',
  State = 'State',
}

/**
 * Defines values for SortOrder46.
 * Possible values include: 'Unspecified', 'Ascending', 'Descending'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SortOrder46 =
 * <SortOrder46>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SortOrder46 {
  Unspecified = 'Unspecified',
  Ascending = 'Ascending',
  Descending = 'Descending',
}
