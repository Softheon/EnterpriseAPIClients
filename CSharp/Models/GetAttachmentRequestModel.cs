// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Model for the GET Attachment input parameters
    /// </summary>
    public partial class GetAttachmentRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the GetAttachmentRequestModel class.
        /// </summary>
        public GetAttachmentRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetAttachmentRequestModel class.
        /// </summary>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'Standard', 'EntityLink', 'WebLink'</param>
        /// <param name="extension">Gets or sets the extension.</param>
        /// <param name="minSize">Gets or sets the minimum size.</param>
        /// <param name="maxSize">Gets or sets the maximum size.</param>
        /// <param name="acl">Gets or sets the access control list.</param>
        /// <param name="entityID">Gets or sets the entity identifier.</param>
        /// <param name="drawerID">Gets or sets the drawer identifier.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="creatorUserID">Gets or sets the creator user
        /// identifier.</param>
        /// <param name="modifierUserID">Gets or sets the modifier user
        /// identifier.</param>
        /// <param name="minInsertionTime">Gets or sets the minimum insertion
        /// time.</param>
        /// <param name="maxInsertionTime">Gets or sets the maximum insertion
        /// time.</param>
        /// <param name="minModificationTime">Gets or sets the minimum
        /// modification time.</param>
        /// <param name="maxModificationTime">Gets or sets the maximum
        /// modification time.</param>
        /// <param name="page">Gets or sets the page number.</param>
        /// <param name="pageSize">Gets or sets the size of the page.</param>
        /// <param name="sortOrder">Gets or sets the order. Possible values
        /// include: 'Unspecified', 'Ascending', 'Descending'</param>
        /// <param name="sortBy">Gets or sets the column to order by. Possible
        /// values include: 'PageNumber', 'ID', 'Type', 'InsertionTime',
        /// 'ModificationTime', 'CrossReferenceID', 'SubType', 'Extension',
        /// 'Name'</param>
        public GetAttachmentRequestModel(string type = default(string), string extension = default(string), long? minSize = default(long?), long? maxSize = default(long?), int? acl = default(int?), int? entityID = default(int?), int? drawerID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
        {
            Type = type;
            Extension = extension;
            MinSize = minSize;
            MaxSize = maxSize;
            Acl = acl;
            EntityID = entityID;
            DrawerID = drawerID;
            Name = name;
            CreatorUserID = creatorUserID;
            ModifierUserID = modifierUserID;
            MinInsertionTime = minInsertionTime;
            MaxInsertionTime = maxInsertionTime;
            MinModificationTime = minModificationTime;
            MaxModificationTime = maxModificationTime;
            Page = page;
            PageSize = pageSize;
            SortOrder = sortOrder;
            SortBy = sortBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type. Possible values include: 'Standard',
        /// 'EntityLink', 'WebLink'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the extension.
        /// </summary>
        [JsonProperty(PropertyName = "Extension")]
        public string Extension { get; set; }

        /// <summary>
        /// Gets or sets the minimum size.
        /// </summary>
        [JsonProperty(PropertyName = "MinSize")]
        public long? MinSize { get; set; }

        /// <summary>
        /// Gets or sets the maximum size.
        /// </summary>
        [JsonProperty(PropertyName = "MaxSize")]
        public long? MaxSize { get; set; }

        /// <summary>
        /// Gets or sets the access control list.
        /// </summary>
        [JsonProperty(PropertyName = "Acl")]
        public int? Acl { get; set; }

        /// <summary>
        /// Gets or sets the entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EntityID")]
        public int? EntityID { get; set; }

        /// <summary>
        /// Gets or sets the drawer identifier.
        /// </summary>
        [JsonProperty(PropertyName = "DrawerID")]
        public int? DrawerID { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the creator user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "CreatorUserID")]
        public int? CreatorUserID { get; set; }

        /// <summary>
        /// Gets or sets the modifier user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ModifierUserID")]
        public int? ModifierUserID { get; set; }

        /// <summary>
        /// Gets or sets the minimum insertion time.
        /// </summary>
        [JsonProperty(PropertyName = "MinInsertionTime")]
        public System.DateTime? MinInsertionTime { get; set; }

        /// <summary>
        /// Gets or sets the maximum insertion time.
        /// </summary>
        [JsonProperty(PropertyName = "MaxInsertionTime")]
        public System.DateTime? MaxInsertionTime { get; set; }

        /// <summary>
        /// Gets or sets the minimum modification time.
        /// </summary>
        [JsonProperty(PropertyName = "MinModificationTime")]
        public System.DateTime? MinModificationTime { get; set; }

        /// <summary>
        /// Gets or sets the maximum modification time.
        /// </summary>
        [JsonProperty(PropertyName = "MaxModificationTime")]
        public System.DateTime? MaxModificationTime { get; set; }

        /// <summary>
        /// Gets or sets the page number.
        /// </summary>
        [JsonProperty(PropertyName = "Page")]
        public int? Page { get; set; }

        /// <summary>
        /// Gets or sets the size of the page.
        /// </summary>
        [JsonProperty(PropertyName = "PageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </summary>
        [JsonProperty(PropertyName = "SortOrder")]
        public string SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the column to order by. Possible values include:
        /// 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime',
        /// 'CrossReferenceID', 'SubType', 'Extension', 'Name'
        /// </summary>
        [JsonProperty(PropertyName = "SortBy")]
        public string SortBy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Extension != null)
            {
                if (Extension.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Extension", 255);
                }
                if (Extension.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Extension", 0);
                }
            }
            if (MinSize < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MinSize", 0);
            }
            if (MaxSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxSize", 1);
            }
            if (EntityID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "EntityID", 2147483647);
            }
            if (EntityID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EntityID", 1);
            }
            if (DrawerID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DrawerID", 2147483647);
            }
            if (DrawerID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DrawerID", 1);
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (CreatorUserID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "CreatorUserID", 2147483647);
            }
            if (CreatorUserID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "CreatorUserID", 1);
            }
            if (ModifierUserID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ModifierUserID", 2147483647);
            }
            if (ModifierUserID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ModifierUserID", 1);
            }
            if (Page > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Page", 2147483647);
            }
            if (Page < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Page", 1);
            }
            if (PageSize > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageSize", 1000);
            }
            if (PageSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageSize", 1);
            }
        }
    }
}
