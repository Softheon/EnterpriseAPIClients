// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Model for POST User input parameters.
    /// </summary>
    public partial class InsertUserRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the InsertUserRequestModel class.
        /// </summary>
        public InsertUserRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InsertUserRequestModel class.
        /// </summary>
        /// <param name="username">Gets or sets the username.</param>
        /// <param name="fullName">Gets or sets the full name.</param>
        /// <param name="iPAddress">Gets or sets the ip address.</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Active', 'Inactive'</param>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk',
        /// 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
        /// 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk',
        /// 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'</param>
        /// <param name="entityAcl">Gets or sets the entity acl.</param>
        /// <param name="attachmentAcl">Gets or sets the attachment
        /// acl.</param>
        /// <param name="noteAcl">Gets or sets the note acl.</param>
        /// <param name="entityFeature">Gets or sets the entity
        /// feature.</param>
        /// <param name="attachmentFeature">Gets or sets the attachment
        /// feature.</param>
        /// <param name="noteFeature">Gets or sets the note feature.</param>
        /// <param name="adminMask">Gets or sets the admin mask. Possible
        /// values include: 'None', 'CabinetAdmin', 'DrawerAdmin',
        /// 'GroupAdmin', 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin',
        /// 'TemplateAdmin', 'ApplicationAdmin'</param>
        /// <param name="address">Gets or sets the address.</param>
        public InsertUserRequestModel(string username, string fullName, string iPAddress, string state = default(string), string type = default(string), int? entityAcl = default(int?), int? attachmentAcl = default(int?), int? noteAcl = default(int?), int? entityFeature = default(int?), int? attachmentFeature = default(int?), int? noteFeature = default(int?), string adminMask = default(string), string address = default(string))
        {
            Username = username;
            State = state;
            Type = type;
            FullName = fullName;
            IPAddress = iPAddress;
            EntityAcl = entityAcl;
            AttachmentAcl = attachmentAcl;
            NoteAcl = noteAcl;
            EntityFeature = entityFeature;
            AttachmentFeature = attachmentFeature;
            NoteFeature = noteFeature;
            AdminMask = adminMask;
            Address = address;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        [JsonProperty(PropertyName = "Username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Active',
        /// 'Inactive'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the type. Possible values include: 'ImageDesk',
        /// 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
        /// 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark',
        /// 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
        /// 'DocumentDesk', 'Poweruser'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the full name.
        /// </summary>
        [JsonProperty(PropertyName = "FullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or sets the ip address.
        /// </summary>
        [JsonProperty(PropertyName = "IPAddress")]
        public string IPAddress { get; set; }

        /// <summary>
        /// Gets or sets the entity acl.
        /// </summary>
        [JsonProperty(PropertyName = "EntityAcl")]
        public int? EntityAcl { get; set; }

        /// <summary>
        /// Gets or sets the attachment acl.
        /// </summary>
        [JsonProperty(PropertyName = "AttachmentAcl")]
        public int? AttachmentAcl { get; set; }

        /// <summary>
        /// Gets or sets the note acl.
        /// </summary>
        [JsonProperty(PropertyName = "NoteAcl")]
        public int? NoteAcl { get; set; }

        /// <summary>
        /// Gets or sets the entity feature.
        /// </summary>
        [JsonProperty(PropertyName = "EntityFeature")]
        public int? EntityFeature { get; set; }

        /// <summary>
        /// Gets or sets the attachment feature.
        /// </summary>
        [JsonProperty(PropertyName = "AttachmentFeature")]
        public int? AttachmentFeature { get; set; }

        /// <summary>
        /// Gets or sets the note feature.
        /// </summary>
        [JsonProperty(PropertyName = "NoteFeature")]
        public int? NoteFeature { get; set; }

        /// <summary>
        /// Gets or sets the admin mask. Possible values include: 'None',
        /// 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin', 'UserAdmin',
        /// 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
        /// 'ApplicationAdmin'
        /// </summary>
        [JsonProperty(PropertyName = "AdminMask")]
        public string AdminMask { get; set; }

        /// <summary>
        /// Gets or sets the address.
        /// </summary>
        [JsonProperty(PropertyName = "Address")]
        public string Address { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Username == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Username");
            }
            if (FullName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FullName");
            }
            if (IPAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IPAddress");
            }
            if (Username != null)
            {
                if (Username.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Username", 255);
                }
                if (Username.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Username", 0);
                }
            }
            if (FullName != null)
            {
                if (FullName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FullName", 255);
                }
                if (FullName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FullName", 0);
                }
            }
            if (IPAddress != null)
            {
                if (IPAddress.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IPAddress", 255);
                }
                if (IPAddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IPAddress", 0);
                }
            }
            if (Address != null)
            {
                if (Address.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Address", 255);
                }
                if (Address.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Address", 0);
                }
            }
        }
    }
}
