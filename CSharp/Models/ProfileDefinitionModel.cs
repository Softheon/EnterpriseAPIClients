// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Model for Template Profiles
    /// </summary>
    public partial class ProfileDefinitionModel
    {
        /// <summary>
        /// Initializes a new instance of the ProfileDefinitionModel class.
        /// </summary>
        public ProfileDefinitionModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProfileDefinitionModel class.
        /// </summary>
        /// <param name="type">Gets or sets the type.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="reservedString1">Gets or sets the reserved
        /// string1.</param>
        /// <param name="reservedInt1">Gets or sets the reserved int1.</param>
        /// <param name="fields">Gets or sets the fields.</param>
        public ProfileDefinitionModel(int type, string name, string id = default(string), string reservedString1 = default(string), int? reservedInt1 = default(int?), IList<FieldDefinitionModel> fields = default(IList<FieldDefinitionModel>))
        {
            ID = id;
            Type = type;
            Name = name;
            ReservedString1 = reservedString1;
            ReservedInt1 = reservedInt1;
            Fields = fields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public string ID { get; set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public int Type { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the reserved string1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString1")]
        public string ReservedString1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved int1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt1")]
        public int? ReservedInt1 { get; set; }

        /// <summary>
        /// Gets or sets the fields.
        /// </summary>
        [JsonProperty(PropertyName = "Fields")]
        public IList<FieldDefinitionModel> Fields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Type > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Type", 2147483647);
            }
            if (Type < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Type", 1);
            }
            if (Fields != null)
            {
                foreach (var element in Fields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
