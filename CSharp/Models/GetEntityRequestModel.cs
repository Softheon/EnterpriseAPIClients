// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Model for the GET Entity input parameters
    /// </summary>
    public partial class GetEntityRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the GetEntityRequestModel class.
        /// </summary>
        public GetEntityRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetEntityRequestModel class.
        /// </summary>
        /// <param name="drawerID">Gets or sets the drawer identifier.</param>
        /// <param name="acl">Gets or sets the access control list.</param>
        /// <param name="type">Gets or sets the type of the entity.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Undefined', 'Available', 'Locked', 'Suspended',
        /// 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed',
        /// 'ReviewedSuspended', 'ReviewedComplete', 'Rejected',
        /// 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'</param>
        /// <param name="referenceCount">Gets or sets the reference
        /// count.</param>
        /// <param name="attachCount">Gets or sets the attach count.</param>
        /// <param name="noteCount">Gets or sets the note count.</param>
        /// <param name="ownerUserID">Gets or sets the owner user
        /// identifier.</param>
        /// <param name="ownerGroupID">Gets or sets the owner group
        /// identifier.</param>
        /// <param name="creatorUserID">Gets or sets the creator user
        /// identifier.</param>
        /// <param name="creatorGroupID">Gets or sets the creator group
        /// identifier.</param>
        /// <param name="modifierUserID">Gets or sets the modifier user
        /// identifier.</param>
        /// <param name="modifierGroupID">Gets or sets the modifier group
        /// identifier.</param>
        /// <param name="minCreationTime">Gets or sets the minimum creation
        /// time.</param>
        /// <param name="maxCreationTime">Gets or sets the maximum creation
        /// time.</param>
        /// <param name="minModificationTime">Gets or sets the minimum
        /// modification time.</param>
        /// <param name="maxModificationTime">Gets or sets the maximum
        /// modification time.</param>
        /// <param name="metadata">Gets or sets the metadata.</param>
        /// <param name="page">Gets or sets the page number.</param>
        /// <param name="pageSize">Gets or sets the size of the page.</param>
        /// <param name="sortOrder">Gets or sets the order. Possible values
        /// include: 'Unspecified', 'Ascending', 'Descending'</param>
        /// <param name="sortBy">Gets or sets the column to order by. Possible
        /// values include: 'ID', 'Type', 'CreationTime', 'ModificationTime',
        /// 'State', 'Name'</param>
        public GetEntityRequestModel(int drawerID, int? acl = default(int?), int? type = default(int?), string name = default(string), string state = default(string), int? referenceCount = default(int?), int? attachCount = default(int?), int? noteCount = default(int?), int? ownerUserID = default(int?), int? ownerGroupID = default(int?), int? creatorUserID = default(int?), int? creatorGroupID = default(int?), int? modifierUserID = default(int?), int? modifierGroupID = default(int?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), IList<GetProfileFieldRequestModel> metadata = default(IList<GetProfileFieldRequestModel>), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
        {
            DrawerID = drawerID;
            Acl = acl;
            Type = type;
            Name = name;
            State = state;
            ReferenceCount = referenceCount;
            AttachCount = attachCount;
            NoteCount = noteCount;
            OwnerUserID = ownerUserID;
            OwnerGroupID = ownerGroupID;
            CreatorUserID = creatorUserID;
            CreatorGroupID = creatorGroupID;
            ModifierUserID = modifierUserID;
            ModifierGroupID = modifierGroupID;
            MinCreationTime = minCreationTime;
            MaxCreationTime = maxCreationTime;
            MinModificationTime = minModificationTime;
            MaxModificationTime = maxModificationTime;
            Metadata = metadata;
            Page = page;
            PageSize = pageSize;
            SortOrder = sortOrder;
            SortBy = sortBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the drawer identifier.
        /// </summary>
        [JsonProperty(PropertyName = "DrawerID")]
        public int DrawerID { get; set; }

        /// <summary>
        /// Gets or sets the access control list.
        /// </summary>
        [JsonProperty(PropertyName = "Acl")]
        public int? Acl { get; set; }

        /// <summary>
        /// Gets or sets the type of the entity.
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Undefined',
        /// 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
        /// 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
        /// 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
        /// 'ReviewedRoutingSlipOpen'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the reference count.
        /// </summary>
        [JsonProperty(PropertyName = "ReferenceCount")]
        public int? ReferenceCount { get; set; }

        /// <summary>
        /// Gets or sets the attach count.
        /// </summary>
        [JsonProperty(PropertyName = "AttachCount")]
        public int? AttachCount { get; set; }

        /// <summary>
        /// Gets or sets the note count.
        /// </summary>
        [JsonProperty(PropertyName = "NoteCount")]
        public int? NoteCount { get; set; }

        /// <summary>
        /// Gets or sets the owner user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "OwnerUserID")]
        public int? OwnerUserID { get; set; }

        /// <summary>
        /// Gets or sets the owner group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "OwnerGroupID")]
        public int? OwnerGroupID { get; set; }

        /// <summary>
        /// Gets or sets the creator user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "CreatorUserID")]
        public int? CreatorUserID { get; set; }

        /// <summary>
        /// Gets or sets the creator group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "CreatorGroupID")]
        public int? CreatorGroupID { get; set; }

        /// <summary>
        /// Gets or sets the modifier user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ModifierUserID")]
        public int? ModifierUserID { get; set; }

        /// <summary>
        /// Gets or sets the modifier group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ModifierGroupID")]
        public int? ModifierGroupID { get; set; }

        /// <summary>
        /// Gets or sets the minimum creation time.
        /// </summary>
        [JsonProperty(PropertyName = "MinCreationTime")]
        public System.DateTime? MinCreationTime { get; set; }

        /// <summary>
        /// Gets or sets the maximum creation time.
        /// </summary>
        [JsonProperty(PropertyName = "MaxCreationTime")]
        public System.DateTime? MaxCreationTime { get; set; }

        /// <summary>
        /// Gets or sets the minimum modification time.
        /// </summary>
        [JsonProperty(PropertyName = "MinModificationTime")]
        public System.DateTime? MinModificationTime { get; set; }

        /// <summary>
        /// Gets or sets the maximum modification time.
        /// </summary>
        [JsonProperty(PropertyName = "MaxModificationTime")]
        public System.DateTime? MaxModificationTime { get; set; }

        /// <summary>
        /// Gets or sets the metadata.
        /// </summary>
        [JsonProperty(PropertyName = "Metadata")]
        public IList<GetProfileFieldRequestModel> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the page number.
        /// </summary>
        [JsonProperty(PropertyName = "Page")]
        public int? Page { get; set; }

        /// <summary>
        /// Gets or sets the size of the page.
        /// </summary>
        [JsonProperty(PropertyName = "PageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </summary>
        [JsonProperty(PropertyName = "SortOrder")]
        public string SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'Type', 'CreationTime', 'ModificationTime', 'State', 'Name'
        /// </summary>
        [JsonProperty(PropertyName = "SortBy")]
        public string SortBy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DrawerID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DrawerID", 2147483647);
            }
            if (DrawerID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DrawerID", 1);
            }
            if (Type > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Type", 2147483647);
            }
            if (Type < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Type", 1);
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (ReferenceCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ReferenceCount", 2147483647);
            }
            if (ReferenceCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ReferenceCount", 0);
            }
            if (AttachCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "AttachCount", 2147483647);
            }
            if (AttachCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "AttachCount", 0);
            }
            if (NoteCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "NoteCount", 2147483647);
            }
            if (NoteCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "NoteCount", 0);
            }
            if (OwnerUserID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "OwnerUserID", 2147483647);
            }
            if (OwnerUserID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "OwnerUserID", 1);
            }
            if (OwnerGroupID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "OwnerGroupID", 2147483647);
            }
            if (OwnerGroupID < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "OwnerGroupID", 0);
            }
            if (CreatorUserID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "CreatorUserID", 2147483647);
            }
            if (CreatorUserID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "CreatorUserID", 1);
            }
            if (CreatorGroupID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "CreatorGroupID", 2147483647);
            }
            if (CreatorGroupID < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "CreatorGroupID", 0);
            }
            if (ModifierUserID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ModifierUserID", 2147483647);
            }
            if (ModifierUserID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ModifierUserID", 1);
            }
            if (ModifierGroupID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ModifierGroupID", 2147483647);
            }
            if (ModifierGroupID < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ModifierGroupID", 0);
            }
            if (Metadata != null)
            {
                foreach (var element in Metadata)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Page > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Page", 2147483647);
            }
            if (Page < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Page", 1);
            }
            if (PageSize > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageSize", 1000);
            }
            if (PageSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageSize", 1);
            }
        }
    }
}
