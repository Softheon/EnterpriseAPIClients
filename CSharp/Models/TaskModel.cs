// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model that is sent in response to a GET request for Tasks
    /// </summary>
    public partial class TaskModel
    {
        /// <summary>
        /// Initializes a new instance of the TaskModel class.
        /// </summary>
        public TaskModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskModel class.
        /// </summary>
        /// <param name="taskID">Gets or sets the task identifier.</param>
        /// <param name="queueID">Gets or sets the queue identifier.</param>
        /// <param name="drawerID">Gets or sets the drawer identifier.</param>
        /// <param name="objectID">Gets or sets the object identifier
        /// (entity).</param>
        /// <param name="objectType">Gets or sets the type of the object
        /// (entity).</param>
        /// <param name="ownerUserID">Gets or sets the task owner user
        /// identifier.</param>
        /// <param name="ownerUserFullName">Gets or sets the full name of the
        /// owner user.</param>
        /// <param name="ownerGroupID">Gets or sets the task owner group
        /// identifier.</param>
        /// <param name="ownerGroupName">Gets or sets the name of the owner
        /// group.</param>
        /// <param name="effectiveUserID">Gets or sets the effective user
        /// identifier.</param>
        /// <param name="effectiveUserFullName">Gets or sets the full name of
        /// the effective user.</param>
        /// <param name="effectiveGroupID">Gets or sets the effective group
        /// identifier.</param>
        /// <param name="effectiveGroupName">Gets or sets the name of the
        /// effective group.</param>
        /// <param name="prevQueueID">Gets or sets the previous queue
        /// identifier.</param>
        /// <param name="nextQueueID">Gets or sets the next queue
        /// identifier.</param>
        /// <param name="insertionTime">Gets or sets the task insertion
        /// time.</param>
        /// <param name="addressID">Gets or sets the address
        /// identifier.</param>
        /// <param name="description">Gets or sets the description of the
        /// task.</param>
        /// <param name="message1">Gets or sets message 1.</param>
        /// <param name="message2">Gets or sets message 2.</param>
        /// <param name="message3">Gets or sets message 3.</param>
        /// <param name="message4">Gets or sets message 4.</param>
        /// <param name="message5">Gets or sets message5.</param>
        /// <param name="message6">Gets or sets message 6.</param>
        /// <param name="message7">Gets or sets message 7.</param>
        /// <param name="message8">Gets or sets message 8.</param>
        /// <param name="message9">Gets or sets message 9.</param>
        /// <param name="message10">Gets or sets message 10.</param>
        /// <param name="message11">Gets or sets message 11.</param>
        /// <param name="message12">Gets or sets message 12.</param>
        /// <param name="message13">Gets or sets message 13.</param>
        /// <param name="message14">Gets or sets message 14.</param>
        /// <param name="message15">Gets or sets message 15.</param>
        /// <param name="message16">Gets or sets message 16.</param>
        /// <param name="state">Gets or sets the task state.</param>
        /// <param name="priority">Gets or sets the task priority.</param>
        /// <param name="resolutionTime">Gets or sets the task resolution
        /// time.</param>
        /// <param name="taskFileAttachment">Gets or sets the task file
        /// attachment name.</param>
        /// <param name="reservedInt1">Gets or sets reserved integer 1.</param>
        /// <param name="reservedString1">Gets or sets reserved string
        /// 1.</param>
        public TaskModel(int? taskID = default(int?), int? queueID = default(int?), int? drawerID = default(int?), int? objectID = default(int?), int? objectType = default(int?), int? ownerUserID = default(int?), string ownerUserFullName = default(string), int? ownerGroupID = default(int?), string ownerGroupName = default(string), int? effectiveUserID = default(int?), string effectiveUserFullName = default(string), int? effectiveGroupID = default(int?), string effectiveGroupName = default(string), int? prevQueueID = default(int?), int? nextQueueID = default(int?), System.DateTime? insertionTime = default(System.DateTime?), int? addressID = default(int?), string description = default(string), string message1 = default(string), string message2 = default(string), string message3 = default(string), string message4 = default(string), string message5 = default(string), string message6 = default(string), string message7 = default(string), string message8 = default(string), string message9 = default(string), string message10 = default(string), string message11 = default(string), string message12 = default(string), string message13 = default(string), string message14 = default(string), string message15 = default(string), string message16 = default(string), int? state = default(int?), int? priority = default(int?), System.DateTime? resolutionTime = default(System.DateTime?), string taskFileAttachment = default(string), int? reservedInt1 = default(int?), string reservedString1 = default(string))
        {
            TaskID = taskID;
            QueueID = queueID;
            DrawerID = drawerID;
            ObjectID = objectID;
            ObjectType = objectType;
            OwnerUserID = ownerUserID;
            OwnerUserFullName = ownerUserFullName;
            OwnerGroupID = ownerGroupID;
            OwnerGroupName = ownerGroupName;
            EffectiveUserID = effectiveUserID;
            EffectiveUserFullName = effectiveUserFullName;
            EffectiveGroupID = effectiveGroupID;
            EffectiveGroupName = effectiveGroupName;
            PrevQueueID = prevQueueID;
            NextQueueID = nextQueueID;
            InsertionTime = insertionTime;
            AddressID = addressID;
            Description = description;
            Message1 = message1;
            Message2 = message2;
            Message3 = message3;
            Message4 = message4;
            Message5 = message5;
            Message6 = message6;
            Message7 = message7;
            Message8 = message8;
            Message9 = message9;
            Message10 = message10;
            Message11 = message11;
            Message12 = message12;
            Message13 = message13;
            Message14 = message14;
            Message15 = message15;
            Message16 = message16;
            State = state;
            Priority = priority;
            ResolutionTime = resolutionTime;
            TaskFileAttachment = taskFileAttachment;
            ReservedInt1 = reservedInt1;
            ReservedString1 = reservedString1;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the task identifier.
        /// </summary>
        [JsonProperty(PropertyName = "TaskID")]
        public int? TaskID { get; set; }

        /// <summary>
        /// Gets or sets the queue identifier.
        /// </summary>
        [JsonProperty(PropertyName = "QueueID")]
        public int? QueueID { get; set; }

        /// <summary>
        /// Gets or sets the drawer identifier.
        /// </summary>
        [JsonProperty(PropertyName = "DrawerID")]
        public int? DrawerID { get; set; }

        /// <summary>
        /// Gets or sets the object identifier (entity).
        /// </summary>
        [JsonProperty(PropertyName = "ObjectID")]
        public int? ObjectID { get; set; }

        /// <summary>
        /// Gets or sets the type of the object (entity).
        /// </summary>
        [JsonProperty(PropertyName = "ObjectType")]
        public int? ObjectType { get; set; }

        /// <summary>
        /// Gets or sets the task owner user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "OwnerUserID")]
        public int? OwnerUserID { get; set; }

        /// <summary>
        /// Gets or sets the full name of the owner user.
        /// </summary>
        [JsonProperty(PropertyName = "OwnerUserFullName")]
        public string OwnerUserFullName { get; set; }

        /// <summary>
        /// Gets or sets the task owner group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "OwnerGroupID")]
        public int? OwnerGroupID { get; set; }

        /// <summary>
        /// Gets or sets the name of the owner group.
        /// </summary>
        [JsonProperty(PropertyName = "OwnerGroupName")]
        public string OwnerGroupName { get; set; }

        /// <summary>
        /// Gets or sets the effective user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EffectiveUserID")]
        public int? EffectiveUserID { get; set; }

        /// <summary>
        /// Gets or sets the full name of the effective user.
        /// </summary>
        [JsonProperty(PropertyName = "EffectiveUserFullName")]
        public string EffectiveUserFullName { get; set; }

        /// <summary>
        /// Gets or sets the effective group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EffectiveGroupID")]
        public int? EffectiveGroupID { get; set; }

        /// <summary>
        /// Gets or sets the name of the effective group.
        /// </summary>
        [JsonProperty(PropertyName = "EffectiveGroupName")]
        public string EffectiveGroupName { get; set; }

        /// <summary>
        /// Gets or sets the previous queue identifier.
        /// </summary>
        [JsonProperty(PropertyName = "PrevQueueID")]
        public int? PrevQueueID { get; set; }

        /// <summary>
        /// Gets or sets the next queue identifier.
        /// </summary>
        [JsonProperty(PropertyName = "NextQueueID")]
        public int? NextQueueID { get; set; }

        /// <summary>
        /// Gets or sets the task insertion time.
        /// </summary>
        [JsonProperty(PropertyName = "InsertionTime")]
        public System.DateTime? InsertionTime { get; set; }

        /// <summary>
        /// Gets or sets the address identifier.
        /// </summary>
        [JsonProperty(PropertyName = "AddressID")]
        public int? AddressID { get; set; }

        /// <summary>
        /// Gets or sets the description of the task.
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets message 1.
        /// </summary>
        [JsonProperty(PropertyName = "Message1")]
        public string Message1 { get; set; }

        /// <summary>
        /// Gets or sets message 2.
        /// </summary>
        [JsonProperty(PropertyName = "Message2")]
        public string Message2 { get; set; }

        /// <summary>
        /// Gets or sets message 3.
        /// </summary>
        [JsonProperty(PropertyName = "Message3")]
        public string Message3 { get; set; }

        /// <summary>
        /// Gets or sets message 4.
        /// </summary>
        [JsonProperty(PropertyName = "Message4")]
        public string Message4 { get; set; }

        /// <summary>
        /// Gets or sets message5.
        /// </summary>
        [JsonProperty(PropertyName = "Message5")]
        public string Message5 { get; set; }

        /// <summary>
        /// Gets or sets message 6.
        /// </summary>
        [JsonProperty(PropertyName = "Message6")]
        public string Message6 { get; set; }

        /// <summary>
        /// Gets or sets message 7.
        /// </summary>
        [JsonProperty(PropertyName = "Message7")]
        public string Message7 { get; set; }

        /// <summary>
        /// Gets or sets message 8.
        /// </summary>
        [JsonProperty(PropertyName = "Message8")]
        public string Message8 { get; set; }

        /// <summary>
        /// Gets or sets message 9.
        /// </summary>
        [JsonProperty(PropertyName = "Message9")]
        public string Message9 { get; set; }

        /// <summary>
        /// Gets or sets message 10.
        /// </summary>
        [JsonProperty(PropertyName = "Message10")]
        public string Message10 { get; set; }

        /// <summary>
        /// Gets or sets message 11.
        /// </summary>
        [JsonProperty(PropertyName = "Message11")]
        public string Message11 { get; set; }

        /// <summary>
        /// Gets or sets message 12.
        /// </summary>
        [JsonProperty(PropertyName = "Message12")]
        public string Message12 { get; set; }

        /// <summary>
        /// Gets or sets message 13.
        /// </summary>
        [JsonProperty(PropertyName = "Message13")]
        public string Message13 { get; set; }

        /// <summary>
        /// Gets or sets message 14.
        /// </summary>
        [JsonProperty(PropertyName = "Message14")]
        public string Message14 { get; set; }

        /// <summary>
        /// Gets or sets message 15.
        /// </summary>
        [JsonProperty(PropertyName = "Message15")]
        public string Message15 { get; set; }

        /// <summary>
        /// Gets or sets message 16.
        /// </summary>
        [JsonProperty(PropertyName = "Message16")]
        public string Message16 { get; set; }

        /// <summary>
        /// Gets or sets the task state.
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public int? State { get; set; }

        /// <summary>
        /// Gets or sets the task priority.
        /// </summary>
        [JsonProperty(PropertyName = "Priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or sets the task resolution time.
        /// </summary>
        [JsonProperty(PropertyName = "ResolutionTime")]
        public System.DateTime? ResolutionTime { get; set; }

        /// <summary>
        /// Gets or sets the task file attachment name.
        /// </summary>
        [JsonProperty(PropertyName = "TaskFileAttachment")]
        public string TaskFileAttachment { get; set; }

        /// <summary>
        /// Gets or sets reserved integer 1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt1")]
        public int? ReservedInt1 { get; set; }

        /// <summary>
        /// Gets or sets reserved string 1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString1")]
        public string ReservedString1 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AddressID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "AddressID", 2147483647);
            }
            if (AddressID < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "AddressID", 0);
            }
            if (Description != null)
            {
                if (Description.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 255);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (Message1 != null)
            {
                if (Message1.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message1", 255);
                }
                if (Message1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message1", 0);
                }
            }
            if (Message2 != null)
            {
                if (Message2.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message2", 255);
                }
                if (Message2.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message2", 0);
                }
            }
            if (Message3 != null)
            {
                if (Message3.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message3", 255);
                }
                if (Message3.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message3", 0);
                }
            }
            if (Message4 != null)
            {
                if (Message4.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message4", 255);
                }
                if (Message4.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message4", 0);
                }
            }
            if (Message5 != null)
            {
                if (Message5.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message5", 255);
                }
                if (Message5.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message5", 0);
                }
            }
            if (Message6 != null)
            {
                if (Message6.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message6", 255);
                }
                if (Message6.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message6", 0);
                }
            }
            if (Message7 != null)
            {
                if (Message7.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message7", 255);
                }
                if (Message7.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message7", 0);
                }
            }
            if (Message8 != null)
            {
                if (Message8.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message8", 255);
                }
                if (Message8.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message8", 0);
                }
            }
            if (Message9 != null)
            {
                if (Message9.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message9", 255);
                }
                if (Message9.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message9", 0);
                }
            }
            if (Message10 != null)
            {
                if (Message10.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message10", 255);
                }
                if (Message10.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message10", 0);
                }
            }
            if (Message11 != null)
            {
                if (Message11.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message11", 255);
                }
                if (Message11.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message11", 0);
                }
            }
            if (Message12 != null)
            {
                if (Message12.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message12", 255);
                }
                if (Message12.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message12", 0);
                }
            }
            if (Message13 != null)
            {
                if (Message13.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message13", 255);
                }
                if (Message13.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message13", 0);
                }
            }
            if (Message14 != null)
            {
                if (Message14.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message14", 255);
                }
                if (Message14.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message14", 0);
                }
            }
            if (Message15 != null)
            {
                if (Message15.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message15", 255);
                }
                if (Message15.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message15", 0);
                }
            }
            if (Message16 != null)
            {
                if (Message16.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Message16", 255);
                }
                if (Message16.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Message16", 0);
                }
            }
            if (TaskFileAttachment != null)
            {
                if (TaskFileAttachment.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TaskFileAttachment", 255);
                }
                if (TaskFileAttachment.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TaskFileAttachment", 0);
                }
            }
            if (ReservedString1 != null)
            {
                if (ReservedString1.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString1", 255);
                }
                if (ReservedString1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString1", 0);
                }
            }
        }
    }
}
