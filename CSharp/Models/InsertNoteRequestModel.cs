// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Model for POST Note input parameters.
    /// </summary>
    public partial class InsertNoteRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the InsertNoteRequestModel class.
        /// </summary>
        public InsertNoteRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InsertNoteRequestModel class.
        /// </summary>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="note">Gets or sets the note.</param>
        /// <param name="acl">Gets or sets the acl.</param>
        /// <param name="entityID">Gets or sets the entity identifier.</param>
        /// <param name="parentID">Gets or sets the parent identifier.</param>
        public InsertNoteRequestModel(string name, string note, int? acl = default(int?), int? entityID = default(int?), int? parentID = default(int?))
        {
            Acl = acl;
            EntityID = entityID;
            Name = name;
            Note = note;
            ParentID = parentID;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the acl.
        /// </summary>
        [JsonProperty(PropertyName = "Acl")]
        public int? Acl { get; set; }

        /// <summary>
        /// Gets or sets the entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EntityID")]
        public int? EntityID { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the note.
        /// </summary>
        [JsonProperty(PropertyName = "Note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets the parent identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ParentID")]
        public int? ParentID { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Note == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Note");
            }
            if (EntityID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "EntityID", 2147483647);
            }
            if (EntityID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EntityID", 1);
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (Note != null)
            {
                if (Note.Length > 8000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Note", 8000);
                }
                if (Note.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Note", 0);
                }
            }
            if (ParentID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ParentID", 2147483647);
            }
            if (ParentID < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ParentID", 0);
            }
        }
    }
}
