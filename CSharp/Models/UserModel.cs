// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model that is sent in response to a GET request for Users
    /// </summary>
    public partial class UserModel
    {
        /// <summary>
        /// Initializes a new instance of the UserModel class.
        /// </summary>
        public UserModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserModel class.
        /// </summary>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="username">Gets or sets the username.</param>
        /// <param name="loginCount">Gets or sets the login count.</param>
        /// <param name="drawerCount">Gets or sets the drawer count.</param>
        /// <param name="groupCount">Gets or sets the group count.</param>
        /// <param name="queueCount">Gets or sets the queue count.</param>
        /// <param name="loginTime">Gets or sets the login time.</param>
        /// <param name="lastLogin">Gets or sets the last login.</param>
        /// <param name="primaryGroupID">Gets or sets the primary group
        /// identifier.</param>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk',
        /// 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
        /// 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk',
        /// 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Active', 'Inactive'</param>
        /// <param name="fullName">Gets or sets the full name.</param>
        /// <param name="objectCount">Gets or sets the object count.</param>
        /// <param name="iPAddress">Gets or sets the ip address.</param>
        /// <param name="entityAcl">Gets or sets the entity acl.</param>
        /// <param name="attachmentAcl">Gets or sets the attachment
        /// acl.</param>
        /// <param name="noteAcl">Gets or sets the note acl.</param>
        /// <param name="entityFeature">Gets or sets the entity
        /// feature.</param>
        /// <param name="attachmentFeature">Gets or sets the attachment
        /// feature.</param>
        /// <param name="noteFeature">Gets or sets the note feature.</param>
        /// <param name="adminMask">Gets or sets the admin mask. Possible
        /// values include: 'None', 'CabinetAdmin', 'DrawerAdmin',
        /// 'GroupAdmin', 'UserAdmin', 'WorkflowAdmin', 'VersionAdmin',
        /// 'TemplateAdmin', 'ApplicationAdmin'</param>
        /// <param name="address">Gets or sets the address.</param>
        /// <param name="reservedInt1">Gets or sets the reserved int1.</param>
        /// <param name="reservedInt2">Gets or sets the reserved int2.</param>
        /// <param name="reservedDouble1">Gets or sets the reserved
        /// double1.</param>
        /// <param name="reservedDouble2">Gets or sets the reserved
        /// double2.</param>
        /// <param name="reservedString1">Gets or sets the reserved
        /// string1.</param>
        /// <param name="reservedString2">Gets or sets the reserved
        /// string2.</param>
        /// <param name="userExpiration">Gets or sets the user
        /// expiration.</param>
        public UserModel(int? id = default(int?), string username = default(string), int? loginCount = default(int?), int? drawerCount = default(int?), int? groupCount = default(int?), int? queueCount = default(int?), int? loginTime = default(int?), System.DateTime? lastLogin = default(System.DateTime?), int? primaryGroupID = default(int?), string type = default(string), string state = default(string), string fullName = default(string), int? objectCount = default(int?), string iPAddress = default(string), int? entityAcl = default(int?), int? attachmentAcl = default(int?), int? noteAcl = default(int?), int? entityFeature = default(int?), int? attachmentFeature = default(int?), int? noteFeature = default(int?), string adminMask = default(string), string address = default(string), int? reservedInt1 = default(int?), int? reservedInt2 = default(int?), double? reservedDouble1 = default(double?), double? reservedDouble2 = default(double?), string reservedString1 = default(string), string reservedString2 = default(string), System.DateTime? userExpiration = default(System.DateTime?))
        {
            ID = id;
            Username = username;
            LoginCount = loginCount;
            DrawerCount = drawerCount;
            GroupCount = groupCount;
            QueueCount = queueCount;
            LoginTime = loginTime;
            LastLogin = lastLogin;
            PrimaryGroupID = primaryGroupID;
            Type = type;
            State = state;
            FullName = fullName;
            ObjectCount = objectCount;
            IPAddress = iPAddress;
            EntityAcl = entityAcl;
            AttachmentAcl = attachmentAcl;
            NoteAcl = noteAcl;
            EntityFeature = entityFeature;
            AttachmentFeature = attachmentFeature;
            NoteFeature = noteFeature;
            AdminMask = adminMask;
            Address = address;
            ReservedInt1 = reservedInt1;
            ReservedInt2 = reservedInt2;
            ReservedDouble1 = reservedDouble1;
            ReservedDouble2 = reservedDouble2;
            ReservedString1 = reservedString1;
            ReservedString2 = reservedString2;
            UserExpiration = userExpiration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        [JsonProperty(PropertyName = "Username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the login count.
        /// </summary>
        [JsonProperty(PropertyName = "LoginCount")]
        public int? LoginCount { get; set; }

        /// <summary>
        /// Gets or sets the drawer count.
        /// </summary>
        [JsonProperty(PropertyName = "DrawerCount")]
        public int? DrawerCount { get; set; }

        /// <summary>
        /// Gets or sets the group count.
        /// </summary>
        [JsonProperty(PropertyName = "GroupCount")]
        public int? GroupCount { get; set; }

        /// <summary>
        /// Gets or sets the queue count.
        /// </summary>
        [JsonProperty(PropertyName = "QueueCount")]
        public int? QueueCount { get; set; }

        /// <summary>
        /// Gets or sets the login time.
        /// </summary>
        [JsonProperty(PropertyName = "LoginTime")]
        public int? LoginTime { get; set; }

        /// <summary>
        /// Gets or sets the last login.
        /// </summary>
        [JsonProperty(PropertyName = "LastLogin")]
        public System.DateTime? LastLogin { get; set; }

        /// <summary>
        /// Gets or sets the primary group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "PrimaryGroupID")]
        public int? PrimaryGroupID { get; set; }

        /// <summary>
        /// Gets or sets the type. Possible values include: 'ImageDesk',
        /// 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
        /// 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark',
        /// 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
        /// 'DocumentDesk', 'Poweruser'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Active',
        /// 'Inactive'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the full name.
        /// </summary>
        [JsonProperty(PropertyName = "FullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or sets the object count.
        /// </summary>
        [JsonProperty(PropertyName = "ObjectCount")]
        public int? ObjectCount { get; set; }

        /// <summary>
        /// Gets or sets the ip address.
        /// </summary>
        [JsonProperty(PropertyName = "IPAddress")]
        public string IPAddress { get; set; }

        /// <summary>
        /// Gets or sets the entity acl.
        /// </summary>
        [JsonProperty(PropertyName = "EntityAcl")]
        public int? EntityAcl { get; set; }

        /// <summary>
        /// Gets or sets the attachment acl.
        /// </summary>
        [JsonProperty(PropertyName = "AttachmentAcl")]
        public int? AttachmentAcl { get; set; }

        /// <summary>
        /// Gets or sets the note acl.
        /// </summary>
        [JsonProperty(PropertyName = "NoteAcl")]
        public int? NoteAcl { get; set; }

        /// <summary>
        /// Gets or sets the entity feature.
        /// </summary>
        [JsonProperty(PropertyName = "EntityFeature")]
        public int? EntityFeature { get; set; }

        /// <summary>
        /// Gets or sets the attachment feature.
        /// </summary>
        [JsonProperty(PropertyName = "AttachmentFeature")]
        public int? AttachmentFeature { get; set; }

        /// <summary>
        /// Gets or sets the note feature.
        /// </summary>
        [JsonProperty(PropertyName = "NoteFeature")]
        public int? NoteFeature { get; set; }

        /// <summary>
        /// Gets or sets the admin mask. Possible values include: 'None',
        /// 'CabinetAdmin', 'DrawerAdmin', 'GroupAdmin', 'UserAdmin',
        /// 'WorkflowAdmin', 'VersionAdmin', 'TemplateAdmin',
        /// 'ApplicationAdmin'
        /// </summary>
        [JsonProperty(PropertyName = "AdminMask")]
        public string AdminMask { get; set; }

        /// <summary>
        /// Gets or sets the address.
        /// </summary>
        [JsonProperty(PropertyName = "Address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets the reserved int1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt1")]
        public int? ReservedInt1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved int2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt2")]
        public int? ReservedInt2 { get; set; }

        /// <summary>
        /// Gets or sets the reserved double1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedDouble1")]
        public double? ReservedDouble1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved double2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedDouble2")]
        public double? ReservedDouble2 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString1")]
        public string ReservedString1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString2")]
        public string ReservedString2 { get; set; }

        /// <summary>
        /// Gets or sets the user expiration.
        /// </summary>
        [JsonProperty(PropertyName = "UserExpiration")]
        public System.DateTime? UserExpiration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PrimaryGroupID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PrimaryGroupID", 2147483647);
            }
            if (PrimaryGroupID < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PrimaryGroupID", 0);
            }
            if (FullName != null)
            {
                if (FullName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FullName", 255);
                }
                if (FullName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FullName", 0);
                }
            }
            if (ObjectCount > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ObjectCount", 2147483647);
            }
            if (ObjectCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ObjectCount", 0);
            }
            if (IPAddress != null)
            {
                if (IPAddress.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IPAddress", 255);
                }
                if (IPAddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IPAddress", 0);
                }
            }
            if (Address != null)
            {
                if (Address.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Address", 255);
                }
                if (Address.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Address", 0);
                }
            }
            if (ReservedString1 != null)
            {
                if (ReservedString1.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString1", 128);
                }
                if (ReservedString1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString1", 0);
                }
            }
            if (ReservedString2 != null)
            {
                if (ReservedString2.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString2", 128);
                }
                if (ReservedString2.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString2", 0);
                }
            }
        }
    }
}
