// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Entity template update class.
    /// </summary>
    public partial class UpdateEntityDefinitionRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// UpdateEntityDefinitionRequestModel class.
        /// </summary>
        public UpdateEntityDefinitionRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// UpdateEntityDefinitionRequestModel class.
        /// </summary>
        /// <param name="category">Gets or sets the category of
        /// template.</param>
        /// <param name="name">Gets or sets the name of templates.</param>
        /// <param name="smallImage">Gets or sets the small image.</param>
        /// <param name="largeImage">Gets or sets the large image.</param>
        /// <param name="hasAudit">Gets or sets if the template has auditing
        /// enabled.</param>
        /// <param name="allowsViewImages">Gets or sets if the template allows
        /// viewing images.</param>
        /// <param name="isReviewState">Gets or sets if the entity is created
        /// in a review state.</param>
        /// <param name="profiles">Gets or sets the profiles.</param>
        public UpdateEntityDefinitionRequestModel(string category = default(string), string name = default(string), string smallImage = default(string), string largeImage = default(string), bool? hasAudit = default(bool?), bool? allowsViewImages = default(bool?), bool? isReviewState = default(bool?), IList<ProfileDefinitionModel> profiles = default(IList<ProfileDefinitionModel>))
        {
            Category = category;
            Name = name;
            SmallImage = smallImage;
            LargeImage = largeImage;
            HasAudit = hasAudit;
            AllowsViewImages = allowsViewImages;
            IsReviewState = isReviewState;
            Profiles = profiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the category of template.
        /// </summary>
        [JsonProperty(PropertyName = "Category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the name of templates.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the small image.
        /// </summary>
        [JsonProperty(PropertyName = "SmallImage")]
        public string SmallImage { get; set; }

        /// <summary>
        /// Gets or sets the large image.
        /// </summary>
        [JsonProperty(PropertyName = "LargeImage")]
        public string LargeImage { get; set; }

        /// <summary>
        /// Gets or sets if the template has auditing enabled.
        /// </summary>
        [JsonProperty(PropertyName = "HasAudit")]
        public bool? HasAudit { get; set; }

        /// <summary>
        /// Gets or sets if the template allows viewing images.
        /// </summary>
        [JsonProperty(PropertyName = "AllowsViewImages")]
        public bool? AllowsViewImages { get; set; }

        /// <summary>
        /// Gets or sets if the entity is created in a review state.
        /// </summary>
        [JsonProperty(PropertyName = "IsReviewState")]
        public bool? IsReviewState { get; set; }

        /// <summary>
        /// Gets or sets the profiles.
        /// </summary>
        [JsonProperty(PropertyName = "Profiles")]
        public IList<ProfileDefinitionModel> Profiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Category != null)
            {
                if (Category.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Category", 255);
                }
                if (Category.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Category", 0);
                }
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (SmallImage != null)
            {
                if (SmallImage.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SmallImage", 255);
                }
                if (SmallImage.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SmallImage", 0);
                }
            }
            if (LargeImage != null)
            {
                if (LargeImage.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "LargeImage", 255);
                }
                if (LargeImage.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "LargeImage", 0);
                }
            }
            if (Profiles != null)
            {
                foreach (var element in Profiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
