// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Model for entity templates
    /// </summary>
    public partial class EntityDefinitionModel
    {
        /// <summary>
        /// Initializes a new instance of the EntityDefinitionModel class.
        /// </summary>
        public EntityDefinitionModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EntityDefinitionModel class.
        /// </summary>
        /// <param name="type">Gets or sets the type of template.</param>
        /// <param name="category">Gets or sets the category of
        /// template.</param>
        /// <param name="name">Gets or sets the name of template.</param>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="creationTime">Gets or sets the creation time.</param>
        /// <param name="modificationTime">Gets or sets the modification
        /// time.</param>
        /// <param name="hasClass">Gets or sets if the template has
        /// classes.</param>
        /// <param name="hasSecurity">Gets or sets if the template has
        /// security.</param>
        /// <param name="hasProfiles">Gets or sets if the template has
        /// profiles.</param>
        /// <param name="hasItems">Gets or sets the has items.</param>
        /// <param name="smallImage">Gets or sets the small image.</param>
        /// <param name="largeImage">Gets or sets the large image.</param>
        /// <param name="hasAudit">Gets or sets if the template has auditing
        /// enabled.</param>
        /// <param name="allowsViewImages">Gets or sets if the template allows
        /// viewing images.</param>
        /// <param name="isReviewState">Gets or sets if the entity is created
        /// in a review state.</param>
        /// <param name="reservedString1">Gets or sets the reserved
        /// string1.</param>
        /// <param name="reservedString2">Gets or sets the reserved
        /// string2.</param>
        /// <param name="reservedInt1">Gets or sets the reserved int1.</param>
        /// <param name="reservedInt2">Gets or sets the reserved int2.</param>
        /// <param name="drawers">Gets or sets the drawers.</param>
        /// <param name="profiles">Gets or sets the profiles.</param>
        public EntityDefinitionModel(int type, string category, string name, string id = default(string), System.DateTime? creationTime = default(System.DateTime?), System.DateTime? modificationTime = default(System.DateTime?), bool? hasClass = default(bool?), bool? hasSecurity = default(bool?), bool? hasProfiles = default(bool?), bool? hasItems = default(bool?), string smallImage = default(string), string largeImage = default(string), bool? hasAudit = default(bool?), bool? allowsViewImages = default(bool?), bool? isReviewState = default(bool?), string reservedString1 = default(string), string reservedString2 = default(string), int? reservedInt1 = default(int?), int? reservedInt2 = default(int?), IList<int?> drawers = default(IList<int?>), IList<ProfileDefinitionModel> profiles = default(IList<ProfileDefinitionModel>))
        {
            ID = id;
            CreationTime = creationTime;
            ModificationTime = modificationTime;
            Type = type;
            Category = category;
            Name = name;
            HasClass = hasClass;
            HasSecurity = hasSecurity;
            HasProfiles = hasProfiles;
            HasItems = hasItems;
            SmallImage = smallImage;
            LargeImage = largeImage;
            HasAudit = hasAudit;
            AllowsViewImages = allowsViewImages;
            IsReviewState = isReviewState;
            ReservedString1 = reservedString1;
            ReservedString2 = reservedString2;
            ReservedInt1 = reservedInt1;
            ReservedInt2 = reservedInt2;
            Drawers = drawers;
            Profiles = profiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public string ID { get; set; }

        /// <summary>
        /// Gets or sets the creation time.
        /// </summary>
        [JsonProperty(PropertyName = "CreationTime")]
        public System.DateTime? CreationTime { get; set; }

        /// <summary>
        /// Gets or sets the modification time.
        /// </summary>
        [JsonProperty(PropertyName = "ModificationTime")]
        public System.DateTime? ModificationTime { get; set; }

        /// <summary>
        /// Gets or sets the type of template.
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public int Type { get; set; }

        /// <summary>
        /// Gets or sets the category of template.
        /// </summary>
        [JsonProperty(PropertyName = "Category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the name of template.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets if the template has classes.
        /// </summary>
        [JsonProperty(PropertyName = "HasClass")]
        public bool? HasClass { get; set; }

        /// <summary>
        /// Gets or sets if the template has security.
        /// </summary>
        [JsonProperty(PropertyName = "HasSecurity")]
        public bool? HasSecurity { get; set; }

        /// <summary>
        /// Gets or sets if the template has profiles.
        /// </summary>
        [JsonProperty(PropertyName = "HasProfiles")]
        public bool? HasProfiles { get; set; }

        /// <summary>
        /// Gets or sets the has items.
        /// </summary>
        [JsonProperty(PropertyName = "HasItems")]
        public bool? HasItems { get; set; }

        /// <summary>
        /// Gets or sets the small image.
        /// </summary>
        [JsonProperty(PropertyName = "SmallImage")]
        public string SmallImage { get; set; }

        /// <summary>
        /// Gets or sets the large image.
        /// </summary>
        [JsonProperty(PropertyName = "LargeImage")]
        public string LargeImage { get; set; }

        /// <summary>
        /// Gets or sets if the template has auditing enabled.
        /// </summary>
        [JsonProperty(PropertyName = "HasAudit")]
        public bool? HasAudit { get; set; }

        /// <summary>
        /// Gets or sets if the template allows viewing images.
        /// </summary>
        [JsonProperty(PropertyName = "AllowsViewImages")]
        public bool? AllowsViewImages { get; set; }

        /// <summary>
        /// Gets or sets if the entity is created in a review state.
        /// </summary>
        [JsonProperty(PropertyName = "IsReviewState")]
        public bool? IsReviewState { get; set; }

        /// <summary>
        /// Gets or sets the reserved string1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString1")]
        public string ReservedString1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString2")]
        public string ReservedString2 { get; set; }

        /// <summary>
        /// Gets or sets the reserved int1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt1")]
        public int? ReservedInt1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved int2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt2")]
        public int? ReservedInt2 { get; set; }

        /// <summary>
        /// Gets or sets the drawers.
        /// </summary>
        [JsonProperty(PropertyName = "Drawers")]
        public IList<int?> Drawers { get; set; }

        /// <summary>
        /// Gets or sets the profiles.
        /// </summary>
        [JsonProperty(PropertyName = "Profiles")]
        public IList<ProfileDefinitionModel> Profiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Category == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Category");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Type > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Type", 2147483647);
            }
            if (Type < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Type", 1);
            }
            if (Category != null)
            {
                if (Category.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Category", 255);
                }
                if (Category.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Category", 0);
                }
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (SmallImage != null)
            {
                if (SmallImage.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SmallImage", 255);
                }
                if (SmallImage.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SmallImage", 0);
                }
            }
            if (LargeImage != null)
            {
                if (LargeImage.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "LargeImage", 255);
                }
                if (LargeImage.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "LargeImage", 0);
                }
            }
            if (ReservedString1 != null)
            {
                if (ReservedString1.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString1", 255);
                }
                if (ReservedString1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString1", 0);
                }
            }
            if (ReservedString2 != null)
            {
                if (ReservedString2.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString2", 255);
                }
                if (ReservedString2.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString2", 0);
                }
            }
            if (Profiles != null)
            {
                foreach (var element in Profiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
