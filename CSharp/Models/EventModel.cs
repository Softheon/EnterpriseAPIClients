// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model that is sent in response to a GET request for Event
    /// </summary>
    public partial class EventModel
    {
        /// <summary>
        /// Initializes a new instance of the EventModel class.
        /// </summary>
        public EventModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventModel class.
        /// </summary>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="drawerID">Gets or sets the drawer identifier.</param>
        /// <param name="entityID">Gets or sets the entity identifier.</param>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'Undefined', 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC',
        /// 'SQL', 'DDE'</param>
        /// <param name="eventTime">Gets or sets the event time.</param>
        /// <param name="eventUserID">Gets or sets the event user
        /// identifier.</param>
        /// <param name="eventUserFullName">Gets or sets the full name of the
        /// event user.</param>
        /// <param name="eventGroupID">Gets or sets the event group
        /// identifier.</param>
        /// <param name="eventGroupName">Gets or sets the name of the event
        /// group.</param>
        /// <param name="category">Gets or sets the category. Possible values
        /// include: 'Undefined', 'Entity', 'Profile', 'Attachment',
        /// 'Discussion', 'Field', 'Workflow'</param>
        /// <param name="classProperty">Gets or sets the class. Possible values
        /// include: 'Undefined', 'Application', 'Security', 'System'</param>
        /// <param name="operation">Gets or sets the operation. Possible values
        /// include: 'Undefined', 'Insert', 'Update', 'Delete', 'Copy', 'Lock',
        /// 'Unlock', 'Open', 'Close', 'Checkout', 'Checkin', 'View', 'Merge',
        /// 'Split', 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
        /// 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route',
        /// 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback',
        /// 'Archive'</param>
        /// <param name="source">Gets or sets the source.</param>
        /// <param name="computer">Gets or sets the computer.</param>
        /// <param name="iPAddress">Gets or sets the ip address.</param>
        /// <param name="description">Gets or sets the description.</param>
        /// <param name="processTime">Gets or sets the process time.</param>
        /// <param name="details">Gets or sets the details.</param>
        public EventModel(int? id = default(int?), int? drawerID = default(int?), int? entityID = default(int?), string type = default(string), System.DateTime? eventTime = default(System.DateTime?), int? eventUserID = default(int?), string eventUserFullName = default(string), int? eventGroupID = default(int?), string eventGroupName = default(string), string category = default(string), string classProperty = default(string), string operation = default(string), string source = default(string), string computer = default(string), string iPAddress = default(string), string description = default(string), int? processTime = default(int?), object details = default(object))
        {
            ID = id;
            DrawerID = drawerID;
            EntityID = entityID;
            Type = type;
            EventTime = eventTime;
            EventUserID = eventUserID;
            EventUserFullName = eventUserFullName;
            EventGroupID = eventGroupID;
            EventGroupName = eventGroupName;
            Category = category;
            ClassProperty = classProperty;
            Operation = operation;
            Source = source;
            Computer = computer;
            IPAddress = iPAddress;
            Description = description;
            ProcessTime = processTime;
            Details = details;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or sets the drawer identifier.
        /// </summary>
        [JsonProperty(PropertyName = "DrawerID")]
        public int? DrawerID { get; set; }

        /// <summary>
        /// Gets or sets the entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EntityID")]
        public int? EntityID { get; set; }

        /// <summary>
        /// Gets or sets the type. Possible values include: 'Undefined',
        /// 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the event time.
        /// </summary>
        [JsonProperty(PropertyName = "EventTime")]
        public System.DateTime? EventTime { get; set; }

        /// <summary>
        /// Gets or sets the event user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EventUserID")]
        public int? EventUserID { get; set; }

        /// <summary>
        /// Gets or sets the full name of the event user.
        /// </summary>
        [JsonProperty(PropertyName = "EventUserFullName")]
        public string EventUserFullName { get; set; }

        /// <summary>
        /// Gets or sets the event group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EventGroupID")]
        public int? EventGroupID { get; set; }

        /// <summary>
        /// Gets or sets the name of the event group.
        /// </summary>
        [JsonProperty(PropertyName = "EventGroupName")]
        public string EventGroupName { get; set; }

        /// <summary>
        /// Gets or sets the category. Possible values include: 'Undefined',
        /// 'Entity', 'Profile', 'Attachment', 'Discussion', 'Field',
        /// 'Workflow'
        /// </summary>
        [JsonProperty(PropertyName = "Category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the class. Possible values include: 'Undefined',
        /// 'Application', 'Security', 'System'
        /// </summary>
        [JsonProperty(PropertyName = "Class")]
        public string ClassProperty { get; set; }

        /// <summary>
        /// Gets or sets the operation. Possible values include: 'Undefined',
        /// 'Insert', 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open',
        /// 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split',
        /// 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
        /// 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route',
        /// 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback',
        /// 'Archive'
        /// </summary>
        [JsonProperty(PropertyName = "Operation")]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or sets the source.
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the computer.
        /// </summary>
        [JsonProperty(PropertyName = "Computer")]
        public string Computer { get; set; }

        /// <summary>
        /// Gets or sets the ip address.
        /// </summary>
        [JsonProperty(PropertyName = "IPAddress")]
        public string IPAddress { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the process time.
        /// </summary>
        [JsonProperty(PropertyName = "ProcessTime")]
        public int? ProcessTime { get; set; }

        /// <summary>
        /// Gets or sets the details.
        /// </summary>
        [JsonProperty(PropertyName = "Details")]
        public object Details { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EntityID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "EntityID", 2147483647);
            }
            if (EntityID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EntityID", 1);
            }
            if (Source != null)
            {
                if (Source.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Source", 255);
                }
                if (Source.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Source", 0);
                }
            }
            if (Computer != null)
            {
                if (Computer.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Computer", 255);
                }
                if (Computer.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Computer", 0);
                }
            }
            if (IPAddress != null)
            {
                if (IPAddress.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IPAddress", 255);
                }
                if (IPAddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IPAddress", 0);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 255);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
        }
    }
}
