// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Model for the GET Workflow input parameters
    /// </summary>
    public partial class GetWorkflowModel
    {
        /// <summary>
        /// Initializes a new instance of the GetWorkflowModel class.
        /// </summary>
        public GetWorkflowModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetWorkflowModel class.
        /// </summary>
        /// <param name="applicationID">Gets or sets the application
        /// identifier.</param>
        /// <param name="entityType">Gets or sets the type of the
        /// entity.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="page">Gets or sets the page number.</param>
        /// <param name="pageSize">Gets or sets the size of the page.</param>
        /// <param name="sortOrder">Gets or sets the order. Possible values
        /// include: 'Unspecified', 'Ascending', 'Descending'</param>
        /// <param name="sortBy">Gets or sets the column to order by.</param>
        public GetWorkflowModel(int? applicationID = default(int?), int? entityType = default(int?), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?))
        {
            ApplicationID = applicationID;
            EntityType = entityType;
            Name = name;
            Page = page;
            PageSize = pageSize;
            SortOrder = sortOrder;
            SortBy = sortBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the application identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ApplicationID")]
        public int? ApplicationID { get; set; }

        /// <summary>
        /// Gets or sets the type of the entity.
        /// </summary>
        [JsonProperty(PropertyName = "EntityType")]
        public int? EntityType { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the page number.
        /// </summary>
        [JsonProperty(PropertyName = "Page")]
        public int? Page { get; set; }

        /// <summary>
        /// Gets or sets the size of the page.
        /// </summary>
        [JsonProperty(PropertyName = "PageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </summary>
        [JsonProperty(PropertyName = "SortOrder")]
        public string SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the column to order by.
        /// </summary>
        [JsonProperty(PropertyName = "SortBy")]
        public int? SortBy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ApplicationID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ApplicationID", 2147483647);
            }
            if (ApplicationID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ApplicationID", 1);
            }
            if (EntityType > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "EntityType", 2147483647);
            }
            if (EntityType < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EntityType", 1);
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (Page > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Page", 2147483647);
            }
            if (Page < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Page", 1);
            }
            if (PageSize > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageSize", 1000);
            }
            if (PageSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageSize", 1);
            }
        }
    }
}
