// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Model for the GET User input parameters
    /// </summary>
    public partial class GetUserRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the GetUserRequestModel class.
        /// </summary>
        public GetUserRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetUserRequestModel class.
        /// </summary>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="primaryGroupID">Gets or sets the primary group
        /// identifier.</param>
        /// <param name="groupID">Gets or sets the group identifier.</param>
        /// <param name="groupName">Gets or sets the name of the group.</param>
        /// <param name="username">Gets or sets the username.</param>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'ImageDesk', 'PublishDesk', 'FaxDesk', 'CaptureDesk',
        /// 'RecognitionDesk', 'PortalUser', 'AdminDesk', 'WorkflowDesk',
        /// 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk',
        /// 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Active', 'Inactive'</param>
        /// <param name="fullName">Gets or sets the full name.</param>
        /// <param name="page">Gets or sets the page number.</param>
        /// <param name="pageSize">Gets or sets the size of the page.</param>
        /// <param name="sortOrder">Gets or sets the order. Possible values
        /// include: 'Unspecified', 'Ascending', 'Descending'</param>
        /// <param name="sortBy">Gets or sets the column to order by. Possible
        /// values include: 'ID', 'PrimaryGroupID', 'Username', 'UserFullName',
        /// 'Type', 'State'</param>
        public GetUserRequestModel(int? id = default(int?), int? primaryGroupID = default(int?), int? groupID = default(int?), string groupName = default(string), string username = default(string), string type = default(string), string state = default(string), string fullName = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
        {
            ID = id;
            PrimaryGroupID = primaryGroupID;
            GroupID = groupID;
            GroupName = groupName;
            Username = username;
            Type = type;
            State = state;
            FullName = fullName;
            Page = page;
            PageSize = pageSize;
            SortOrder = sortOrder;
            SortBy = sortBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or sets the primary group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "PrimaryGroupID")]
        public int? PrimaryGroupID { get; set; }

        /// <summary>
        /// Gets or sets the group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "GroupID")]
        public int? GroupID { get; set; }

        /// <summary>
        /// Gets or sets the name of the group.
        /// </summary>
        [JsonProperty(PropertyName = "GroupName")]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        [JsonProperty(PropertyName = "Username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the type. Possible values include: 'ImageDesk',
        /// 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
        /// 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark',
        /// 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
        /// 'DocumentDesk', 'Poweruser'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Active',
        /// 'Inactive'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the full name.
        /// </summary>
        [JsonProperty(PropertyName = "FullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or sets the page number.
        /// </summary>
        [JsonProperty(PropertyName = "Page")]
        public int? Page { get; set; }

        /// <summary>
        /// Gets or sets the size of the page.
        /// </summary>
        [JsonProperty(PropertyName = "PageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </summary>
        [JsonProperty(PropertyName = "SortOrder")]
        public string SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
        /// </summary>
        [JsonProperty(PropertyName = "SortBy")]
        public string SortBy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Page > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Page", 2147483647);
            }
            if (Page < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Page", 1);
            }
            if (PageSize > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageSize", 1000);
            }
            if (PageSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageSize", 1);
            }
        }
    }
}
