// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model for PUT EntityLink input parameters.
    /// </summary>
    public partial class UpdateEntityLinkRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the UpdateEntityLinkRequestModel
        /// class.
        /// </summary>
        public UpdateEntityLinkRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateEntityLinkRequestModel
        /// class.
        /// </summary>
        /// <param name="virtualName">Gets or sets the name of the
        /// virtual.</param>
        /// <param name="classProperty">Gets or sets the class.</param>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="acl">Gets or sets the acl.</param>
        /// <param name="pageNumber">Gets or sets the page number.</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Undefined', 'MaxStates', 'Reserved', 'UserDefined',
        /// 'Dynamic', 'Static', 'New', 'CheckedOut', 'Internal', 'Statres5',
        /// 'Linked', 'Statres4', 'Statres3', 'Statres2', 'Statres1', 'Locked',
        /// 'OnServerCache', 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3',
        /// 'Dynres2', 'Dynres1', 'User1', 'User2', 'User3', 'User4', 'User5',
        /// 'User6', 'User7', 'User8', 'User9', 'User10', 'User11', 'User12',
        /// 'User13', 'User14', 'User15', 'User16'</param>
        /// <param name="note">Gets or sets the note.</param>
        public UpdateEntityLinkRequestModel(string virtualName = default(string), int? classProperty = default(int?), string name = default(string), int? acl = default(int?), int? pageNumber = default(int?), string state = default(string), string note = default(string))
        {
            VirtualName = virtualName;
            ClassProperty = classProperty;
            Name = name;
            Acl = acl;
            PageNumber = pageNumber;
            State = state;
            Note = note;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the virtual.
        /// </summary>
        [JsonProperty(PropertyName = "VirtualName")]
        public string VirtualName { get; set; }

        /// <summary>
        /// Gets or sets the class.
        /// </summary>
        [JsonProperty(PropertyName = "Class")]
        public int? ClassProperty { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the acl.
        /// </summary>
        [JsonProperty(PropertyName = "Acl")]
        public int? Acl { get; set; }

        /// <summary>
        /// Gets or sets the page number.
        /// </summary>
        [JsonProperty(PropertyName = "PageNumber")]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Undefined',
        /// 'MaxStates', 'Reserved', 'UserDefined', 'Dynamic', 'Static', 'New',
        /// 'CheckedOut', 'Internal', 'Statres5', 'Linked', 'Statres4',
        /// 'Statres3', 'Statres2', 'Statres1', 'Locked', 'OnServerCache',
        /// 'OnClientCache', 'Fetching', 'Dynres4', 'Dynres3', 'Dynres2',
        /// 'Dynres1', 'User1', 'User2', 'User3', 'User4', 'User5', 'User6',
        /// 'User7', 'User8', 'User9', 'User10', 'User11', 'User12', 'User13',
        /// 'User14', 'User15', 'User16'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the note.
        /// </summary>
        [JsonProperty(PropertyName = "Note")]
        public string Note { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VirtualName != null)
            {
                if (VirtualName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "VirtualName", 255);
                }
                if (VirtualName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "VirtualName", 0);
                }
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (PageNumber > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageNumber", 2147483647);
            }
            if (PageNumber < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageNumber", 0);
            }
            if (Note != null)
            {
                if (Note.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Note", 255);
                }
                if (Note.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Note", 0);
                }
            }
        }
    }
}
