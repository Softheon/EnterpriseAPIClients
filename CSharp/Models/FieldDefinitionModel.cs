// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Model for Template Fields
    /// </summary>
    public partial class FieldDefinitionModel
    {
        /// <summary>
        /// Initializes a new instance of the FieldDefinitionModel class.
        /// </summary>
        public FieldDefinitionModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FieldDefinitionModel class.
        /// </summary>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'Undefined', 'String', 'Integer', 'Double', 'DateTime',
        /// 'Paragraph', 'CheckBox', 'RadioButton', 'ComboBox', 'ListBox',
        /// 'Table', 'LargeText', 'ComboString'</param>
        /// <param name="index">Gets or sets the index.</param>
        /// <param name="position">Gets or sets the position.</param>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="xmlTag">Gets or sets the XML tag.</param>
        /// <param name="note">Gets or sets the note.</param>
        /// <param name="isEnabled">Gets or sets a value indicating whether
        /// this instance is enabled.</param>
        /// <param name="isRequired">Gets or sets a value indicating whether
        /// this instance is required. Possible values include: 'NotRequired',
        /// 'Always', 'OnAccept'</param>
        /// <param name="isProtected">Gets or sets a value indicating whether
        /// this instance is protected.</param>
        /// <param name="defaultProperty">Gets or sets the default
        /// value.</param>
        /// <param name="mask">Gets or sets the mask.</param>
        /// <param name="length">Gets or sets the length.</param>
        /// <param name="isMultiline">Gets or sets a value indicating whether
        /// this instance is multiline.</param>
        /// <param name="format">Gets or sets the format.</param>
        /// <param name="isSorted">Gets or sets a value indicating whether this
        /// instance is sorted.</param>
        /// <param name="select">Gets or sets the select.</param>
        /// <param name="formula">Gets or sets the formula.</param>
        /// <param name="hasValidation">Gets or sets a value indicating whether
        /// this instance has validation.</param>
        /// <param name="validationColumn">Gets or sets the validation
        /// column.</param>
        /// <param name="foundOperation">Gets or sets the found
        /// operation.</param>
        /// <param name="notFoundOperation">Gets or sets the not found
        /// operation.</param>
        /// <param name="sampleImage">Gets or sets the sample image.</param>
        /// <param name="lookup">Gets or sets the lookup.</param>
        /// <param name="hasLink">Gets or sets a value indicating whether this
        /// instance has linking enabled.</param>
        /// <param name="linkEntityType">Gets or sets the type of the link
        /// entity.</param>
        /// <param name="linkProfile">Gets or sets the link profile.</param>
        /// <param name="linkField">Gets or sets the link field.</param>
        /// <param name="reservedString1">Gets or sets the reserved
        /// string1.</param>
        /// <param name="reservedString2">Gets or sets the reserved
        /// string2.</param>
        /// <param name="reservedInt1">Gets or sets the reserved int1.</param>
        /// <param name="reservedInt2">Gets or sets the reserved int2.</param>
        /// <param name="reservedBit1">Gets or sets a value indicating whether
        /// [reserved bit1].</param>
        /// <param name="reservedBit2">Gets or sets a value indicating whether
        /// [reserved bit2].</param>
        /// <param name="items">Gets or sets the template items.</param>
        /// <param name="fields">Gets or sets the fields.</param>
        public FieldDefinitionModel(string name, string type, int index, int position, string id = default(string), string xmlTag = default(string), string note = default(string), bool? isEnabled = default(bool?), string isRequired = default(string), bool? isProtected = default(bool?), string defaultProperty = default(string), string mask = default(string), int? length = default(int?), bool? isMultiline = default(bool?), string format = default(string), bool? isSorted = default(bool?), int? select = default(int?), string formula = default(string), bool? hasValidation = default(bool?), string validationColumn = default(string), int? foundOperation = default(int?), int? notFoundOperation = default(int?), int? sampleImage = default(int?), string lookup = default(string), bool? hasLink = default(bool?), int? linkEntityType = default(int?), string linkProfile = default(string), string linkField = default(string), string reservedString1 = default(string), string reservedString2 = default(string), int? reservedInt1 = default(int?), int? reservedInt2 = default(int?), bool? reservedBit1 = default(bool?), bool? reservedBit2 = default(bool?), IList<ItemDefinitionModel> items = default(IList<ItemDefinitionModel>), IList<FieldDefinitionModel> fields = default(IList<FieldDefinitionModel>))
        {
            ID = id;
            Name = name;
            XmlTag = xmlTag;
            Type = type;
            Index = index;
            Position = position;
            Note = note;
            IsEnabled = isEnabled;
            IsRequired = isRequired;
            IsProtected = isProtected;
            DefaultProperty = defaultProperty;
            Mask = mask;
            Length = length;
            IsMultiline = isMultiline;
            Format = format;
            IsSorted = isSorted;
            Select = select;
            Formula = formula;
            HasValidation = hasValidation;
            ValidationColumn = validationColumn;
            FoundOperation = foundOperation;
            NotFoundOperation = notFoundOperation;
            SampleImage = sampleImage;
            Lookup = lookup;
            HasLink = hasLink;
            LinkEntityType = linkEntityType;
            LinkProfile = linkProfile;
            LinkField = linkField;
            ReservedString1 = reservedString1;
            ReservedString2 = reservedString2;
            ReservedInt1 = reservedInt1;
            ReservedInt2 = reservedInt2;
            ReservedBit1 = reservedBit1;
            ReservedBit2 = reservedBit2;
            Items = items;
            Fields = fields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public string ID { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the XML tag.
        /// </summary>
        [JsonProperty(PropertyName = "XmlTag")]
        public string XmlTag { get; set; }

        /// <summary>
        /// Gets or sets the type. Possible values include: 'Undefined',
        /// 'String', 'Integer', 'Double', 'DateTime', 'Paragraph', 'CheckBox',
        /// 'RadioButton', 'ComboBox', 'ListBox', 'Table', 'LargeText',
        /// 'ComboString'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        [JsonProperty(PropertyName = "Index")]
        public int Index { get; set; }

        /// <summary>
        /// Gets or sets the position.
        /// </summary>
        [JsonProperty(PropertyName = "Position")]
        public int Position { get; set; }

        /// <summary>
        /// Gets or sets the note.
        /// </summary>
        [JsonProperty(PropertyName = "Note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "IsEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is required.
        /// Possible values include: 'NotRequired', 'Always', 'OnAccept'
        /// </summary>
        [JsonProperty(PropertyName = "IsRequired")]
        public string IsRequired { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is protected.
        /// </summary>
        [JsonProperty(PropertyName = "IsProtected")]
        public bool? IsProtected { get; set; }

        /// <summary>
        /// Gets or sets the default value.
        /// </summary>
        [JsonProperty(PropertyName = "Default")]
        public string DefaultProperty { get; set; }

        /// <summary>
        /// Gets or sets the mask.
        /// </summary>
        [JsonProperty(PropertyName = "Mask")]
        public string Mask { get; set; }

        /// <summary>
        /// Gets or sets the length.
        /// </summary>
        [JsonProperty(PropertyName = "Length")]
        public int? Length { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is multiline.
        /// </summary>
        [JsonProperty(PropertyName = "IsMultiline")]
        public bool? IsMultiline { get; set; }

        /// <summary>
        /// Gets or sets the format.
        /// </summary>
        [JsonProperty(PropertyName = "Format")]
        public string Format { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is sorted.
        /// </summary>
        [JsonProperty(PropertyName = "IsSorted")]
        public bool? IsSorted { get; set; }

        /// <summary>
        /// Gets or sets the select.
        /// </summary>
        [JsonProperty(PropertyName = "Select")]
        public int? Select { get; set; }

        /// <summary>
        /// Gets or sets the formula.
        /// </summary>
        [JsonProperty(PropertyName = "Formula")]
        public string Formula { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has
        /// validation.
        /// </summary>
        [JsonProperty(PropertyName = "HasValidation")]
        public bool? HasValidation { get; set; }

        /// <summary>
        /// Gets or sets the validation column.
        /// </summary>
        [JsonProperty(PropertyName = "ValidationColumn")]
        public string ValidationColumn { get; set; }

        /// <summary>
        /// Gets or sets the found operation.
        /// </summary>
        [JsonProperty(PropertyName = "FoundOperation")]
        public int? FoundOperation { get; set; }

        /// <summary>
        /// Gets or sets the not found operation.
        /// </summary>
        [JsonProperty(PropertyName = "NotFoundOperation")]
        public int? NotFoundOperation { get; set; }

        /// <summary>
        /// Gets or sets the sample image.
        /// </summary>
        [JsonProperty(PropertyName = "SampleImage")]
        public int? SampleImage { get; set; }

        /// <summary>
        /// Gets or sets the lookup.
        /// </summary>
        [JsonProperty(PropertyName = "Lookup")]
        public string Lookup { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has linking
        /// enabled.
        /// </summary>
        [JsonProperty(PropertyName = "HasLink")]
        public bool? HasLink { get; set; }

        /// <summary>
        /// Gets or sets the type of the link entity.
        /// </summary>
        [JsonProperty(PropertyName = "LinkEntityType")]
        public int? LinkEntityType { get; set; }

        /// <summary>
        /// Gets or sets the link profile.
        /// </summary>
        [JsonProperty(PropertyName = "LinkProfile")]
        public string LinkProfile { get; set; }

        /// <summary>
        /// Gets or sets the link field.
        /// </summary>
        [JsonProperty(PropertyName = "LinkField")]
        public string LinkField { get; set; }

        /// <summary>
        /// Gets or sets the reserved string1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString1")]
        public string ReservedString1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString2")]
        public string ReservedString2 { get; set; }

        /// <summary>
        /// Gets or sets the reserved int1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt1")]
        public int? ReservedInt1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved int2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt2")]
        public int? ReservedInt2 { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [reserved bit1].
        /// </summary>
        [JsonProperty(PropertyName = "ReservedBit1")]
        public bool? ReservedBit1 { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [reserved bit2].
        /// </summary>
        [JsonProperty(PropertyName = "ReservedBit2")]
        public bool? ReservedBit2 { get; set; }

        /// <summary>
        /// Gets or sets the template items.
        /// </summary>
        [JsonProperty(PropertyName = "Items")]
        public IList<ItemDefinitionModel> Items { get; set; }

        /// <summary>
        /// Gets or sets the fields.
        /// </summary>
        [JsonProperty(PropertyName = "Fields")]
        public IList<FieldDefinitionModel> Fields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Index > 32)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Index", 32);
            }
            if (Index < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Index", 0);
            }
            if (Position > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Position", 2147483647);
            }
            if (Position < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Position", 0);
            }
            if (Items != null)
            {
                foreach (var element in Items)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Fields != null)
            {
                foreach (var element1 in Fields)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
