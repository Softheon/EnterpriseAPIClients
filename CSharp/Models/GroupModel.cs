// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model that is sent in response to a GET request for Groups
    /// </summary>
    public partial class GroupModel
    {
        /// <summary>
        /// Initializes a new instance of the GroupModel class.
        /// </summary>
        public GroupModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GroupModel class.
        /// </summary>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="id">Gets or sets the group identifier.</param>
        /// <param name="queueCount">Gets or sets the queue count.</param>
        /// <param name="userCount">Gets or sets the user count.</param>
        /// <param name="userID">Gets or sets the user identifier.</param>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'Generic', 'Access', 'Role'</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Inactive', 'Active'</param>
        /// <param name="reservedInt1">Gets or sets the reserved int1.</param>
        /// <param name="reservedInt2">Gets or sets the reserved int2.</param>
        /// <param name="reservedString1">Gets or sets the reserved
        /// string1.</param>
        /// <param name="reservedString2">Gets or sets the reserved
        /// string2.</param>
        public GroupModel(string name, int? id = default(int?), int? queueCount = default(int?), int? userCount = default(int?), int? userID = default(int?), string type = default(string), string state = default(string), int? reservedInt1 = default(int?), int? reservedInt2 = default(int?), string reservedString1 = default(string), string reservedString2 = default(string))
        {
            ID = id;
            QueueCount = queueCount;
            UserCount = userCount;
            UserID = userID;
            Name = name;
            Type = type;
            State = state;
            ReservedInt1 = reservedInt1;
            ReservedInt2 = reservedInt2;
            ReservedString1 = reservedString1;
            ReservedString2 = reservedString2;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or sets the queue count.
        /// </summary>
        [JsonProperty(PropertyName = "QueueCount")]
        public int? QueueCount { get; set; }

        /// <summary>
        /// Gets or sets the user count.
        /// </summary>
        [JsonProperty(PropertyName = "UserCount")]
        public int? UserCount { get; set; }

        /// <summary>
        /// Gets or sets the user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "UserID")]
        public int? UserID { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the type. Possible values include: 'Generic',
        /// 'Access', 'Role'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Inactive',
        /// 'Active'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the reserved int1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt1")]
        public int? ReservedInt1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved int2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt2")]
        public int? ReservedInt2 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString1")]
        public string ReservedString1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString2")]
        public string ReservedString2 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (ReservedString1 != null)
            {
                if (ReservedString1.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString1", 255);
                }
                if (ReservedString1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString1", 0);
                }
            }
            if (ReservedString2 != null)
            {
                if (ReservedString2.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString2", 255);
                }
                if (ReservedString2.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString2", 0);
                }
            }
        }
    }
}
