// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Insert Entity Model.
    /// </summary>
    public partial class InsertEntityRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the InsertEntityRequestModel class.
        /// </summary>
        public InsertEntityRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InsertEntityRequestModel class.
        /// </summary>
        /// <param name="name">Gets or sets the Name.</param>
        /// <param name="profiles">Gets or sets the profiles.</param>
        /// <param name="acl">Gets or sets the access control list.</param>
        /// <param name="type">Gets or sets the type.</param>
        public InsertEntityRequestModel(string name, IList<ProfileModel> profiles = default(IList<ProfileModel>), int? acl = default(int?), int? type = default(int?))
        {
            Profiles = profiles;
            Acl = acl;
            Type = type;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the profiles.
        /// </summary>
        [JsonProperty(PropertyName = "Profiles")]
        public IList<ProfileModel> Profiles { get; set; }

        /// <summary>
        /// Gets or sets the access control list.
        /// </summary>
        [JsonProperty(PropertyName = "Acl")]
        public int? Acl { get; set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Type > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Type", 2147483647);
            }
            if (Type < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Type", 1);
            }
        }
    }
}
