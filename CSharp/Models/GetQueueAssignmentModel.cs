// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the criteria to perform a query on assignments
    /// </summary>
    public partial class GetQueueAssignmentModel
    {
        /// <summary>
        /// Initializes a new instance of the GetQueueAssignmentModel class.
        /// </summary>
        public GetQueueAssignmentModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetQueueAssignmentModel class.
        /// </summary>
        /// <param name="queueID">Gets or sets the unique queue
        /// identifier.</param>
        /// <param name="userID">Gets or sets the user identifier.</param>
        /// <param name="groupID">Gets or sets the group identifier.</param>
        /// <param name="type">Gets or sets the queue assignment type. Possible
        /// values include: 'Unspecified', 'Primary', 'Secondary'</param>
        /// <param name="order">Gets or sets the sort order.</param>
        /// <param name="taskSortColumn">Gets or sets the task sort column.
        /// Possible values include: 'TaskID', 'QueueID', 'DrawerID',
        /// 'AddressID', 'ObjectID', 'ObjectType', 'State', 'Priority',
        /// 'Description', 'Message1', 'Message2', 'Message3', 'Message4',
        /// 'Message5', 'OwnerUserID', 'OwnerGroupID', 'EffectiveUserID',
        /// 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID',
        /// 'InsertionTime', 'ResolutionTime', 'TaskFileAttachment',
        /// 'ReservedInt1', 'ReservedString1'</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Unspecified', 'Inactive', 'Active'</param>
        /// <param name="fetchType">Gets or sets the type of the fetch.
        /// Possible values include: 'Unspecified', 'Manual', 'Push'</param>
        /// <param name="page">Gets or sets the page number.</param>
        /// <param name="pageSize">Gets or sets the size of the page.</param>
        /// <param name="sortOrder">Gets or sets the order. Possible values
        /// include: 'Unspecified', 'Ascending', 'Descending'</param>
        /// <param name="sortBy">Gets or sets the column to order by. Possible
        /// values include: 'QueueID', 'UserID', 'GroupID', 'Type', 'State',
        /// 'Order', 'FetchType'</param>
        public GetQueueAssignmentModel(int? queueID = default(int?), int? userID = default(int?), int? groupID = default(int?), string type = default(string), int? order = default(int?), string taskSortColumn = default(string), string state = default(string), string fetchType = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
        {
            QueueID = queueID;
            UserID = userID;
            GroupID = groupID;
            Type = type;
            Order = order;
            TaskSortColumn = taskSortColumn;
            State = state;
            FetchType = fetchType;
            Page = page;
            PageSize = pageSize;
            SortOrder = sortOrder;
            SortBy = sortBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique queue identifier.
        /// </summary>
        [JsonProperty(PropertyName = "QueueID")]
        public int? QueueID { get; set; }

        /// <summary>
        /// Gets or sets the user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "UserID")]
        public int? UserID { get; set; }

        /// <summary>
        /// Gets or sets the group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "GroupID")]
        public int? GroupID { get; set; }

        /// <summary>
        /// Gets or sets the queue assignment type. Possible values include:
        /// 'Unspecified', 'Primary', 'Secondary'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the sort order.
        /// </summary>
        [JsonProperty(PropertyName = "Order")]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or sets the task sort column. Possible values include:
        /// 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID',
        /// 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
        /// 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
        /// 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID',
        /// 'PreviousQueueID', 'NextQueueID', 'InsertionTime',
        /// 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1',
        /// 'ReservedString1'
        /// </summary>
        [JsonProperty(PropertyName = "TaskSortColumn")]
        public string TaskSortColumn { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Unspecified',
        /// 'Inactive', 'Active'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the type of the fetch. Possible values include:
        /// 'Unspecified', 'Manual', 'Push'
        /// </summary>
        [JsonProperty(PropertyName = "FetchType")]
        public string FetchType { get; set; }

        /// <summary>
        /// Gets or sets the page number.
        /// </summary>
        [JsonProperty(PropertyName = "Page")]
        public int? Page { get; set; }

        /// <summary>
        /// Gets or sets the size of the page.
        /// </summary>
        [JsonProperty(PropertyName = "PageSize")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </summary>
        [JsonProperty(PropertyName = "SortOrder")]
        public string SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the column to order by. Possible values include:
        /// 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order',
        /// 'FetchType'
        /// </summary>
        [JsonProperty(PropertyName = "SortBy")]
        public string SortBy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (QueueID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "QueueID", 2147483647);
            }
            if (QueueID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "QueueID", 1);
            }
            if (UserID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "UserID", 2147483647);
            }
            if (UserID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "UserID", 1);
            }
            if (GroupID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "GroupID", 2147483647);
            }
            if (GroupID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "GroupID", 1);
            }
            if (Order > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Order", 2147483647);
            }
            if (Order < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Order", 1);
            }
            if (Page > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Page", 2147483647);
            }
            if (Page < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Page", 1);
            }
            if (PageSize > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageSize", 1000);
            }
            if (PageSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageSize", 1);
            }
        }
    }
}
