// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model that is sent in response to a GET request for Locks
    /// </summary>
    public partial class LockModel
    {
        /// <summary>
        /// Initializes a new instance of the LockModel class.
        /// </summary>
        public LockModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LockModel class.
        /// </summary>
        /// <param name="entityID">Gets or sets the entity identifier.</param>
        /// <param name="sessionID">Gets or sets the user session
        /// identifier.</param>
        /// <param name="userID">Gets or sets the identifier of the user who
        /// inserted the entity lock.</param>
        /// <param name="userFullName">Gets or sets the full name of the user
        /// who inserted the lock.</param>
        /// <param name="lockTime">Gets or sets the time when the lock was
        /// placed on the entity.</param>
        /// <param name="expirationTime">Gets or sets the expiration time of
        /// the lock.</param>
        /// <param name="acl">Gets or sets the access control level permissions
        /// of the lock.</param>
        /// <param name="applicationName">Gets or sets the name of the
        /// application creating the lock.</param>
        public LockModel(int? entityID = default(int?), int? sessionID = default(int?), int? userID = default(int?), string userFullName = default(string), System.DateTime? lockTime = default(System.DateTime?), System.DateTime? expirationTime = default(System.DateTime?), int? acl = default(int?), string applicationName = default(string))
        {
            EntityID = entityID;
            SessionID = sessionID;
            UserID = userID;
            UserFullName = userFullName;
            LockTime = lockTime;
            ExpirationTime = expirationTime;
            Acl = acl;
            ApplicationName = applicationName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EntityID")]
        public int? EntityID { get; set; }

        /// <summary>
        /// Gets or sets the user session identifier.
        /// </summary>
        [JsonProperty(PropertyName = "SessionID")]
        public int? SessionID { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the user who inserted the entity
        /// lock.
        /// </summary>
        [JsonProperty(PropertyName = "UserID")]
        public int? UserID { get; set; }

        /// <summary>
        /// Gets or sets the full name of the user who inserted the lock.
        /// </summary>
        [JsonProperty(PropertyName = "UserFullName")]
        public string UserFullName { get; set; }

        /// <summary>
        /// Gets or sets the time when the lock was placed on the entity.
        /// </summary>
        [JsonProperty(PropertyName = "LockTime")]
        public System.DateTime? LockTime { get; set; }

        /// <summary>
        /// Gets or sets the expiration time of the lock.
        /// </summary>
        [JsonProperty(PropertyName = "ExpirationTime")]
        public System.DateTime? ExpirationTime { get; set; }

        /// <summary>
        /// Gets or sets the access control level permissions of the lock.
        /// </summary>
        [JsonProperty(PropertyName = "Acl")]
        public int? Acl { get; set; }

        /// <summary>
        /// Gets or sets the name of the application creating the lock.
        /// </summary>
        [JsonProperty(PropertyName = "ApplicationName")]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ApplicationName != null)
            {
                if (ApplicationName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ApplicationName", 255);
                }
                if (ApplicationName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ApplicationName", 0);
                }
            }
        }
    }
}
