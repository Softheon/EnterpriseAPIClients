// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Drawer Base class.
    /// </summary>
    public partial class DrawerBase
    {
        /// <summary>
        /// Initializes a new instance of the DrawerBase class.
        /// </summary>
        public DrawerBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DrawerBase class.
        /// </summary>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="edition">Gets or sets the edition.</param>
        /// <param name="state">Gets or sets the state.</param>
        /// <param name="entityFeature">Gets or sets the entity
        /// feature.</param>
        /// <param name="attachmentFeature">Gets or sets the attachment
        /// feature.</param>
        /// <param name="noteFeature">Gets or sets the note feature.</param>
        /// <param name="reservedInt1">Gets or sets the reserved integer
        /// 1.</param>
        /// <param name="reservedInt2">Gets or sets the reserved integer
        /// 2.</param>
        /// <param name="reservedString1">Gets or sets the reserved
        /// string1.</param>
        /// <param name="reservedString2">Gets or sets the reserved
        /// string2.</param>
        public DrawerBase(string name, int? edition = default(int?), int? state = default(int?), int? entityFeature = default(int?), int? attachmentFeature = default(int?), int? noteFeature = default(int?), int? reservedInt1 = default(int?), int? reservedInt2 = default(int?), string reservedString1 = default(string), string reservedString2 = default(string))
        {
            Name = name;
            Edition = edition;
            State = state;
            EntityFeature = entityFeature;
            AttachmentFeature = attachmentFeature;
            NoteFeature = noteFeature;
            ReservedInt1 = reservedInt1;
            ReservedInt2 = reservedInt2;
            ReservedString1 = reservedString1;
            ReservedString2 = reservedString2;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the edition.
        /// </summary>
        [JsonProperty(PropertyName = "Edition")]
        public int? Edition { get; set; }

        /// <summary>
        /// Gets or sets the state.
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public int? State { get; set; }

        /// <summary>
        /// Gets or sets the entity feature.
        /// </summary>
        [JsonProperty(PropertyName = "EntityFeature")]
        public int? EntityFeature { get; set; }

        /// <summary>
        /// Gets or sets the attachment feature.
        /// </summary>
        [JsonProperty(PropertyName = "AttachmentFeature")]
        public int? AttachmentFeature { get; set; }

        /// <summary>
        /// Gets or sets the note feature.
        /// </summary>
        [JsonProperty(PropertyName = "NoteFeature")]
        public int? NoteFeature { get; set; }

        /// <summary>
        /// Gets or sets the reserved integer 1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt1")]
        public int? ReservedInt1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved integer 2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedInt2")]
        public int? ReservedInt2 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string1.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString1")]
        public string ReservedString1 { get; set; }

        /// <summary>
        /// Gets or sets the reserved string2.
        /// </summary>
        [JsonProperty(PropertyName = "ReservedString2")]
        public string ReservedString2 { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (Edition > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Edition", 2147483647);
            }
            if (Edition < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Edition", 0);
            }
            if (ReservedString1 != null)
            {
                if (ReservedString1.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString1", 255);
                }
                if (ReservedString1.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString1", 0);
                }
            }
            if (ReservedString2 != null)
            {
                if (ReservedString2.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ReservedString2", 255);
                }
                if (ReservedString2.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ReservedString2", 0);
                }
            }
        }
    }
}
