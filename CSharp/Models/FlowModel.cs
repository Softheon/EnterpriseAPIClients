// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model that is sent in response to a GET request for Flow
    /// </summary>
    public partial class FlowModel
    {
        /// <summary>
        /// Initializes a new instance of the FlowModel class.
        /// </summary>
        public FlowModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FlowModel class.
        /// </summary>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="drawerID">Gets or sets the drawer identifier.</param>
        /// <param name="entityID">Gets or sets the entity identifier.</param>
        /// <param name="type">Gets or sets the type. Possible values include:
        /// 'None', 'Workflow', 'Fatal', 'Warning', 'Info', 'Debug', 'Process',
        /// 'Rpc', 'Sql', 'Dde'</param>
        /// <param name="queueID">Gets or sets the queue identifier.</param>
        /// <param name="workflowTime">Gets or sets the workflow time.</param>
        /// <param name="insertionTime">Gets or sets the insertion
        /// time.</param>
        /// <param name="workflowUserID">Gets or sets the workflow user
        /// identifier.</param>
        /// <param name="workflowUserFullName">Gets or sets the full name of
        /// the workflow user.</param>
        /// <param name="workflowGroupID">Gets or sets the workflow group
        /// identifier.</param>
        /// <param name="workflowGroupName">Gets or sets the name of the
        /// workflow group.</param>
        /// <param name="operation">Gets or sets the operation. Possible values
        /// include: 'None', 'Update', 'Reset', 'Override', 'Null'</param>
        /// <param name="category">Gets or sets the category. Possible values
        /// include: 'None', 'Direct', 'AdHoc', 'Production', 'Review',
        /// 'Reset', 'RoutingSlip', 'ReviewRoutingSlip', 'Override'</param>
        /// <param name="status">Gets or sets the status. Possible values
        /// include: 'None', 'Approved', 'Rejected', 'Suspended', 'ApprovedR',
        /// 'NoneR'</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'None', 'Processed', 'Pending', 'Waiting', 'ProcessedR',
        /// 'Override', 'OverrideR', 'WaitingR'</param>
        /// <param name="source">Gets or sets the source.</param>
        /// <param name="iPAddress">Gets or sets the ip address.</param>
        /// <param name="computer">Gets or sets the computer.</param>
        /// <param name="description">Gets or sets the description.</param>
        /// <param name="index1">Gets or sets the index1.</param>
        /// <param name="index2">Gets or sets the index2.</param>
        public FlowModel(int? id = default(int?), int? drawerID = default(int?), int? entityID = default(int?), string type = default(string), int? queueID = default(int?), System.DateTime? workflowTime = default(System.DateTime?), System.DateTime? insertionTime = default(System.DateTime?), int? workflowUserID = default(int?), string workflowUserFullName = default(string), int? workflowGroupID = default(int?), string workflowGroupName = default(string), string operation = default(string), string category = default(string), string status = default(string), string state = default(string), string source = default(string), string iPAddress = default(string), string computer = default(string), string description = default(string), int? index1 = default(int?), int? index2 = default(int?))
        {
            ID = id;
            DrawerID = drawerID;
            EntityID = entityID;
            Type = type;
            QueueID = queueID;
            WorkflowTime = workflowTime;
            InsertionTime = insertionTime;
            WorkflowUserID = workflowUserID;
            WorkflowUserFullName = workflowUserFullName;
            WorkflowGroupID = workflowGroupID;
            WorkflowGroupName = workflowGroupName;
            Operation = operation;
            Category = category;
            Status = status;
            State = state;
            Source = source;
            IPAddress = iPAddress;
            Computer = computer;
            Description = description;
            Index1 = index1;
            Index2 = index2;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or sets the drawer identifier.
        /// </summary>
        [JsonProperty(PropertyName = "DrawerID")]
        public int? DrawerID { get; set; }

        /// <summary>
        /// Gets or sets the entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EntityID")]
        public int? EntityID { get; set; }

        /// <summary>
        /// Gets or sets the type. Possible values include: 'None', 'Workflow',
        /// 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the queue identifier.
        /// </summary>
        [JsonProperty(PropertyName = "QueueID")]
        public int? QueueID { get; set; }

        /// <summary>
        /// Gets or sets the workflow time.
        /// </summary>
        [JsonProperty(PropertyName = "WorkflowTime")]
        public System.DateTime? WorkflowTime { get; set; }

        /// <summary>
        /// Gets or sets the insertion time.
        /// </summary>
        [JsonProperty(PropertyName = "InsertionTime")]
        public System.DateTime? InsertionTime { get; set; }

        /// <summary>
        /// Gets or sets the workflow user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "WorkflowUserID")]
        public int? WorkflowUserID { get; set; }

        /// <summary>
        /// Gets or sets the full name of the workflow user.
        /// </summary>
        [JsonProperty(PropertyName = "WorkflowUserFullName")]
        public string WorkflowUserFullName { get; set; }

        /// <summary>
        /// Gets or sets the workflow group identifier.
        /// </summary>
        [JsonProperty(PropertyName = "WorkflowGroupID")]
        public int? WorkflowGroupID { get; set; }

        /// <summary>
        /// Gets or sets the name of the workflow group.
        /// </summary>
        [JsonProperty(PropertyName = "WorkflowGroupName")]
        public string WorkflowGroupName { get; set; }

        /// <summary>
        /// Gets or sets the operation. Possible values include: 'None',
        /// 'Update', 'Reset', 'Override', 'Null'
        /// </summary>
        [JsonProperty(PropertyName = "Operation")]
        public string Operation { get; set; }

        /// <summary>
        /// Gets or sets the category. Possible values include: 'None',
        /// 'Direct', 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip',
        /// 'ReviewRoutingSlip', 'Override'
        /// </summary>
        [JsonProperty(PropertyName = "Category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the status. Possible values include: 'None',
        /// 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'None',
        /// 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override',
        /// 'OverrideR', 'WaitingR'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the source.
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the ip address.
        /// </summary>
        [JsonProperty(PropertyName = "IPAddress")]
        public string IPAddress { get; set; }

        /// <summary>
        /// Gets or sets the computer.
        /// </summary>
        [JsonProperty(PropertyName = "Computer")]
        public string Computer { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the index1.
        /// </summary>
        [JsonProperty(PropertyName = "Index1")]
        public int? Index1 { get; set; }

        /// <summary>
        /// Gets or sets the index2.
        /// </summary>
        [JsonProperty(PropertyName = "Index2")]
        public int? Index2 { get; set; }

    }
}
