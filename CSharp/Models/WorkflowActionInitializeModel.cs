// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines properties and methods for Workflow Initialize
    /// </summary>
    public partial class WorkflowActionInitializeModel
    {
        /// <summary>
        /// Initializes a new instance of the WorkflowActionInitializeModel
        /// class.
        /// </summary>
        public WorkflowActionInitializeModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkflowActionInitializeModel
        /// class.
        /// </summary>
        /// <param name="drawerID">Gets or sets the drawer identifier.</param>
        /// <param name="entityID">Gets or sets the entity identifier.</param>
        /// <param name="queueID">Gets or sets the queue identifier.</param>
        /// <param name="queueName">Gets or sets the name of the queue.</param>
        /// <param name="source">Gets or sets the source.</param>
        /// <param name="computer">Gets or sets the name of the
        /// computer.</param>
        /// <param name="iPAddress">Gets or sets the IP address.</param>
        public WorkflowActionInitializeModel(int? drawerID = default(int?), int? entityID = default(int?), IList<int?> queueID = default(IList<int?>), IList<string> queueName = default(IList<string>), string source = default(string), string computer = default(string), string iPAddress = default(string))
        {
            DrawerID = drawerID;
            EntityID = entityID;
            QueueID = queueID;
            QueueName = queueName;
            Source = source;
            Computer = computer;
            IPAddress = iPAddress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the drawer identifier.
        /// </summary>
        [JsonProperty(PropertyName = "DrawerID")]
        public int? DrawerID { get; set; }

        /// <summary>
        /// Gets or sets the entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EntityID")]
        public int? EntityID { get; set; }

        /// <summary>
        /// Gets or sets the queue identifier.
        /// </summary>
        [JsonProperty(PropertyName = "QueueID")]
        public IList<int?> QueueID { get; set; }

        /// <summary>
        /// Gets or sets the name of the queue.
        /// </summary>
        [JsonProperty(PropertyName = "QueueName")]
        public IList<string> QueueName { get; set; }

        /// <summary>
        /// Gets or sets the source.
        /// </summary>
        [JsonProperty(PropertyName = "Source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the name of the computer.
        /// </summary>
        [JsonProperty(PropertyName = "Computer")]
        public string Computer { get; set; }

        /// <summary>
        /// Gets or sets the IP address.
        /// </summary>
        [JsonProperty(PropertyName = "IPAddress")]
        public string IPAddress { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DrawerID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DrawerID", 2147483647);
            }
            if (DrawerID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DrawerID", 1);
            }
            if (EntityID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "EntityID", 2147483647);
            }
            if (EntityID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EntityID", 1);
            }
            if (Source != null)
            {
                if (Source.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Source", 255);
                }
                if (Source.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Source", 0);
                }
            }
            if (Computer != null)
            {
                if (Computer.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Computer", 255);
                }
                if (Computer.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Computer", 0);
                }
            }
            if (IPAddress != null)
            {
                if (IPAddress.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "IPAddress", 255);
                }
                if (IPAddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "IPAddress", 0);
                }
            }
        }
    }
}
