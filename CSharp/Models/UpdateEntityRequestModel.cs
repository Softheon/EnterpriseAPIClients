// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The model for PUT Entity input parameters.
    /// </summary>
    public partial class UpdateEntityRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the UpdateEntityRequestModel class.
        /// </summary>
        public UpdateEntityRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateEntityRequestModel class.
        /// </summary>
        /// <param name="profiles">Gets or sets the profiles.</param>
        /// <param name="state">Gets or sets the state. Possible values
        /// include: 'Undefined', 'Available', 'Locked', 'Suspended',
        /// 'Archived', 'Deleted', 'Canceled', 'Complete', 'Reviewed',
        /// 'ReviewedSuspended', 'ReviewedComplete', 'Rejected',
        /// 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'</param>
        /// <param name="name">Gets or sets the name.</param>
        public UpdateEntityRequestModel(IList<ProfileModel> profiles = default(IList<ProfileModel>), string state = default(string), string name = default(string))
        {
            Profiles = profiles;
            State = state;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the profiles.
        /// </summary>
        [JsonProperty(PropertyName = "Profiles")]
        public IList<ProfileModel> Profiles { get; set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: 'Undefined',
        /// 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
        /// 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
        /// 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
        /// 'ReviewedRoutingSlipOpen'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
        }
    }
}
