// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The EntityLink model for POST Requests.
    /// </summary>
    public partial class InsertEntityLinkRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the InsertEntityLinkRequestModel
        /// class.
        /// </summary>
        public InsertEntityLinkRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InsertEntityLinkRequestModel
        /// class.
        /// </summary>
        /// <param name="name">Gets or sets the name.</param>
        /// <param name="classProperty">Gets or sets the class.</param>
        /// <param name="acl">Gets or sets the acl.</param>
        /// <param name="pageNumber">Gets or sets the page number.</param>
        /// <param name="note">Gets or sets the note.</param>
        /// <param name="childDrawerID">Gets or sets the child drawer
        /// identifier.</param>
        /// <param name="childEntityID">Gets or sets the child entity
        /// identifier.</param>
        /// <param name="childType">Gets or sets the type of the child.</param>
        /// <param name="entityID">Gets or sets the entity identifier.</param>
        /// <param name="virtualName">Gets or sets the name of the
        /// virtual.</param>
        public InsertEntityLinkRequestModel(string name, int? classProperty = default(int?), int? acl = default(int?), int? pageNumber = default(int?), string note = default(string), int? childDrawerID = default(int?), int? childEntityID = default(int?), int? childType = default(int?), int? entityID = default(int?), string virtualName = default(string))
        {
            ClassProperty = classProperty;
            Name = name;
            Acl = acl;
            PageNumber = pageNumber;
            Note = note;
            ChildDrawerID = childDrawerID;
            ChildEntityID = childEntityID;
            ChildType = childType;
            EntityID = entityID;
            VirtualName = virtualName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the class.
        /// </summary>
        [JsonProperty(PropertyName = "Class")]
        public int? ClassProperty { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the acl.
        /// </summary>
        [JsonProperty(PropertyName = "Acl")]
        public int? Acl { get; set; }

        /// <summary>
        /// Gets or sets the page number.
        /// </summary>
        [JsonProperty(PropertyName = "PageNumber")]
        public int? PageNumber { get; set; }

        /// <summary>
        /// Gets or sets the note.
        /// </summary>
        [JsonProperty(PropertyName = "Note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets the child drawer identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ChildDrawerID")]
        public int? ChildDrawerID { get; set; }

        /// <summary>
        /// Gets or sets the child entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "ChildEntityID")]
        public int? ChildEntityID { get; set; }

        /// <summary>
        /// Gets or sets the type of the child.
        /// </summary>
        [JsonProperty(PropertyName = "ChildType")]
        public int? ChildType { get; set; }

        /// <summary>
        /// Gets or sets the entity identifier.
        /// </summary>
        [JsonProperty(PropertyName = "EntityID")]
        public int? EntityID { get; set; }

        /// <summary>
        /// Gets or sets the name of the virtual.
        /// </summary>
        [JsonProperty(PropertyName = "VirtualName")]
        public string VirtualName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 0);
                }
            }
            if (PageNumber > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageNumber", 2147483647);
            }
            if (PageNumber < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageNumber", 0);
            }
            if (Note != null)
            {
                if (Note.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Note", 255);
                }
                if (Note.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Note", 0);
                }
            }
            if (ChildDrawerID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ChildDrawerID", 2147483647);
            }
            if (ChildDrawerID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ChildDrawerID", 1);
            }
            if (ChildEntityID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ChildEntityID", 2147483647);
            }
            if (ChildEntityID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ChildEntityID", 1);
            }
            if (ChildType > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ChildType", 2147483647);
            }
            if (ChildType < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ChildType", 1);
            }
            if (EntityID > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "EntityID", 2147483647);
            }
            if (EntityID < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EntityID", 1);
            }
            if (VirtualName != null)
            {
                if (VirtualName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "VirtualName", 255);
                }
                if (VirtualName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "VirtualName", 0);
                }
            }
        }
    }
}
