// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface ISoftheonEnterpriseAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Accepts the task.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AcceptTaskWithHttpMessagesAsync(WorkflowActionModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Rejects the task.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RejectTaskWithHttpMessagesAsync(WorkflowActionModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Suspends the task.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SuspendTaskWithHttpMessagesAsync(WorkflowActionModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Routes the task.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RouteTaskWithHttpMessagesAsync(WorkflowActionRouteModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Overrides the task.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> OverrideTaskWithHttpMessagesAsync(WorkflowActionModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Resets the task.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ResetTaskWithHttpMessagesAsync(WorkflowActionModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initializes the Workflow.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InitializeEntityWorkflowWithHttpMessagesAsync(WorkflowActionInitializeModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of all available applications.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ApplicationModel>>> GetAllApplicationsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single application by its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The unique application identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationModel>> GetApplicationByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single application by its name.
        /// </summary>
        /// <param name='name'>
        /// The unique application name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationModel>> GetApplicationByNameWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of drawer group associations.
        /// </summary>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupDrawerModel>>> GetDrawerGroupAssociationsWithHttpMessagesAsync(int drawerID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of group drawer associations.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupDrawerModel>>> GetGroupDrawerAssociationsWithHttpMessagesAsync(int groupID, int? drawerID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the drawer group association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateDrawerGroupAssociationWithHttpMessagesAsync(int groupID, int drawerID, GroupDrawerModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a drawer group association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteDrawerGroupAssociationWithHttpMessagesAsync(int groupID, int drawerID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the group drawer association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateGroupDrawerAssociationWithHttpMessagesAsync(int groupID, int drawerID, GroupDrawerModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a group drawer association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGroupDrawerAssociationWithHttpMessagesAsync(int groupID, int drawerID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of user group associations.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupUserModel>>> GetUserGroupAssociationsWithHttpMessagesAsync(int userID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of group user associations.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupUserModel>>> GetGroupUserAssociationsWithHttpMessagesAsync(int groupID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts the user group association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateUserGroupAssociationWithHttpMessagesAsync(int groupID, int userID, GroupUserModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user group association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteUserGroupAssociationWithHttpMessagesAsync(int groupID, int userID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts the group user association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateGroupUserAssociationWithHttpMessagesAsync(int groupID, int userID, GroupUserModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a group user association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGroupUserAssociationWithHttpMessagesAsync(int groupID, int userID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of queue group associations.
        /// </summary>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupQueueModel>>> GetQueueGroupAssociationsWithHttpMessagesAsync(int queueID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of group queue associations.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupQueueModel>>> GetGroupQueueAssociationsWithHttpMessagesAsync(int groupID, int? queueID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the queue group association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateQueueGroupAssociationWithHttpMessagesAsync(int groupID, int queueID, GroupQueueModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a queue group association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteQueueGroupAssociationWithHttpMessagesAsync(int groupID, int queueID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the group queue association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateGroupQueueAssociationWithHttpMessagesAsync(int groupID, int queueID, GroupQueueModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a group queue association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGroupQueueAssociationWithHttpMessagesAsync(int groupID, int queueID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of application group associations.
        /// </summary>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupApplicationModel>>> GetApplicationGroupAssociationsWithHttpMessagesAsync(int applicationID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of group application associations.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupApplicationModel>>> GetGroupApplicationAssociationsWithHttpMessagesAsync(int groupID, int? applicationID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the application group association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateApplicationGroupAssociationWithHttpMessagesAsync(int groupID, int applicationID, GroupApplicationModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a application group association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteApplicationGroupAssociationWithHttpMessagesAsync(int groupID, int applicationID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the group application association.
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateGroupApplicationAssociationWithHttpMessagesAsync(int groupID, int applicationID, GroupApplicationModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a group application association;
        /// </summary>
        /// <param name='groupID'>
        /// The group identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGroupApplicationAssociationWithHttpMessagesAsync(int groupID, int applicationID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of drawer user associations.
        /// </summary>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserDrawerModel>>> GetDrawerUserAssociationsWithHttpMessagesAsync(int drawerID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of user drawer associations.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserDrawerModel>>> GetUserDrawerAssociationsWithHttpMessagesAsync(int userID, int? drawerID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the drawer user association.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateDrawerUserAssociationWithHttpMessagesAsync(int userID, int drawerID, UserDrawerModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a drawer user association;
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteDrawerUserAssociationWithHttpMessagesAsync(int userID, int drawerID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the user drawer association.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateUserDrawerAssociationWithHttpMessagesAsync(int userID, int drawerID, UserDrawerModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user drawer association;
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='drawerID'>
        /// The drawer identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteUserDrawerAssociationWithHttpMessagesAsync(int userID, int drawerID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of queue user associations.
        /// </summary>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserQueueModel>>> GetQueueUserAssociationsWithHttpMessagesAsync(int queueID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of user queue associations.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserQueueModel>>> GetUserQueueAssociationsWithHttpMessagesAsync(int userID, int? queueID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the queue user association.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateQueueUserAssociationWithHttpMessagesAsync(int userID, int queueID, UserQueueModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a queue user association;
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteQueueUserAssociationWithHttpMessagesAsync(int userID, int queueID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the user queue association.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateUserQueueAssociationWithHttpMessagesAsync(int userID, int queueID, UserQueueModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user queue association;
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='queueID'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteUserQueueAssociationWithHttpMessagesAsync(int userID, int queueID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of application user associations.
        /// </summary>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserApplicationModel>>> GetApplicationUserAssociationsWithHttpMessagesAsync(int applicationID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of user application associations.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control level permissions.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID',
        /// 'QueueID', 'Acl'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserApplicationModel>>> GetUserApplicationAssociationsWithHttpMessagesAsync(int userID, int? applicationID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the application user association.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateApplicationUserAssociationWithHttpMessagesAsync(int userID, int applicationID, UserApplicationModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an application user association;
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteApplicationUserAssociationWithHttpMessagesAsync(int userID, int applicationID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts/Updates the user application association.
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateUserApplicationAssociationWithHttpMessagesAsync(int userID, int applicationID, UserApplicationModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a user application association;
        /// </summary>
        /// <param name='userID'>
        /// The user identifier.
        /// </param>
        /// <param name='applicationID'>
        /// The application identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteUserApplicationAssociationWithHttpMessagesAsync(int userID, int applicationID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of attachment metadata.
        /// </summary>
        /// <param name='type'>
        /// Gets or sets the type. Possible values include: 'Standard',
        /// 'EntityLink', 'WebLink'
        /// </param>
        /// <param name='extension'>
        /// Gets or sets the extension.
        /// </param>
        /// <param name='minSize'>
        /// Gets or sets the minimum size.
        /// </param>
        /// <param name='maxSize'>
        /// Gets or sets the maximum size.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control list.
        /// </param>
        /// <param name='entityID'>
        /// Gets or sets the entity identifier.
        /// </param>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='creatorUserID'>
        /// Gets or sets the creator user identifier.
        /// </param>
        /// <param name='modifierUserID'>
        /// Gets or sets the modifier user identifier.
        /// </param>
        /// <param name='minInsertionTime'>
        /// Gets or sets the minimum insertion time.
        /// </param>
        /// <param name='maxInsertionTime'>
        /// Gets or sets the maximum insertion time.
        /// </param>
        /// <param name='minModificationTime'>
        /// Gets or sets the minimum modification time.
        /// </param>
        /// <param name='maxModificationTime'>
        /// Gets or sets the maximum modification time.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime',
        /// 'CrossReferenceID', 'SubType', 'Extension', 'Name'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AttachmentModel>>> GetAttachmentsByFilterWithHttpMessagesAsync(string type = default(string), string extension = default(string), long? minSize = default(long?), long? maxSize = default(long?), int? acl = default(int?), int? entityID = default(int?), int? drawerID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single attachment metadata based on its unique identifier.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AttachmentModel>> GetAttachmentByIdWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified attachment's metadata..
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateAttachmentWithHttpMessagesAsync(int drawer, int id, UpdateAttachmentRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an attachment
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteAttachmentWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets an attachment's file content.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAttachmentFileContentWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts a new file attachment.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AttachmentModel>> CreateAttachmentWithHttpMessagesAsync(int drawer, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Archives an attachment
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ArchiveAttachmentWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the paged list of attachment versions.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='version'>
        /// Gets or sets the indexed version value.
        /// </param>
        /// <param name='creatorUserID'>
        /// Gets or sets the creator identifier.
        /// </param>
        /// <param name='accessorUserID'>
        /// Gets or sets the identifier of the user who accessed the attachment
        /// version.
        /// </param>
        /// <param name='minAccessTime'>
        /// Gets or sets the min time the version was last accessed.
        /// </param>
        /// <param name='maxAccessTime'>
        /// Gets or sets the max time the version was last accessed.
        /// </param>
        /// <param name='minCreationTime'>
        /// Gets or sets the min creation time of the attachment version.
        /// </param>
        /// <param name='maxCreationTime'>
        /// Gets or sets the max creation time of the attachment version.
        /// </param>
        /// <param name='minModificationTime'>
        /// Gets or sets the min modification time of the attachment version.
        /// </param>
        /// <param name='maxModificationTime'>
        /// Gets or sets the max modification time of the attachment version.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'Version', 'CreatorUserID', 'AccessorUserID', 'AccessTime',
        /// 'CreationTime', 'ModificationTime'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AttachmentVersionModel>>> GetAttachmentVersionsByFilterWithHttpMessagesAsync(int drawer, int id, int? version = default(int?), int? creatorUserID = default(int?), int? accessorUserID = default(int?), System.DateTime? minAccessTime = default(System.DateTime?), System.DateTime? maxAccessTime = default(System.DateTime?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a file for a specified attachment version.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='versionID'>
        /// The version identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAttachmentVersionFileContentWithHttpMessagesAsync(int drawer, int id, int versionID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks out the attachment file.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CheckOutAttachmentWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Undoes the attachment check out of the attachment file.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UndoCheckOutAttachmentWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Checks in the new version of attachment file.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CheckInAttachmentWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Rolls back to a specified version the attachment file.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The attachment identifier.
        /// </param>
        /// <param name='versionID'>
        /// The version identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RollbackAttachmentVersionWithHttpMessagesAsync(int drawer, int id, int versionID, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of all available drawers.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<DrawerModel>>> GetAllDrawersWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single drawer by its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The drawer identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DrawerModel>> GetDrawerByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified drawer.
        /// </summary>
        /// <param name='id'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateDrawerWithHttpMessagesAsync(int id, DrawerBase model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single drawer by its name.
        /// </summary>
        /// <param name='name'>
        /// The drawer name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DrawerModel>> GetDrawerByNameWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of entity summaries.
        /// </summary>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control list.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type of the entity.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='state'>
        /// Gets or sets the state. Possible values include: 'Undefined',
        /// 'Available', 'Locked', 'Suspended', 'Archived', 'Deleted',
        /// 'Canceled', 'Complete', 'Reviewed', 'ReviewedSuspended',
        /// 'ReviewedComplete', 'Rejected', 'RoutingSlipOpen',
        /// 'ReviewedRoutingSlipOpen'
        /// </param>
        /// <param name='referenceCount'>
        /// Gets or sets the reference count.
        /// </param>
        /// <param name='attachCount'>
        /// Gets or sets the attach count.
        /// </param>
        /// <param name='noteCount'>
        /// Gets or sets the note count.
        /// </param>
        /// <param name='ownerUserID'>
        /// Gets or sets the owner user identifier.
        /// </param>
        /// <param name='ownerGroupID'>
        /// Gets or sets the owner group identifier.
        /// </param>
        /// <param name='creatorUserID'>
        /// Gets or sets the creator user identifier.
        /// </param>
        /// <param name='creatorGroupID'>
        /// Gets or sets the creator group identifier.
        /// </param>
        /// <param name='modifierUserID'>
        /// Gets or sets the modifier user identifier.
        /// </param>
        /// <param name='modifierGroupID'>
        /// Gets or sets the modifier group identifier.
        /// </param>
        /// <param name='minCreationTime'>
        /// Gets or sets the minimum creation time.
        /// </param>
        /// <param name='maxCreationTime'>
        /// Gets or sets the maximum creation time.
        /// </param>
        /// <param name='minModificationTime'>
        /// Gets or sets the minimum modification time.
        /// </param>
        /// <param name='maxModificationTime'>
        /// Gets or sets the maximum modification time.
        /// </param>
        /// <param name='metadata'>
        /// Gets or sets the metadata.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'Type', 'CreationTime', 'ModificationTime', 'State', 'Name'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetEntityBaseResponse>>> GetEntitiesByFilterWithHttpMessagesAsync(int drawerID, int? acl = default(int?), int? type = default(int?), string name = default(string), string state = default(string), int? referenceCount = default(int?), int? attachCount = default(int?), int? noteCount = default(int?), int? ownerUserID = default(int?), int? ownerGroupID = default(int?), int? creatorUserID = default(int?), int? creatorGroupID = default(int?), int? modifierUserID = default(int?), int? modifierGroupID = default(int?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), IList<object> metadata = default(IList<object>), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single entity complete with all profile metadata.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The entity identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityModel>> GetEntityByIdWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified entity.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The entity identifier.
        /// </param>
        /// <param name='model'>
        /// The entity model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateEntityWithHttpMessagesAsync(int drawer, int id, UpdateEntityRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a specified entity.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The entity identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteEntityWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The entity model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityModel>> CreateEntityWithHttpMessagesAsync(int drawer, InsertEntityRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Copies the contents of an entity.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer.
        /// </param>
        /// <param name='id'>
        /// The entity identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityModel>> CopyEntityWithHttpMessagesAsync(int drawer, int id, EntityContentModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of events.
        /// </summary>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='entityID'>
        /// Gets or sets the entity identifier.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type. Possible values include: 'Undefined',
        /// 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
        /// </param>
        /// <param name='minEventTime'>
        /// Gets or sets the minimum event time.
        /// </param>
        /// <param name='maxEventTime'>
        /// Gets or sets the maximum event time.
        /// </param>
        /// <param name='eventUserID'>
        /// Gets or sets the event user identifier.
        /// </param>
        /// <param name='eventGroupID'>
        /// Gets or sets the event group identifier.
        /// </param>
        /// <param name='category'>
        /// Gets or sets the category. Possible values include: 'Undefined',
        /// 'Entity', 'Profile', 'Attachment', 'Discussion', 'Field',
        /// 'Workflow'
        /// </param>
        /// <param name='classParameter'>
        /// Gets or sets the class. Possible values include: 'Undefined',
        /// 'Application', 'Security', 'System'
        /// </param>
        /// <param name='operation'>
        /// Gets or sets the operation. Possible values include: 'Undefined',
        /// 'Insert', 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open',
        /// 'Close', 'Checkout', 'Checkin', 'View', 'Merge', 'Split',
        /// 'Classify', 'Null', 'OpenWF', 'Remove', 'ReturnToTop',
        /// 'ReturnToBottom', 'Accept', 'Suspend', 'Reject', 'Route',
        /// 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback',
        /// 'Archive'
        /// </param>
        /// <param name='minProcessingTime'>
        /// Gets or sets the minimum processing time.
        /// </param>
        /// <param name='maxProcessingTime'>
        /// Gets or sets the maximum processing time.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'Type', 'EventTime'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EventModel>>> GetEventsByFilterWithHttpMessagesAsync(int drawerID, int entityID, string type = default(string), System.DateTime? minEventTime = default(System.DateTime?), System.DateTime? maxEventTime = default(System.DateTime?), int? eventUserID = default(int?), int? eventGroupID = default(int?), string category = default(string), string classParameter = default(string), string operation = default(string), int? minProcessingTime = default(int?), int? maxProcessingTime = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a single event based on its unique identifier.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The event identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EventModel>> GetEventByIdWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new event.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The event model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EventModel>> CreateEventWithHttpMessagesAsync(int drawer, EventModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of extension rows
        /// </summary>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='entityID'>
        /// Gets or sets the entity identifier.
        /// </param>
        /// <param name='profileID'>
        /// Gets or sets the profile identifier.
        /// </param>
        /// <param name='iD'>
        /// Gets or sets the extension identifier.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type of the extension.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'RowNumber', 'ID', 'Type', 'String', 'Integer', 'Double', 'Date'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ExtensionModel>>> GetExtensionsByFilterWithHttpMessagesAsync(int drawerID, int entityID, int profileID, int? iD = default(int?), int? type = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of flows.
        /// </summary>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='entityID'>
        /// Gets or sets the entity identifier.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type. Possible values include: 'None', 'Workflow',
        /// 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
        /// </param>
        /// <param name='queueID'>
        /// Gets or sets the queue identifier.
        /// </param>
        /// <param name='minWorkflowTime'>
        /// Gets or sets the minimum workflow time.
        /// </param>
        /// <param name='maxWorkflowTime'>
        /// Gets or sets the maximum workflow time.
        /// </param>
        /// <param name='minInsertionTime'>
        /// Gets or sets the minimum insertion time.
        /// </param>
        /// <param name='maxInsertionTime'>
        /// Gets or sets the maximum insertion time.
        /// </param>
        /// <param name='workflowUserID'>
        /// Gets or sets the workflow user identifier.
        /// </param>
        /// <param name='workflowGroupID'>
        /// Gets or sets the workflow group identifier.
        /// </param>
        /// <param name='operation'>
        /// Gets or sets the operation. Possible values include: 'None',
        /// 'Update', 'Reset', 'Override', 'Null'
        /// </param>
        /// <param name='category'>
        /// Gets or sets the category. Possible values include: 'None',
        /// 'Direct', 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip',
        /// 'ReviewRoutingSlip', 'Override'
        /// </param>
        /// <param name='status'>
        /// Gets or sets the status. Possible values include: 'None',
        /// 'Approved', 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
        /// </param>
        /// <param name='state'>
        /// Gets or sets the state. Possible values include: 'None',
        /// 'Processed', 'Pending', 'Waiting', 'ProcessedR', 'Override',
        /// 'OverrideR', 'WaitingR'
        /// </param>
        /// <param name='minIndex1'>
        /// Gets or sets the minimum index 1.
        /// </param>
        /// <param name='maxIndex1'>
        /// Gets or sets the maximum index 1.
        /// </param>
        /// <param name='minIndex2'>
        /// Gets or sets the minimum index 2.
        /// </param>
        /// <param name='maxIndex2'>
        /// Gets or sets the maximum index 2.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'Type', 'QueueID', 'WorkflowTime', 'InsertionTime', 'Index'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<FlowModel>>> GetFlowsByFilterWithHttpMessagesAsync(int drawerID, int entityID, string type = default(string), int? queueID = default(int?), System.DateTime? minWorkflowTime = default(System.DateTime?), System.DateTime? maxWorkflowTime = default(System.DateTime?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), int? workflowUserID = default(int?), int? workflowGroupID = default(int?), string operation = default(string), string category = default(string), string status = default(string), string state = default(string), int? minIndex1 = default(int?), int? maxIndex1 = default(int?), int? minIndex2 = default(int?), int? maxIndex2 = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single flow based on its unique identifier.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The flow identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FlowModel>> GetFlowByIdWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of entity template definitions.
        /// </summary>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='category'>
        /// Gets or sets the category.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EntityDefinitionModel>>> GetTemplatesByFilterWithHttpMessagesAsync(int? drawerID = default(int?), string name = default(string), string category = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new entity template definition.
        /// </summary>
        /// <param name='model'>
        /// The entity template model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityDefinitionModel>> CreateTemplateWithHttpMessagesAsync(EntityDefinitionBase model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single entity template definition by its type.
        /// </summary>
        /// <param name='type'>
        /// The unique template type.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityDefinitionModel>> GetTemplateByTypeWithHttpMessagesAsync(int type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified entity template definition by type.
        /// </summary>
        /// <param name='type'>
        /// The unique template type.
        /// </param>
        /// <param name='model'>
        /// The entity template model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateTemplateByTypeWithHttpMessagesAsync(int type, UpdateEntityDefinitionRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a specified entity template definition by type.
        /// </summary>
        /// <param name='type'>
        /// The unique template type.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteTemplateByTypeWithHttpMessagesAsync(int type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single entity template definition by its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The template identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityDefinitionModel>> GetTemplateByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified entity template definition by identifier.
        /// </summary>
        /// <param name='id'>
        /// The unique template identifier.
        /// </param>
        /// <param name='model'>
        /// The entity template model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateTemplateByIdWithHttpMessagesAsync(string id, UpdateEntityDefinitionRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a specified entity template definition by identifier.
        /// </summary>
        /// <param name='id'>
        /// The unique template identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteTemplateByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates the specified template field.
        /// </summary>
        /// <param name='type'>
        /// The template type.
        /// </param>
        /// <param name='fieldID'>
        /// The field name.
        /// </param>
        /// <param name='sortColumn'>
        /// Gets or sets the sort column.
        /// </param>
        /// <param name='metadata'>
        /// Gets or sets the metadata search options.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FieldValidationModel>> ValidateTemplateFieldWithHttpMessagesAsync(int type, string fieldID, string sortColumn = default(string), IList<object> metadata = default(IList<object>), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of groups.
        /// </summary>
        /// <param name='iD'>
        /// Gets or sets the group identifier.
        /// </param>
        /// <param name='userID'>
        /// Gets or sets the user identifier.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type. Possible values include: 'Generic',
        /// 'Access', 'Role'
        /// </param>
        /// <param name='state'>
        /// Gets or sets the state. Possible values include: 'Inactive',
        /// 'Active'
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'Name', 'Type', 'State'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GroupModel>>> GetGroupsByFilterWithHttpMessagesAsync(int? iD = default(int?), int? userID = default(int?), string name = default(string), string type = default(string), string state = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new group.
        /// </summary>
        /// <param name='model'>
        /// The group model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GroupModel>> CreateGroupWithHttpMessagesAsync(InsertGroupRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single group by its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The group identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GroupModel>> GetGroupByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified group.
        /// </summary>
        /// <param name='id'>
        /// The group identifier.
        /// </param>
        /// <param name='model'>
        /// The group model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateGroupWithHttpMessagesAsync(int id, GroupBase model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deactivates a group and removes all group associations.
        /// </summary>
        /// <param name='id'>
        /// The group identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGroupWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of entity links
        /// </summary>
        /// <param name='childEntityID'>
        /// Gets or sets the child entity identifier.
        /// </param>
        /// <param name='childDrawerID'>
        /// Gets or sets the child drawer identifier.
        /// </param>
        /// <param name='childType'>
        /// Gets or sets the type of the child.
        /// </param>
        /// <param name='acl'>
        /// Gets or sets the access control list.
        /// </param>
        /// <param name='entityID'>
        /// Gets or sets the entity identifier.
        /// </param>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='creatorUserID'>
        /// Gets or sets the creator user identifier.
        /// </param>
        /// <param name='modifierUserID'>
        /// Gets or sets the modifier user identifier.
        /// </param>
        /// <param name='minInsertionTime'>
        /// Gets or sets the minimum insertion time.
        /// </param>
        /// <param name='maxInsertionTime'>
        /// Gets or sets the maximum insertion time.
        /// </param>
        /// <param name='minModificationTime'>
        /// Gets or sets the minimum modification time.
        /// </param>
        /// <param name='maxModificationTime'>
        /// Gets or sets the maximum modification time.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'PageNumber', 'ID', 'Type', 'InsertionTime', 'ModificationTime',
        /// 'CrossReferenceID', 'SubType', 'Extension', 'Name'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EntityLinkModel>>> GetLinksByFilterWithHttpMessagesAsync(int? childEntityID = default(int?), int? childDrawerID = default(int?), int? childType = default(int?), int? acl = default(int?), int? entityID = default(int?), int? drawerID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a link based on its unique identifier.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The link identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityLinkModel>> GetLinkByIdWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified link.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The link identifier.
        /// </param>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateLinkWithHttpMessagesAsync(int drawer, int id, UpdateEntityLinkRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a specified link.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The link identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteLinkWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new link.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The link model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EntityLinkModel>> CreateLinkWithHttpMessagesAsync(int drawer, InsertEntityLinkRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a lock for a single entity based on its unique identifier.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The entity identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LockModel>> GetLocksByFilterWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Inserts or updates lock on a specified entity.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The entity identifier.
        /// </param>
        /// <param name='model'>
        /// The lock model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateLockWithHttpMessagesAsync(int drawer, int id, UpdateLockRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a lock on a specified entity.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The entity identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteLockWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of notes.
        /// </summary>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='entityID'>
        /// Gets or sets the entity identifier.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='creatorUserID'>
        /// Gets or sets the creator user identifier.
        /// </param>
        /// <param name='modifierUserID'>
        /// Gets or sets the modifier user identifier.
        /// </param>
        /// <param name='minCreationTime'>
        /// Gets or sets the minimum creation time.
        /// </param>
        /// <param name='maxCreationTime'>
        /// Gets or sets the maximum creation time.
        /// </param>
        /// <param name='minModificationTime'>
        /// Gets or sets the minimum modification time.
        /// </param>
        /// <param name='maxModificationTime'>
        /// Gets or sets the maximum modification time.
        /// </param>
        /// <param name='parentID'>
        /// Gets or sets the parent note identifier.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'EntityID', 'Name', 'CreationTime', 'ModificationTime'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NoteModel>>> GetNotesByFilterWithHttpMessagesAsync(int drawerID, int? entityID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? parentID = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a note by its unique identifier.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The note identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NoteModel>> GetNoteByIdWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified note.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The note identifier.
        /// </param>
        /// <param name='model'>
        /// The note model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateNoteWithHttpMessagesAsync(int drawer, int id, NoteBase model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a specified note.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='id'>
        /// The note identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteNoteWithHttpMessagesAsync(int drawer, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new note.
        /// </summary>
        /// <param name='drawer'>
        /// The drawer identifier.
        /// </param>
        /// <param name='model'>
        /// The note model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NoteModel>> CreateNoteWithHttpMessagesAsync(int drawer, InsertNoteRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of queue assignments.
        /// </summary>
        /// <param name='queueID'>
        /// Gets or sets the unique queue identifier.
        /// </param>
        /// <param name='userID'>
        /// Gets or sets the user identifier.
        /// </param>
        /// <param name='groupID'>
        /// Gets or sets the group identifier.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the queue assignment type. Possible values include:
        /// 'Unspecified', 'Primary', 'Secondary'
        /// </param>
        /// <param name='order'>
        /// Gets or sets the sort order.
        /// </param>
        /// <param name='taskSortColumn'>
        /// Gets or sets the task sort column. Possible values include:
        /// 'TaskID', 'QueueID', 'DrawerID', 'AddressID', 'ObjectID',
        /// 'ObjectType', 'State', 'Priority', 'Description', 'Message1',
        /// 'Message2', 'Message3', 'Message4', 'Message5', 'OwnerUserID',
        /// 'OwnerGroupID', 'EffectiveUserID', 'EffectiveGroupID',
        /// 'PreviousQueueID', 'NextQueueID', 'InsertionTime',
        /// 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1',
        /// 'ReservedString1'
        /// </param>
        /// <param name='state'>
        /// Gets or sets the state. Possible values include: 'Unspecified',
        /// 'Inactive', 'Active'
        /// </param>
        /// <param name='fetchType'>
        /// Gets or sets the type of the fetch. Possible values include:
        /// 'Unspecified', 'Manual', 'Push'
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'QueueID', 'UserID', 'GroupID', 'Type', 'State', 'Order',
        /// 'FetchType'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<QueueAssignmentModel>>> GetQueueAssignmentsByFilterWithHttpMessagesAsync(int? queueID = default(int?), int? userID = default(int?), int? groupID = default(int?), string type = default(string), int? order = default(int?), string taskSortColumn = default(string), string state = default(string), string fetchType = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the specified queue assignment.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateQueueAssignemntWithHttpMessagesAsync(QueueAssignmentModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new queue assignment.
        /// </summary>
        /// <param name='model'>
        /// The model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueueAssignmentModel>> CreateQueueAssignmentWithHttpMessagesAsync(InsertQueueAssignmentRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single queue assignment based on user and queue identifiers.
        /// </summary>
        /// <param name='userId'>
        /// The user identifier.
        /// </param>
        /// <param name='queueId'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueueAssignmentModel>> GetQueueAssignmentsByIdWithHttpMessagesAsync(int userId, int queueId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified queue assignment.
        /// </summary>
        /// <param name='userId'>
        /// The user identifier.
        /// </param>
        /// <param name='queueId'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteQueueAssignmentWithHttpMessagesAsync(int userId, int queueId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of queues.
        /// </summary>
        /// <param name='iD'>
        /// Gets or sets the queue identifier.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='alias'>
        /// Gets or sets the alias.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type. Possible values include: 'Inbound',
        /// 'Outbound', 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax',
        /// 'Print', 'Scan', 'Ocr', 'Workflow', 'Schedule', 'System', 'Other',
        /// 'CdoInfostore', 'CdoFolder'
        /// </param>
        /// <param name='access'>
        /// Gets or sets the access level.
        /// </param>
        /// <param name='bypassSecurity'>
        /// Gets or sets a value indicating whether to bypass security checks.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'Type', 'Name', 'Alias'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<QueueModel>>> GetQueuesByFilterWithHttpMessagesAsync(int? iD = default(int?), string name = default(string), string alias = default(string), string type = default(string), int? access = default(int?), bool? bypassSecurity = default(bool?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new queue.
        /// </summary>
        /// <param name='model'>
        /// The queue model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueueModel>> CreateQueueWithHttpMessagesAsync(InsertQueueRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single queue by its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueueModel>> GetQueueByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified queue.
        /// </summary>
        /// <param name='id'>
        /// The unique queue identifier.
        /// </param>
        /// <param name='model'>
        /// The queue model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateQueueWithHttpMessagesAsync(int id, QueueBase model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a specified queue.
        /// </summary>
        /// <param name='id'>
        /// The queue identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteQueueWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single queue by its name.
        /// </summary>
        /// <param name='name'>
        /// The queue name.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<QueueModel>> GetQueueByNameWithHttpMessagesAsync(string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of tasks.
        /// </summary>
        /// <param name='lastTaskID'>
        /// Gets or sets the last task identifier.
        /// </param>
        /// <param name='iD'>
        /// Gets or sets the entity identifier.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type of the entity.
        /// </param>
        /// <param name='queueID'>
        /// Gets or sets the queue identifier.
        /// </param>
        /// <param name='queueType'>
        /// Gets or sets the type of the queue.
        /// </param>
        /// <param name='drawerID'>
        /// Gets or sets the drawer identifier.
        /// </param>
        /// <param name='description'>
        /// Gets or sets the task description.
        /// </param>
        /// <param name='taskID'>
        /// Gets or sets the task identifier.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include:
        /// 'TaskID', 'QueueID', 'ObjectID', 'Priority', 'Description',
        /// 'InsertionTime', 'ResolutionTime', 'ReservedInt1'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TaskModel>>> GetTasksByFilterWithHttpMessagesAsync(int? lastTaskID = default(int?), int? iD = default(int?), int? type = default(int?), int? queueID = default(int?), int? queueType = default(int?), int? drawerID = default(int?), string description = default(string), int? taskID = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new task.
        /// </summary>
        /// <param name='model'>
        /// The task model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateTaskWithHttpMessagesAsync(InsertTaskRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single task based on its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TaskModel>> GetTaskByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified task.
        /// </summary>
        /// <param name='id'>
        /// The identifier.
        /// </param>
        /// <param name='model'>
        /// The task model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateTaskWithHttpMessagesAsync(int id, TaskBase model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a specified task.
        /// </summary>
        /// <param name='id'>
        /// The identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteTaskWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single task based on user predefined queue assignment
        /// criteria.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TaskModel>> FetchTaskFromQueueAssignmentWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of users.Gets a paged list of users.
        /// </summary>
        /// <param name='iD'>
        /// Gets or sets the identifier.
        /// </param>
        /// <param name='primaryGroupID'>
        /// Gets or sets the primary group identifier.
        /// </param>
        /// <param name='groupID'>
        /// Gets or sets the group identifier.
        /// </param>
        /// <param name='groupName'>
        /// Gets or sets the name of the group.
        /// </param>
        /// <param name='username'>
        /// Gets or sets the username.
        /// </param>
        /// <param name='type'>
        /// Gets or sets the type. Possible values include: 'ImageDesk',
        /// 'PublishDesk', 'FaxDesk', 'CaptureDesk', 'RecognitionDesk',
        /// 'PortalUser', 'AdminDesk', 'WorkflowDesk', 'Benchmark',
        /// 'ReportDesk', 'ColdDesk', 'PortalDesk', 'WorkflowArchitect',
        /// 'DocumentDesk', 'Poweruser'
        /// </param>
        /// <param name='state'>
        /// Gets or sets the state. Possible values include: 'Active',
        /// 'Inactive'
        /// </param>
        /// <param name='fullName'>
        /// Gets or sets the full name.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by. Possible values include: 'ID',
        /// 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserModel>>> GetUsersByFilterWithHttpMessagesAsync(int? iD = default(int?), int? primaryGroupID = default(int?), int? groupID = default(int?), string groupName = default(string), string username = default(string), string type = default(string), string state = default(string), string fullName = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new user.
        /// </summary>
        /// <param name='model'>
        /// The user model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserModel>> CreateUserWithHttpMessagesAsync(InsertUserRequestModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single user by its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The user identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserModel>> GetUserByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a specified user.
        /// </summary>
        /// <param name='id'>
        /// The user identifier.
        /// </param>
        /// <param name='model'>
        /// The user model.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateUserWithHttpMessagesAsync(int id, UserBase model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deactivates a specified user and removes all user associations.
        /// </summary>
        /// <param name='id'>
        /// The user identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteUserWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a paged list of workflows.
        /// </summary>
        /// <param name='applicationID'>
        /// Gets or sets the application identifier.
        /// </param>
        /// <param name='entityType'>
        /// Gets or sets the type of the entity.
        /// </param>
        /// <param name='name'>
        /// Gets or sets the name.
        /// </param>
        /// <param name='page'>
        /// Gets or sets the page number.
        /// </param>
        /// <param name='pageSize'>
        /// Gets or sets the size of the page.
        /// </param>
        /// <param name='sortOrder'>
        /// Gets or sets the order. Possible values include: 'Unspecified',
        /// 'Ascending', 'Descending'
        /// </param>
        /// <param name='sortBy'>
        /// Gets or sets the column to order by.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<WorkflowModel>>> GetWorkflowsByFilterWithHttpMessagesAsync(int? applicationID = default(int?), int? entityType = default(int?), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single workflow based on its unique identifier.
        /// </summary>
        /// <param name='id'>
        /// The workflow identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<WorkflowModel>> GetWorkflowByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets queues for a specific workflow.
        /// </summary>
        /// <param name='id'>
        /// The workflow identifier.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<WorkflowQueueModel>>> GetWorkflowQueuesByIdWithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a single entity template definition completed with all
        /// profiles definitions as XML entity definition.
        /// </summary>
        /// <param name='type'>
        /// The unique template type.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetXMLTemplateByTypeWithHttpMessagesAsync(int type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new entity template definition.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> CreateXMLTemplateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
