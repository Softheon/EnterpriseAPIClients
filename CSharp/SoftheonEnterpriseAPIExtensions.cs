// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Enterprise.Api.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SoftheonEnterpriseAPI.
    /// </summary>
    public static partial class SoftheonEnterpriseAPIExtensions
    {
            /// <summary>
            /// Accepts the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object AcceptTask(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model)
            {
                return operations.AcceptTaskAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accepts the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AcceptTaskAsync(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AcceptTaskWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rejects the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object RejectTask(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model)
            {
                return operations.RejectTaskAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rejects the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RejectTaskAsync(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RejectTaskWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object SuspendTask(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model)
            {
                return operations.SuspendTaskAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SuspendTaskAsync(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendTaskWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Routes the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object RouteTask(this ISoftheonEnterpriseAPI operations, WorkflowActionRouteModel model)
            {
                return operations.RouteTaskAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Routes the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RouteTaskAsync(this ISoftheonEnterpriseAPI operations, WorkflowActionRouteModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RouteTaskWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Overrides the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object OverrideTask(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model)
            {
                return operations.OverrideTaskAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Overrides the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OverrideTaskAsync(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OverrideTaskWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object ResetTask(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model)
            {
                return operations.ResetTaskAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetTaskAsync(this ISoftheonEnterpriseAPI operations, WorkflowActionModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResetTaskWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initializes the Workflow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object InitializeEntityWorkflow(this ISoftheonEnterpriseAPI operations, WorkflowActionInitializeModel model)
            {
                return operations.InitializeEntityWorkflowAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initializes the Workflow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InitializeEntityWorkflowAsync(this ISoftheonEnterpriseAPI operations, WorkflowActionInitializeModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InitializeEntityWorkflowWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all available applications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ApplicationModel> GetAllApplications(this ISoftheonEnterpriseAPI operations)
            {
                return operations.GetAllApplicationsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all available applications.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationModel>> GetAllApplicationsAsync(this ISoftheonEnterpriseAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllApplicationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single application by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique application identifier.
            /// </param>
            public static ApplicationModel GetApplicationById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetApplicationByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single application by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique application identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationModel> GetApplicationByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single application by its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The unique application name.
            /// </param>
            public static ApplicationModel GetApplicationByName(this ISoftheonEnterpriseAPI operations, string name)
            {
                return operations.GetApplicationByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single application by its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The unique application name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationModel> GetApplicationByNameAsync(this ISoftheonEnterpriseAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of drawer group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupDrawerModel> GetDrawerGroupAssociations(this ISoftheonEnterpriseAPI operations, int drawerID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetDrawerGroupAssociationsAsync(drawerID, groupID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of drawer group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupDrawerModel>> GetDrawerGroupAssociationsAsync(this ISoftheonEnterpriseAPI operations, int drawerID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDrawerGroupAssociationsWithHttpMessagesAsync(drawerID, groupID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of group drawer associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupDrawerModel> GetGroupDrawerAssociations(this ISoftheonEnterpriseAPI operations, int groupID, int? drawerID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetGroupDrawerAssociationsAsync(groupID, drawerID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of group drawer associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupDrawerModel>> GetGroupDrawerAssociationsAsync(this ISoftheonEnterpriseAPI operations, int groupID, int? drawerID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupDrawerAssociationsWithHttpMessagesAsync(groupID, drawerID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the drawer group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateDrawerGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID, GroupDrawerModel model)
            {
                return operations.CreateOrUpdateDrawerGroupAssociationAsync(groupID, drawerID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the drawer group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateDrawerGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID, GroupDrawerModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDrawerGroupAssociationWithHttpMessagesAsync(groupID, drawerID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a drawer group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            public static object DeleteDrawerGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID)
            {
                return operations.DeleteDrawerGroupAssociationAsync(groupID, drawerID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a drawer group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDrawerGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDrawerGroupAssociationWithHttpMessagesAsync(groupID, drawerID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the group drawer association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateGroupDrawerAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID, GroupDrawerModel model)
            {
                return operations.CreateOrUpdateGroupDrawerAssociationAsync(groupID, drawerID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the group drawer association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateGroupDrawerAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID, GroupDrawerModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateGroupDrawerAssociationWithHttpMessagesAsync(groupID, drawerID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a group drawer association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            public static object DeleteGroupDrawerAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID)
            {
                return operations.DeleteGroupDrawerAssociationAsync(groupID, drawerID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a group drawer association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGroupDrawerAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int drawerID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupDrawerAssociationWithHttpMessagesAsync(groupID, drawerID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of user group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupUserModel> GetUserGroupAssociations(this ISoftheonEnterpriseAPI operations, int userID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetUserGroupAssociationsAsync(userID, groupID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of user group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupUserModel>> GetUserGroupAssociationsAsync(this ISoftheonEnterpriseAPI operations, int userID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserGroupAssociationsWithHttpMessagesAsync(userID, groupID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of group user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupUserModel> GetGroupUserAssociations(this ISoftheonEnterpriseAPI operations, int groupID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetGroupUserAssociationsAsync(groupID, userID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of group user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupUserModel>> GetGroupUserAssociationsAsync(this ISoftheonEnterpriseAPI operations, int groupID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupUserAssociationsWithHttpMessagesAsync(groupID, userID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts the user group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateUserGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int userID, GroupUserModel model)
            {
                return operations.CreateUserGroupAssociationAsync(groupID, userID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts the user group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateUserGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int userID, GroupUserModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserGroupAssociationWithHttpMessagesAsync(groupID, userID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            public static object DeleteUserGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int userID)
            {
                return operations.DeleteUserGroupAssociationAsync(groupID, userID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteUserGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int userID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserGroupAssociationWithHttpMessagesAsync(groupID, userID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts the group user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateGroupUserAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int userID, GroupUserModel model)
            {
                return operations.CreateGroupUserAssociationAsync(groupID, userID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts the group user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateGroupUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int userID, GroupUserModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupUserAssociationWithHttpMessagesAsync(groupID, userID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a group user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            public static object DeleteGroupUserAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int userID)
            {
                return operations.DeleteGroupUserAssociationAsync(groupID, userID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a group user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGroupUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int userID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupUserAssociationWithHttpMessagesAsync(groupID, userID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of queue group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupQueueModel> GetQueueGroupAssociations(this ISoftheonEnterpriseAPI operations, int queueID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetQueueGroupAssociationsAsync(queueID, groupID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of queue group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupQueueModel>> GetQueueGroupAssociationsAsync(this ISoftheonEnterpriseAPI operations, int queueID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueGroupAssociationsWithHttpMessagesAsync(queueID, groupID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of group queue associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupQueueModel> GetGroupQueueAssociations(this ISoftheonEnterpriseAPI operations, int groupID, int? queueID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetGroupQueueAssociationsAsync(groupID, queueID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of group queue associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupQueueModel>> GetGroupQueueAssociationsAsync(this ISoftheonEnterpriseAPI operations, int groupID, int? queueID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupQueueAssociationsWithHttpMessagesAsync(groupID, queueID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the queue group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateQueueGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int queueID, GroupQueueModel model)
            {
                return operations.CreateOrUpdateQueueGroupAssociationAsync(groupID, queueID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the queue group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateQueueGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int queueID, GroupQueueModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateQueueGroupAssociationWithHttpMessagesAsync(groupID, queueID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a queue group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            public static object DeleteQueueGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int queueID)
            {
                return operations.DeleteQueueGroupAssociationAsync(groupID, queueID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a queue group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteQueueGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int queueID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteQueueGroupAssociationWithHttpMessagesAsync(groupID, queueID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the group queue association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateGroupQueueAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int queueID, GroupQueueModel model)
            {
                return operations.CreateOrUpdateGroupQueueAssociationAsync(groupID, queueID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the group queue association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateGroupQueueAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int queueID, GroupQueueModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateGroupQueueAssociationWithHttpMessagesAsync(groupID, queueID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a group queue association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            public static object DeleteGroupQueueAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int queueID)
            {
                return operations.DeleteGroupQueueAssociationAsync(groupID, queueID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a group queue association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGroupQueueAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int queueID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupQueueAssociationWithHttpMessagesAsync(groupID, queueID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of application group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupApplicationModel> GetApplicationGroupAssociations(this ISoftheonEnterpriseAPI operations, int applicationID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetApplicationGroupAssociationsAsync(applicationID, groupID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of application group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupApplicationModel>> GetApplicationGroupAssociationsAsync(this ISoftheonEnterpriseAPI operations, int applicationID, int? groupID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationGroupAssociationsWithHttpMessagesAsync(applicationID, groupID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of group application associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<GroupApplicationModel> GetGroupApplicationAssociations(this ISoftheonEnterpriseAPI operations, int groupID, int? applicationID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetGroupApplicationAssociationsAsync(groupID, applicationID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of group application associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupApplicationModel>> GetGroupApplicationAssociationsAsync(this ISoftheonEnterpriseAPI operations, int groupID, int? applicationID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupApplicationAssociationsWithHttpMessagesAsync(groupID, applicationID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the application group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateApplicationGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID, GroupApplicationModel model)
            {
                return operations.CreateOrUpdateApplicationGroupAssociationAsync(groupID, applicationID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the application group association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateApplicationGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID, GroupApplicationModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateApplicationGroupAssociationWithHttpMessagesAsync(groupID, applicationID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a application group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            public static object DeleteApplicationGroupAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID)
            {
                return operations.DeleteApplicationGroupAssociationAsync(groupID, applicationID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a application group association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteApplicationGroupAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApplicationGroupAssociationWithHttpMessagesAsync(groupID, applicationID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the group application association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateGroupApplicationAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID, GroupApplicationModel model)
            {
                return operations.CreateOrUpdateGroupApplicationAssociationAsync(groupID, applicationID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the group application association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateGroupApplicationAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID, GroupApplicationModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateGroupApplicationAssociationWithHttpMessagesAsync(groupID, applicationID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a group application association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            public static object DeleteGroupApplicationAssociation(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID)
            {
                return operations.DeleteGroupApplicationAssociationAsync(groupID, applicationID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a group application association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupID'>
            /// The group identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGroupApplicationAssociationAsync(this ISoftheonEnterpriseAPI operations, int groupID, int applicationID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupApplicationAssociationWithHttpMessagesAsync(groupID, applicationID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of drawer user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<UserDrawerModel> GetDrawerUserAssociations(this ISoftheonEnterpriseAPI operations, int drawerID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetDrawerUserAssociationsAsync(drawerID, userID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of drawer user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDrawerModel>> GetDrawerUserAssociationsAsync(this ISoftheonEnterpriseAPI operations, int drawerID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDrawerUserAssociationsWithHttpMessagesAsync(drawerID, userID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of user drawer associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<UserDrawerModel> GetUserDrawerAssociations(this ISoftheonEnterpriseAPI operations, int userID, int? drawerID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetUserDrawerAssociationsAsync(userID, drawerID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of user drawer associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserDrawerModel>> GetUserDrawerAssociationsAsync(this ISoftheonEnterpriseAPI operations, int userID, int? drawerID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserDrawerAssociationsWithHttpMessagesAsync(userID, drawerID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the drawer user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateDrawerUserAssociation(this ISoftheonEnterpriseAPI operations, int userID, int drawerID, UserDrawerModel model)
            {
                return operations.CreateOrUpdateDrawerUserAssociationAsync(userID, drawerID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the drawer user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateDrawerUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int drawerID, UserDrawerModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDrawerUserAssociationWithHttpMessagesAsync(userID, drawerID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a drawer user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            public static object DeleteDrawerUserAssociation(this ISoftheonEnterpriseAPI operations, int userID, int drawerID)
            {
                return operations.DeleteDrawerUserAssociationAsync(userID, drawerID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a drawer user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDrawerUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int drawerID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDrawerUserAssociationWithHttpMessagesAsync(userID, drawerID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the user drawer association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateUserDrawerAssociation(this ISoftheonEnterpriseAPI operations, int userID, int drawerID, UserDrawerModel model)
            {
                return operations.CreateOrUpdateUserDrawerAssociationAsync(userID, drawerID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the user drawer association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateUserDrawerAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int drawerID, UserDrawerModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateUserDrawerAssociationWithHttpMessagesAsync(userID, drawerID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user drawer association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            public static object DeleteUserDrawerAssociation(this ISoftheonEnterpriseAPI operations, int userID, int drawerID)
            {
                return operations.DeleteUserDrawerAssociationAsync(userID, drawerID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user drawer association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='drawerID'>
            /// The drawer identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteUserDrawerAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int drawerID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserDrawerAssociationWithHttpMessagesAsync(userID, drawerID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of queue user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<UserQueueModel> GetQueueUserAssociations(this ISoftheonEnterpriseAPI operations, int queueID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetQueueUserAssociationsAsync(queueID, userID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of queue user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserQueueModel>> GetQueueUserAssociationsAsync(this ISoftheonEnterpriseAPI operations, int queueID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueUserAssociationsWithHttpMessagesAsync(queueID, userID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of user queue associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<UserQueueModel> GetUserQueueAssociations(this ISoftheonEnterpriseAPI operations, int userID, int? queueID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetUserQueueAssociationsAsync(userID, queueID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of user queue associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserQueueModel>> GetUserQueueAssociationsAsync(this ISoftheonEnterpriseAPI operations, int userID, int? queueID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserQueueAssociationsWithHttpMessagesAsync(userID, queueID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the queue user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateQueueUserAssociation(this ISoftheonEnterpriseAPI operations, int userID, int queueID, UserQueueModel model)
            {
                return operations.CreateOrUpdateQueueUserAssociationAsync(userID, queueID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the queue user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateQueueUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int queueID, UserQueueModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateQueueUserAssociationWithHttpMessagesAsync(userID, queueID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a queue user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            public static object DeleteQueueUserAssociation(this ISoftheonEnterpriseAPI operations, int userID, int queueID)
            {
                return operations.DeleteQueueUserAssociationAsync(userID, queueID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a queue user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteQueueUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int queueID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteQueueUserAssociationWithHttpMessagesAsync(userID, queueID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the user queue association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateUserQueueAssociation(this ISoftheonEnterpriseAPI operations, int userID, int queueID, UserQueueModel model)
            {
                return operations.CreateOrUpdateUserQueueAssociationAsync(userID, queueID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the user queue association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateUserQueueAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int queueID, UserQueueModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateUserQueueAssociationWithHttpMessagesAsync(userID, queueID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user queue association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            public static object DeleteUserQueueAssociation(this ISoftheonEnterpriseAPI operations, int userID, int queueID)
            {
                return operations.DeleteUserQueueAssociationAsync(userID, queueID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user queue association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='queueID'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteUserQueueAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int queueID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserQueueAssociationWithHttpMessagesAsync(userID, queueID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of application user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<UserApplicationModel> GetApplicationUserAssociations(this ISoftheonEnterpriseAPI operations, int applicationID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetApplicationUserAssociationsAsync(applicationID, userID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of application user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserApplicationModel>> GetApplicationUserAssociationsAsync(this ISoftheonEnterpriseAPI operations, int applicationID, int? userID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationUserAssociationsWithHttpMessagesAsync(applicationID, userID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of user application associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            public static IList<UserApplicationModel> GetUserApplicationAssociations(this ISoftheonEnterpriseAPI operations, int userID, int? applicationID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetUserApplicationAssociationsAsync(userID, applicationID, acl, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of user application associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control level permissions.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include:
            /// 'Unspecified', 'DrawerID', 'ApplicationID', 'GroupID', 'UserID', 'QueueID',
            /// 'Acl'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserApplicationModel>> GetUserApplicationAssociationsAsync(this ISoftheonEnterpriseAPI operations, int userID, int? applicationID = default(int?), int? acl = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserApplicationAssociationsWithHttpMessagesAsync(userID, applicationID, acl, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the application user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateApplicationUserAssociation(this ISoftheonEnterpriseAPI operations, int userID, int applicationID, UserApplicationModel model)
            {
                return operations.CreateOrUpdateApplicationUserAssociationAsync(userID, applicationID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the application user association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateApplicationUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int applicationID, UserApplicationModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateApplicationUserAssociationWithHttpMessagesAsync(userID, applicationID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an application user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            public static object DeleteApplicationUserAssociation(this ISoftheonEnterpriseAPI operations, int userID, int applicationID)
            {
                return operations.DeleteApplicationUserAssociationAsync(userID, applicationID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an application user association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteApplicationUserAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int applicationID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApplicationUserAssociationWithHttpMessagesAsync(userID, applicationID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts/Updates the user application association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object CreateOrUpdateUserApplicationAssociation(this ISoftheonEnterpriseAPI operations, int userID, int applicationID, UserApplicationModel model)
            {
                return operations.CreateOrUpdateUserApplicationAssociationAsync(userID, applicationID, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts/Updates the user application association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateUserApplicationAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int applicationID, UserApplicationModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateUserApplicationAssociationWithHttpMessagesAsync(userID, applicationID, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a user application association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            public static object DeleteUserApplicationAssociation(this ISoftheonEnterpriseAPI operations, int userID, int applicationID)
            {
                return operations.DeleteUserApplicationAssociationAsync(userID, applicationID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user application association;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userID'>
            /// The user identifier.
            /// </param>
            /// <param name='applicationID'>
            /// The application identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteUserApplicationAssociationAsync(this ISoftheonEnterpriseAPI operations, int userID, int applicationID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserApplicationAssociationWithHttpMessagesAsync(userID, applicationID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of attachment metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Standard', 'EntityLink',
            /// 'WebLink'
            /// </param>
            /// <param name='extension'>
            /// Gets or sets the extension.
            /// </param>
            /// <param name='minSize'>
            /// Gets or sets the minimum size.
            /// </param>
            /// <param name='maxSize'>
            /// Gets or sets the maximum size.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control list.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='minInsertionTime'>
            /// Gets or sets the minimum insertion time.
            /// </param>
            /// <param name='maxInsertionTime'>
            /// Gets or sets the maximum insertion time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'PageNumber',
            /// 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID',
            /// 'SubType', 'Extension', 'Name'
            /// </param>
            public static IList<AttachmentModel> GetAttachmentsByFilter(this ISoftheonEnterpriseAPI operations, string type = default(string), string extension = default(string), long? minSize = default(long?), long? maxSize = default(long?), int? acl = default(int?), int? entityID = default(int?), int? drawerID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetAttachmentsByFilterAsync(type, extension, minSize, maxSize, acl, entityID, drawerID, name, creatorUserID, modifierUserID, minInsertionTime, maxInsertionTime, minModificationTime, maxModificationTime, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of attachment metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Standard', 'EntityLink',
            /// 'WebLink'
            /// </param>
            /// <param name='extension'>
            /// Gets or sets the extension.
            /// </param>
            /// <param name='minSize'>
            /// Gets or sets the minimum size.
            /// </param>
            /// <param name='maxSize'>
            /// Gets or sets the maximum size.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control list.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='minInsertionTime'>
            /// Gets or sets the minimum insertion time.
            /// </param>
            /// <param name='maxInsertionTime'>
            /// Gets or sets the maximum insertion time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'PageNumber',
            /// 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID',
            /// 'SubType', 'Extension', 'Name'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AttachmentModel>> GetAttachmentsByFilterAsync(this ISoftheonEnterpriseAPI operations, string type = default(string), string extension = default(string), long? minSize = default(long?), long? maxSize = default(long?), int? acl = default(int?), int? entityID = default(int?), int? drawerID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentsByFilterWithHttpMessagesAsync(type, extension, minSize, maxSize, acl, entityID, drawerID, name, creatorUserID, modifierUserID, minInsertionTime, maxInsertionTime, minModificationTime, maxModificationTime, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single attachment metadata based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            public static AttachmentModel GetAttachmentById(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetAttachmentByIdAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single attachment metadata based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttachmentModel> GetAttachmentByIdAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentByIdWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified attachment's metadata..
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object UpdateAttachment(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateAttachmentRequestModel model)
            {
                return operations.UpdateAttachmentAsync(drawer, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified attachment's metadata..
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAttachmentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateAttachmentRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAttachmentWithHttpMessagesAsync(drawer, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            public static object DeleteAttachment(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.DeleteAttachmentAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAttachmentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAttachmentWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an attachment's file content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            public static object GetAttachmentFileContent(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetAttachmentFileContentAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an attachment's file content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAttachmentFileContentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentFileContentWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts a new file attachment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            public static AttachmentModel CreateAttachment(this ISoftheonEnterpriseAPI operations, int drawer)
            {
                return operations.CreateAttachmentAsync(drawer).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts a new file attachment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttachmentModel> CreateAttachmentAsync(this ISoftheonEnterpriseAPI operations, int drawer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAttachmentWithHttpMessagesAsync(drawer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Archives an attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            public static object ArchiveAttachment(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.ArchiveAttachmentAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Archives an attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ArchiveAttachmentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ArchiveAttachmentWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the paged list of attachment versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='version'>
            /// Gets or sets the indexed version value.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator identifier.
            /// </param>
            /// <param name='accessorUserID'>
            /// Gets or sets the identifier of the user who accessed the attachment
            /// version.
            /// </param>
            /// <param name='minAccessTime'>
            /// Gets or sets the min time the version was last accessed.
            /// </param>
            /// <param name='maxAccessTime'>
            /// Gets or sets the max time the version was last accessed.
            /// </param>
            /// <param name='minCreationTime'>
            /// Gets or sets the min creation time of the attachment version.
            /// </param>
            /// <param name='maxCreationTime'>
            /// Gets or sets the max creation time of the attachment version.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the min modification time of the attachment version.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the max modification time of the attachment version.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'Version',
            /// 'CreatorUserID', 'AccessorUserID', 'AccessTime', 'CreationTime',
            /// 'ModificationTime'
            /// </param>
            public static IList<AttachmentVersionModel> GetAttachmentVersionsByFilter(this ISoftheonEnterpriseAPI operations, int drawer, int id, int? version = default(int?), int? creatorUserID = default(int?), int? accessorUserID = default(int?), System.DateTime? minAccessTime = default(System.DateTime?), System.DateTime? maxAccessTime = default(System.DateTime?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetAttachmentVersionsByFilterAsync(drawer, id, version, creatorUserID, accessorUserID, minAccessTime, maxAccessTime, minCreationTime, maxCreationTime, minModificationTime, maxModificationTime, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the paged list of attachment versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='version'>
            /// Gets or sets the indexed version value.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator identifier.
            /// </param>
            /// <param name='accessorUserID'>
            /// Gets or sets the identifier of the user who accessed the attachment
            /// version.
            /// </param>
            /// <param name='minAccessTime'>
            /// Gets or sets the min time the version was last accessed.
            /// </param>
            /// <param name='maxAccessTime'>
            /// Gets or sets the max time the version was last accessed.
            /// </param>
            /// <param name='minCreationTime'>
            /// Gets or sets the min creation time of the attachment version.
            /// </param>
            /// <param name='maxCreationTime'>
            /// Gets or sets the max creation time of the attachment version.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the min modification time of the attachment version.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the max modification time of the attachment version.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'Version',
            /// 'CreatorUserID', 'AccessorUserID', 'AccessTime', 'CreationTime',
            /// 'ModificationTime'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AttachmentVersionModel>> GetAttachmentVersionsByFilterAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, int? version = default(int?), int? creatorUserID = default(int?), int? accessorUserID = default(int?), System.DateTime? minAccessTime = default(System.DateTime?), System.DateTime? maxAccessTime = default(System.DateTime?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentVersionsByFilterWithHttpMessagesAsync(drawer, id, version, creatorUserID, accessorUserID, minAccessTime, maxAccessTime, minCreationTime, maxCreationTime, minModificationTime, maxModificationTime, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a file for a specified attachment version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='versionID'>
            /// The version identifier.
            /// </param>
            public static object GetAttachmentVersionFileContent(this ISoftheonEnterpriseAPI operations, int drawer, int id, int versionID)
            {
                return operations.GetAttachmentVersionFileContentAsync(drawer, id, versionID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a file for a specified attachment version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='versionID'>
            /// The version identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAttachmentVersionFileContentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, int versionID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentVersionFileContentWithHttpMessagesAsync(drawer, id, versionID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks out the attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            public static object CheckOutAttachment(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.CheckOutAttachmentAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks out the attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CheckOutAttachmentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckOutAttachmentWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Undoes the attachment check out of the attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            public static object UndoCheckOutAttachment(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.UndoCheckOutAttachmentAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Undoes the attachment check out of the attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UndoCheckOutAttachmentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UndoCheckOutAttachmentWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks in the new version of attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            public static object CheckInAttachment(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.CheckInAttachmentAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks in the new version of attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CheckInAttachmentAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckInAttachmentWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rolls back to a specified version the attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='versionID'>
            /// The version identifier.
            /// </param>
            public static object RollbackAttachmentVersion(this ISoftheonEnterpriseAPI operations, int drawer, int id, int versionID)
            {
                return operations.RollbackAttachmentVersionAsync(drawer, id, versionID).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rolls back to a specified version the attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The attachment identifier.
            /// </param>
            /// <param name='versionID'>
            /// The version identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RollbackAttachmentVersionAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, int versionID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RollbackAttachmentVersionWithHttpMessagesAsync(drawer, id, versionID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all available drawers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<DrawerModel> GetAllDrawers(this ISoftheonEnterpriseAPI operations)
            {
                return operations.GetAllDrawersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all available drawers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DrawerModel>> GetAllDrawersAsync(this ISoftheonEnterpriseAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDrawersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single drawer by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The drawer identifier.
            /// </param>
            public static DrawerModel GetDrawerById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetDrawerByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single drawer by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The drawer identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DrawerModel> GetDrawerByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDrawerByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified drawer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object UpdateDrawer(this ISoftheonEnterpriseAPI operations, int id, DrawerBase model)
            {
                return operations.UpdateDrawerAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified drawer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDrawerAsync(this ISoftheonEnterpriseAPI operations, int id, DrawerBase model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDrawerWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single drawer by its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The drawer name.
            /// </param>
            public static DrawerModel GetDrawerByName(this ISoftheonEnterpriseAPI operations, string name)
            {
                return operations.GetDrawerByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single drawer by its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The drawer name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DrawerModel> GetDrawerByNameAsync(this ISoftheonEnterpriseAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDrawerByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of entity summaries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control list.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type of the entity.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Undefined', 'Available',
            /// 'Locked', 'Suspended', 'Archived', 'Deleted', 'Canceled', 'Complete',
            /// 'Reviewed', 'ReviewedSuspended', 'ReviewedComplete', 'Rejected',
            /// 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
            /// </param>
            /// <param name='referenceCount'>
            /// Gets or sets the reference count.
            /// </param>
            /// <param name='attachCount'>
            /// Gets or sets the attach count.
            /// </param>
            /// <param name='noteCount'>
            /// Gets or sets the note count.
            /// </param>
            /// <param name='ownerUserID'>
            /// Gets or sets the owner user identifier.
            /// </param>
            /// <param name='ownerGroupID'>
            /// Gets or sets the owner group identifier.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='creatorGroupID'>
            /// Gets or sets the creator group identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='modifierGroupID'>
            /// Gets or sets the modifier group identifier.
            /// </param>
            /// <param name='minCreationTime'>
            /// Gets or sets the minimum creation time.
            /// </param>
            /// <param name='maxCreationTime'>
            /// Gets or sets the maximum creation time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='metadata'>
            /// Gets or sets the metadata.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'CreationTime', 'ModificationTime', 'State', 'Name'
            /// </param>
            public static IList<GetEntityBaseResponse> GetEntitiesByFilter(this ISoftheonEnterpriseAPI operations, int drawerID, int? acl = default(int?), int? type = default(int?), string name = default(string), string state = default(string), int? referenceCount = default(int?), int? attachCount = default(int?), int? noteCount = default(int?), int? ownerUserID = default(int?), int? ownerGroupID = default(int?), int? creatorUserID = default(int?), int? creatorGroupID = default(int?), int? modifierUserID = default(int?), int? modifierGroupID = default(int?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), IList<object> metadata = default(IList<object>), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetEntitiesByFilterAsync(drawerID, acl, type, name, state, referenceCount, attachCount, noteCount, ownerUserID, ownerGroupID, creatorUserID, creatorGroupID, modifierUserID, modifierGroupID, minCreationTime, maxCreationTime, minModificationTime, maxModificationTime, metadata, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of entity summaries.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control list.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type of the entity.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Undefined', 'Available',
            /// 'Locked', 'Suspended', 'Archived', 'Deleted', 'Canceled', 'Complete',
            /// 'Reviewed', 'ReviewedSuspended', 'ReviewedComplete', 'Rejected',
            /// 'RoutingSlipOpen', 'ReviewedRoutingSlipOpen'
            /// </param>
            /// <param name='referenceCount'>
            /// Gets or sets the reference count.
            /// </param>
            /// <param name='attachCount'>
            /// Gets or sets the attach count.
            /// </param>
            /// <param name='noteCount'>
            /// Gets or sets the note count.
            /// </param>
            /// <param name='ownerUserID'>
            /// Gets or sets the owner user identifier.
            /// </param>
            /// <param name='ownerGroupID'>
            /// Gets or sets the owner group identifier.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='creatorGroupID'>
            /// Gets or sets the creator group identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='modifierGroupID'>
            /// Gets or sets the modifier group identifier.
            /// </param>
            /// <param name='minCreationTime'>
            /// Gets or sets the minimum creation time.
            /// </param>
            /// <param name='maxCreationTime'>
            /// Gets or sets the maximum creation time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='metadata'>
            /// Gets or sets the metadata.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'CreationTime', 'ModificationTime', 'State', 'Name'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetEntityBaseResponse>> GetEntitiesByFilterAsync(this ISoftheonEnterpriseAPI operations, int drawerID, int? acl = default(int?), int? type = default(int?), string name = default(string), string state = default(string), int? referenceCount = default(int?), int? attachCount = default(int?), int? noteCount = default(int?), int? ownerUserID = default(int?), int? ownerGroupID = default(int?), int? creatorUserID = default(int?), int? creatorGroupID = default(int?), int? modifierUserID = default(int?), int? modifierGroupID = default(int?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), IList<object> metadata = default(IList<object>), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitiesByFilterWithHttpMessagesAsync(drawerID, acl, type, name, state, referenceCount, attachCount, noteCount, ownerUserID, ownerGroupID, creatorUserID, creatorGroupID, modifierUserID, modifierGroupID, minCreationTime, maxCreationTime, minModificationTime, maxModificationTime, metadata, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single entity complete with all profile metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            public static EntityModel GetEntityById(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetEntityByIdAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single entity complete with all profile metadata.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityModel> GetEntityByIdAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityByIdWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='model'>
            /// The entity model.
            /// </param>
            public static object UpdateEntity(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateEntityRequestModel model)
            {
                return operations.UpdateEntityAsync(drawer, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='model'>
            /// The entity model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateEntityAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateEntityRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateEntityWithHttpMessagesAsync(drawer, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            public static object DeleteEntity(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.DeleteEntityAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteEntityAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEntityWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The entity model.
            /// </param>
            public static EntityModel CreateEntity(this ISoftheonEnterpriseAPI operations, int drawer, InsertEntityRequestModel model)
            {
                return operations.CreateEntityAsync(drawer, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The entity model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityModel> CreateEntityAsync(this ISoftheonEnterpriseAPI operations, int drawer, InsertEntityRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEntityWithHttpMessagesAsync(drawer, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Copies the contents of an entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static EntityModel CopyEntity(this ISoftheonEnterpriseAPI operations, int drawer, int id, EntityContentModel model)
            {
                return operations.CopyEntityAsync(drawer, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Copies the contents of an entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityModel> CopyEntityAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, EntityContentModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CopyEntityWithHttpMessagesAsync(drawer, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Undefined', 'Fatal',
            /// 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
            /// </param>
            /// <param name='minEventTime'>
            /// Gets or sets the minimum event time.
            /// </param>
            /// <param name='maxEventTime'>
            /// Gets or sets the maximum event time.
            /// </param>
            /// <param name='eventUserID'>
            /// Gets or sets the event user identifier.
            /// </param>
            /// <param name='eventGroupID'>
            /// Gets or sets the event group identifier.
            /// </param>
            /// <param name='category'>
            /// Gets or sets the category. Possible values include: 'Undefined', 'Entity',
            /// 'Profile', 'Attachment', 'Discussion', 'Field', 'Workflow'
            /// </param>
            /// <param name='classParameter'>
            /// Gets or sets the class. Possible values include: 'Undefined',
            /// 'Application', 'Security', 'System'
            /// </param>
            /// <param name='operation'>
            /// Gets or sets the operation. Possible values include: 'Undefined', 'Insert',
            /// 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open', 'Close', 'Checkout',
            /// 'Checkin', 'View', 'Merge', 'Split', 'Classify', 'Null', 'OpenWF',
            /// 'Remove', 'ReturnToTop', 'ReturnToBottom', 'Accept', 'Suspend', 'Reject',
            /// 'Route', 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback',
            /// 'Archive'
            /// </param>
            /// <param name='minProcessingTime'>
            /// Gets or sets the minimum processing time.
            /// </param>
            /// <param name='maxProcessingTime'>
            /// Gets or sets the maximum processing time.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'EventTime'
            /// </param>
            public static IList<EventModel> GetEventsByFilter(this ISoftheonEnterpriseAPI operations, int drawerID, int entityID, string type = default(string), System.DateTime? minEventTime = default(System.DateTime?), System.DateTime? maxEventTime = default(System.DateTime?), int? eventUserID = default(int?), int? eventGroupID = default(int?), string category = default(string), string classParameter = default(string), string operation = default(string), int? minProcessingTime = default(int?), int? maxProcessingTime = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetEventsByFilterAsync(drawerID, entityID, type, minEventTime, maxEventTime, eventUserID, eventGroupID, category, classParameter, operation, minProcessingTime, maxProcessingTime, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of events.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Undefined', 'Fatal',
            /// 'Warning', 'Info', 'Debug', 'Process', 'RPC', 'SQL', 'DDE'
            /// </param>
            /// <param name='minEventTime'>
            /// Gets or sets the minimum event time.
            /// </param>
            /// <param name='maxEventTime'>
            /// Gets or sets the maximum event time.
            /// </param>
            /// <param name='eventUserID'>
            /// Gets or sets the event user identifier.
            /// </param>
            /// <param name='eventGroupID'>
            /// Gets or sets the event group identifier.
            /// </param>
            /// <param name='category'>
            /// Gets or sets the category. Possible values include: 'Undefined', 'Entity',
            /// 'Profile', 'Attachment', 'Discussion', 'Field', 'Workflow'
            /// </param>
            /// <param name='classParameter'>
            /// Gets or sets the class. Possible values include: 'Undefined',
            /// 'Application', 'Security', 'System'
            /// </param>
            /// <param name='operation'>
            /// Gets or sets the operation. Possible values include: 'Undefined', 'Insert',
            /// 'Update', 'Delete', 'Copy', 'Lock', 'Unlock', 'Open', 'Close', 'Checkout',
            /// 'Checkin', 'View', 'Merge', 'Split', 'Classify', 'Null', 'OpenWF',
            /// 'Remove', 'ReturnToTop', 'ReturnToBottom', 'Accept', 'Suspend', 'Reject',
            /// 'Route', 'Forward', 'Reply', 'Reassign', 'Reset', 'Override', 'Rollback',
            /// 'Archive'
            /// </param>
            /// <param name='minProcessingTime'>
            /// Gets or sets the minimum processing time.
            /// </param>
            /// <param name='maxProcessingTime'>
            /// Gets or sets the maximum processing time.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'EventTime'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> GetEventsByFilterAsync(this ISoftheonEnterpriseAPI operations, int drawerID, int entityID, string type = default(string), System.DateTime? minEventTime = default(System.DateTime?), System.DateTime? maxEventTime = default(System.DateTime?), int? eventUserID = default(int?), int? eventGroupID = default(int?), string category = default(string), string classParameter = default(string), string operation = default(string), int? minProcessingTime = default(int?), int? maxProcessingTime = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsByFilterWithHttpMessagesAsync(drawerID, entityID, type, minEventTime, maxEventTime, eventUserID, eventGroupID, category, classParameter, operation, minProcessingTime, maxProcessingTime, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a single event based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The event identifier.
            /// </param>
            public static EventModel GetEventById(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetEventByIdAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a single event based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The event identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> GetEventByIdAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventByIdWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The event model.
            /// </param>
            public static EventModel CreateEvent(this ISoftheonEnterpriseAPI operations, int drawer, EventModel model)
            {
                return operations.CreateEventAsync(drawer, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The event model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> CreateEventAsync(this ISoftheonEnterpriseAPI operations, int drawer, EventModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventWithHttpMessagesAsync(drawer, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of extension rows
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='profileID'>
            /// Gets or sets the profile identifier.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the extension identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type of the extension.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'RowNumber',
            /// 'ID', 'Type', 'String', 'Integer', 'Double', 'Date'
            /// </param>
            public static IList<ExtensionModel> GetExtensionsByFilter(this ISoftheonEnterpriseAPI operations, int drawerID, int entityID, int profileID, int? iD = default(int?), int? type = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetExtensionsByFilterAsync(drawerID, entityID, profileID, iD, type, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of extension rows
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='profileID'>
            /// Gets or sets the profile identifier.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the extension identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type of the extension.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'RowNumber',
            /// 'ID', 'Type', 'String', 'Integer', 'Double', 'Date'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ExtensionModel>> GetExtensionsByFilterAsync(this ISoftheonEnterpriseAPI operations, int drawerID, int entityID, int profileID, int? iD = default(int?), int? type = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExtensionsByFilterWithHttpMessagesAsync(drawerID, entityID, profileID, iD, type, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of flows.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'None', 'Workflow',
            /// 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
            /// </param>
            /// <param name='queueID'>
            /// Gets or sets the queue identifier.
            /// </param>
            /// <param name='minWorkflowTime'>
            /// Gets or sets the minimum workflow time.
            /// </param>
            /// <param name='maxWorkflowTime'>
            /// Gets or sets the maximum workflow time.
            /// </param>
            /// <param name='minInsertionTime'>
            /// Gets or sets the minimum insertion time.
            /// </param>
            /// <param name='maxInsertionTime'>
            /// Gets or sets the maximum insertion time.
            /// </param>
            /// <param name='workflowUserID'>
            /// Gets or sets the workflow user identifier.
            /// </param>
            /// <param name='workflowGroupID'>
            /// Gets or sets the workflow group identifier.
            /// </param>
            /// <param name='operation'>
            /// Gets or sets the operation. Possible values include: 'None', 'Update',
            /// 'Reset', 'Override', 'Null'
            /// </param>
            /// <param name='category'>
            /// Gets or sets the category. Possible values include: 'None', 'Direct',
            /// 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip',
            /// 'ReviewRoutingSlip', 'Override'
            /// </param>
            /// <param name='status'>
            /// Gets or sets the status. Possible values include: 'None', 'Approved',
            /// 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'None', 'Processed',
            /// 'Pending', 'Waiting', 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
            /// </param>
            /// <param name='minIndex1'>
            /// Gets or sets the minimum index 1.
            /// </param>
            /// <param name='maxIndex1'>
            /// Gets or sets the maximum index 1.
            /// </param>
            /// <param name='minIndex2'>
            /// Gets or sets the minimum index 2.
            /// </param>
            /// <param name='maxIndex2'>
            /// Gets or sets the maximum index 2.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'QueueID', 'WorkflowTime', 'InsertionTime', 'Index'
            /// </param>
            public static IList<FlowModel> GetFlowsByFilter(this ISoftheonEnterpriseAPI operations, int drawerID, int entityID, string type = default(string), int? queueID = default(int?), System.DateTime? minWorkflowTime = default(System.DateTime?), System.DateTime? maxWorkflowTime = default(System.DateTime?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), int? workflowUserID = default(int?), int? workflowGroupID = default(int?), string operation = default(string), string category = default(string), string status = default(string), string state = default(string), int? minIndex1 = default(int?), int? maxIndex1 = default(int?), int? minIndex2 = default(int?), int? maxIndex2 = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetFlowsByFilterAsync(drawerID, entityID, type, queueID, minWorkflowTime, maxWorkflowTime, minInsertionTime, maxInsertionTime, workflowUserID, workflowGroupID, operation, category, status, state, minIndex1, maxIndex1, minIndex2, maxIndex2, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of flows.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'None', 'Workflow',
            /// 'Fatal', 'Warning', 'Info', 'Debug', 'Process', 'Rpc', 'Sql', 'Dde'
            /// </param>
            /// <param name='queueID'>
            /// Gets or sets the queue identifier.
            /// </param>
            /// <param name='minWorkflowTime'>
            /// Gets or sets the minimum workflow time.
            /// </param>
            /// <param name='maxWorkflowTime'>
            /// Gets or sets the maximum workflow time.
            /// </param>
            /// <param name='minInsertionTime'>
            /// Gets or sets the minimum insertion time.
            /// </param>
            /// <param name='maxInsertionTime'>
            /// Gets or sets the maximum insertion time.
            /// </param>
            /// <param name='workflowUserID'>
            /// Gets or sets the workflow user identifier.
            /// </param>
            /// <param name='workflowGroupID'>
            /// Gets or sets the workflow group identifier.
            /// </param>
            /// <param name='operation'>
            /// Gets or sets the operation. Possible values include: 'None', 'Update',
            /// 'Reset', 'Override', 'Null'
            /// </param>
            /// <param name='category'>
            /// Gets or sets the category. Possible values include: 'None', 'Direct',
            /// 'AdHoc', 'Production', 'Review', 'Reset', 'RoutingSlip',
            /// 'ReviewRoutingSlip', 'Override'
            /// </param>
            /// <param name='status'>
            /// Gets or sets the status. Possible values include: 'None', 'Approved',
            /// 'Rejected', 'Suspended', 'ApprovedR', 'NoneR'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'None', 'Processed',
            /// 'Pending', 'Waiting', 'ProcessedR', 'Override', 'OverrideR', 'WaitingR'
            /// </param>
            /// <param name='minIndex1'>
            /// Gets or sets the minimum index 1.
            /// </param>
            /// <param name='maxIndex1'>
            /// Gets or sets the maximum index 1.
            /// </param>
            /// <param name='minIndex2'>
            /// Gets or sets the minimum index 2.
            /// </param>
            /// <param name='maxIndex2'>
            /// Gets or sets the maximum index 2.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'QueueID', 'WorkflowTime', 'InsertionTime', 'Index'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FlowModel>> GetFlowsByFilterAsync(this ISoftheonEnterpriseAPI operations, int drawerID, int entityID, string type = default(string), int? queueID = default(int?), System.DateTime? minWorkflowTime = default(System.DateTime?), System.DateTime? maxWorkflowTime = default(System.DateTime?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), int? workflowUserID = default(int?), int? workflowGroupID = default(int?), string operation = default(string), string category = default(string), string status = default(string), string state = default(string), int? minIndex1 = default(int?), int? maxIndex1 = default(int?), int? minIndex2 = default(int?), int? maxIndex2 = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFlowsByFilterWithHttpMessagesAsync(drawerID, entityID, type, queueID, minWorkflowTime, maxWorkflowTime, minInsertionTime, maxInsertionTime, workflowUserID, workflowGroupID, operation, category, status, state, minIndex1, maxIndex1, minIndex2, maxIndex2, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single flow based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The flow identifier.
            /// </param>
            public static FlowModel GetFlowById(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetFlowByIdAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single flow based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The flow identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlowModel> GetFlowByIdAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFlowByIdWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of entity template definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='category'>
            /// Gets or sets the category.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by.
            /// </param>
            public static IList<EntityDefinitionModel> GetTemplatesByFilter(this ISoftheonEnterpriseAPI operations, int? drawerID = default(int?), string name = default(string), string category = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?))
            {
                return operations.GetTemplatesByFilterAsync(drawerID, name, category, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of entity template definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='category'>
            /// Gets or sets the category.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EntityDefinitionModel>> GetTemplatesByFilterAsync(this ISoftheonEnterpriseAPI operations, int? drawerID = default(int?), string name = default(string), string category = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTemplatesByFilterWithHttpMessagesAsync(drawerID, name, category, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new entity template definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The entity template model.
            /// </param>
            public static EntityDefinitionModel CreateTemplate(this ISoftheonEnterpriseAPI operations, EntityDefinitionBase model)
            {
                return operations.CreateTemplateAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new entity template definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The entity template model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityDefinitionModel> CreateTemplateAsync(this ISoftheonEnterpriseAPI operations, EntityDefinitionBase model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTemplateWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single entity template definition by its type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            public static EntityDefinitionModel GetTemplateByType(this ISoftheonEnterpriseAPI operations, int type)
            {
                return operations.GetTemplateByTypeAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single entity template definition by its type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityDefinitionModel> GetTemplateByTypeAsync(this ISoftheonEnterpriseAPI operations, int type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTemplateByTypeWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified entity template definition by type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            /// <param name='model'>
            /// The entity template model.
            /// </param>
            public static object UpdateTemplateByType(this ISoftheonEnterpriseAPI operations, int type, UpdateEntityDefinitionRequestModel model)
            {
                return operations.UpdateTemplateByTypeAsync(type, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified entity template definition by type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            /// <param name='model'>
            /// The entity template model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTemplateByTypeAsync(this ISoftheonEnterpriseAPI operations, int type, UpdateEntityDefinitionRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTemplateByTypeWithHttpMessagesAsync(type, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified entity template definition by type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            public static object DeleteTemplateByType(this ISoftheonEnterpriseAPI operations, int type)
            {
                return operations.DeleteTemplateByTypeAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified entity template definition by type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTemplateByTypeAsync(this ISoftheonEnterpriseAPI operations, int type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTemplateByTypeWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single entity template definition by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The template identifier.
            /// </param>
            public static EntityDefinitionModel GetTemplateById(this ISoftheonEnterpriseAPI operations, string id)
            {
                return operations.GetTemplateByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single entity template definition by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The template identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityDefinitionModel> GetTemplateByIdAsync(this ISoftheonEnterpriseAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTemplateByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified entity template definition by identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique template identifier.
            /// </param>
            /// <param name='model'>
            /// The entity template model.
            /// </param>
            public static object UpdateTemplateById(this ISoftheonEnterpriseAPI operations, string id, UpdateEntityDefinitionRequestModel model)
            {
                return operations.UpdateTemplateByIdAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified entity template definition by identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique template identifier.
            /// </param>
            /// <param name='model'>
            /// The entity template model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTemplateByIdAsync(this ISoftheonEnterpriseAPI operations, string id, UpdateEntityDefinitionRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTemplateByIdWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified entity template definition by identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique template identifier.
            /// </param>
            public static object DeleteTemplateById(this ISoftheonEnterpriseAPI operations, string id)
            {
                return operations.DeleteTemplateByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified entity template definition by identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique template identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTemplateByIdAsync(this ISoftheonEnterpriseAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTemplateByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates the specified template field.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The template type.
            /// </param>
            /// <param name='fieldID'>
            /// The field name.
            /// </param>
            /// <param name='sortColumn'>
            /// Gets or sets the sort column.
            /// </param>
            /// <param name='metadata'>
            /// Gets or sets the metadata search options.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by.
            /// </param>
            public static FieldValidationModel ValidateTemplateField(this ISoftheonEnterpriseAPI operations, int type, string fieldID, string sortColumn = default(string), IList<object> metadata = default(IList<object>), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?))
            {
                return operations.ValidateTemplateFieldAsync(type, fieldID, sortColumn, metadata, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates the specified template field.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The template type.
            /// </param>
            /// <param name='fieldID'>
            /// The field name.
            /// </param>
            /// <param name='sortColumn'>
            /// Gets or sets the sort column.
            /// </param>
            /// <param name='metadata'>
            /// Gets or sets the metadata search options.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FieldValidationModel> ValidateTemplateFieldAsync(this ISoftheonEnterpriseAPI operations, int type, string fieldID, string sortColumn = default(string), IList<object> metadata = default(IList<object>), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateTemplateFieldWithHttpMessagesAsync(type, fieldID, sortColumn, metadata, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the group identifier.
            /// </param>
            /// <param name='userID'>
            /// Gets or sets the user identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Generic', 'Access', 'Role'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Inactive', 'Active'
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Name',
            /// 'Type', 'State'
            /// </param>
            public static IList<GroupModel> GetGroupsByFilter(this ISoftheonEnterpriseAPI operations, int? iD = default(int?), int? userID = default(int?), string name = default(string), string type = default(string), string state = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetGroupsByFilterAsync(iD, userID, name, type, state, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the group identifier.
            /// </param>
            /// <param name='userID'>
            /// Gets or sets the user identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Generic', 'Access', 'Role'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Inactive', 'Active'
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Name',
            /// 'Type', 'State'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupModel>> GetGroupsByFilterAsync(this ISoftheonEnterpriseAPI operations, int? iD = default(int?), int? userID = default(int?), string name = default(string), string type = default(string), string state = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsByFilterWithHttpMessagesAsync(iD, userID, name, type, state, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The group model.
            /// </param>
            public static GroupModel CreateGroup(this ISoftheonEnterpriseAPI operations, InsertGroupRequestModel model)
            {
                return operations.CreateGroupAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The group model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupModel> CreateGroupAsync(this ISoftheonEnterpriseAPI operations, InsertGroupRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single group by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The group identifier.
            /// </param>
            public static GroupModel GetGroupById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetGroupByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single group by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The group identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupModel> GetGroupByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The group identifier.
            /// </param>
            /// <param name='model'>
            /// The group model.
            /// </param>
            public static object UpdateGroup(this ISoftheonEnterpriseAPI operations, int id, GroupBase model)
            {
                return operations.UpdateGroupAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The group identifier.
            /// </param>
            /// <param name='model'>
            /// The group model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateGroupAsync(this ISoftheonEnterpriseAPI operations, int id, GroupBase model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateGroupWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deactivates a group and removes all group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The group identifier.
            /// </param>
            public static object DeleteGroup(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.DeleteGroupAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivates a group and removes all group associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The group identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGroupAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of entity links
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='childEntityID'>
            /// Gets or sets the child entity identifier.
            /// </param>
            /// <param name='childDrawerID'>
            /// Gets or sets the child drawer identifier.
            /// </param>
            /// <param name='childType'>
            /// Gets or sets the type of the child.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control list.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='minInsertionTime'>
            /// Gets or sets the minimum insertion time.
            /// </param>
            /// <param name='maxInsertionTime'>
            /// Gets or sets the maximum insertion time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'PageNumber',
            /// 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID',
            /// 'SubType', 'Extension', 'Name'
            /// </param>
            public static IList<EntityLinkModel> GetLinksByFilter(this ISoftheonEnterpriseAPI operations, int? childEntityID = default(int?), int? childDrawerID = default(int?), int? childType = default(int?), int? acl = default(int?), int? entityID = default(int?), int? drawerID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetLinksByFilterAsync(childEntityID, childDrawerID, childType, acl, entityID, drawerID, name, creatorUserID, modifierUserID, minInsertionTime, maxInsertionTime, minModificationTime, maxModificationTime, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of entity links
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='childEntityID'>
            /// Gets or sets the child entity identifier.
            /// </param>
            /// <param name='childDrawerID'>
            /// Gets or sets the child drawer identifier.
            /// </param>
            /// <param name='childType'>
            /// Gets or sets the type of the child.
            /// </param>
            /// <param name='acl'>
            /// Gets or sets the access control list.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='minInsertionTime'>
            /// Gets or sets the minimum insertion time.
            /// </param>
            /// <param name='maxInsertionTime'>
            /// Gets or sets the maximum insertion time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'PageNumber',
            /// 'ID', 'Type', 'InsertionTime', 'ModificationTime', 'CrossReferenceID',
            /// 'SubType', 'Extension', 'Name'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EntityLinkModel>> GetLinksByFilterAsync(this ISoftheonEnterpriseAPI operations, int? childEntityID = default(int?), int? childDrawerID = default(int?), int? childType = default(int?), int? acl = default(int?), int? entityID = default(int?), int? drawerID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minInsertionTime = default(System.DateTime?), System.DateTime? maxInsertionTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLinksByFilterWithHttpMessagesAsync(childEntityID, childDrawerID, childType, acl, entityID, drawerID, name, creatorUserID, modifierUserID, minInsertionTime, maxInsertionTime, minModificationTime, maxModificationTime, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a link based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The link identifier.
            /// </param>
            public static EntityLinkModel GetLinkById(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetLinkByIdAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a link based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The link identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityLinkModel> GetLinkByIdAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLinkByIdWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The link identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object UpdateLink(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateEntityLinkRequestModel model)
            {
                return operations.UpdateLinkAsync(drawer, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The link identifier.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateLinkAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateEntityLinkRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateLinkWithHttpMessagesAsync(drawer, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The link identifier.
            /// </param>
            public static object DeleteLink(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.DeleteLinkAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The link identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteLinkAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteLinkWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The link model.
            /// </param>
            public static EntityLinkModel CreateLink(this ISoftheonEnterpriseAPI operations, int drawer, InsertEntityLinkRequestModel model)
            {
                return operations.CreateLinkAsync(drawer, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The link model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntityLinkModel> CreateLinkAsync(this ISoftheonEnterpriseAPI operations, int drawer, InsertEntityLinkRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateLinkWithHttpMessagesAsync(drawer, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a lock for a single entity based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            public static LockModel GetLocksByFilter(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetLocksByFilterAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a lock for a single entity based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LockModel> GetLocksByFilterAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocksByFilterWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts or updates lock on a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='model'>
            /// The lock model.
            /// </param>
            public static object CreateOrUpdateLock(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateLockRequestModel model)
            {
                return operations.CreateOrUpdateLockAsync(drawer, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts or updates lock on a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='model'>
            /// The lock model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateLockAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, UpdateLockRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateLockWithHttpMessagesAsync(drawer, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a lock on a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            public static object DeleteLock(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.DeleteLockAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a lock on a specified entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The entity identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteLockAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteLockWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of notes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='minCreationTime'>
            /// Gets or sets the minimum creation time.
            /// </param>
            /// <param name='maxCreationTime'>
            /// Gets or sets the maximum creation time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='parentID'>
            /// Gets or sets the parent note identifier.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID',
            /// 'EntityID', 'Name', 'CreationTime', 'ModificationTime'
            /// </param>
            public static IList<NoteModel> GetNotesByFilter(this ISoftheonEnterpriseAPI operations, int drawerID, int? entityID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? parentID = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetNotesByFilterAsync(drawerID, entityID, name, creatorUserID, modifierUserID, minCreationTime, maxCreationTime, minModificationTime, maxModificationTime, parentID, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of notes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='entityID'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='creatorUserID'>
            /// Gets or sets the creator user identifier.
            /// </param>
            /// <param name='modifierUserID'>
            /// Gets or sets the modifier user identifier.
            /// </param>
            /// <param name='minCreationTime'>
            /// Gets or sets the minimum creation time.
            /// </param>
            /// <param name='maxCreationTime'>
            /// Gets or sets the maximum creation time.
            /// </param>
            /// <param name='minModificationTime'>
            /// Gets or sets the minimum modification time.
            /// </param>
            /// <param name='maxModificationTime'>
            /// Gets or sets the maximum modification time.
            /// </param>
            /// <param name='parentID'>
            /// Gets or sets the parent note identifier.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID',
            /// 'EntityID', 'Name', 'CreationTime', 'ModificationTime'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NoteModel>> GetNotesByFilterAsync(this ISoftheonEnterpriseAPI operations, int drawerID, int? entityID = default(int?), string name = default(string), int? creatorUserID = default(int?), int? modifierUserID = default(int?), System.DateTime? minCreationTime = default(System.DateTime?), System.DateTime? maxCreationTime = default(System.DateTime?), System.DateTime? minModificationTime = default(System.DateTime?), System.DateTime? maxModificationTime = default(System.DateTime?), int? parentID = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotesByFilterWithHttpMessagesAsync(drawerID, entityID, name, creatorUserID, modifierUserID, minCreationTime, maxCreationTime, minModificationTime, maxModificationTime, parentID, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a note by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The note identifier.
            /// </param>
            public static NoteModel GetNoteById(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.GetNoteByIdAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a note by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The note identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NoteModel> GetNoteByIdAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNoteByIdWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The note identifier.
            /// </param>
            /// <param name='model'>
            /// The note model.
            /// </param>
            public static object UpdateNote(this ISoftheonEnterpriseAPI operations, int drawer, int id, NoteBase model)
            {
                return operations.UpdateNoteAsync(drawer, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The note identifier.
            /// </param>
            /// <param name='model'>
            /// The note model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateNoteAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, NoteBase model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateNoteWithHttpMessagesAsync(drawer, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The note identifier.
            /// </param>
            public static object DeleteNote(this ISoftheonEnterpriseAPI operations, int drawer, int id)
            {
                return operations.DeleteNoteAsync(drawer, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='id'>
            /// The note identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteNoteAsync(this ISoftheonEnterpriseAPI operations, int drawer, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNoteWithHttpMessagesAsync(drawer, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The note model.
            /// </param>
            public static NoteModel CreateNote(this ISoftheonEnterpriseAPI operations, int drawer, InsertNoteRequestModel model)
            {
                return operations.CreateNoteAsync(drawer, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new note.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='drawer'>
            /// The drawer identifier.
            /// </param>
            /// <param name='model'>
            /// The note model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NoteModel> CreateNoteAsync(this ISoftheonEnterpriseAPI operations, int drawer, InsertNoteRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNoteWithHttpMessagesAsync(drawer, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of queue assignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queueID'>
            /// Gets or sets the unique queue identifier.
            /// </param>
            /// <param name='userID'>
            /// Gets or sets the user identifier.
            /// </param>
            /// <param name='groupID'>
            /// Gets or sets the group identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the queue assignment type. Possible values include:
            /// 'Unspecified', 'Primary', 'Secondary'
            /// </param>
            /// <param name='order'>
            /// Gets or sets the sort order.
            /// </param>
            /// <param name='taskSortColumn'>
            /// Gets or sets the task sort column. Possible values include: 'TaskID',
            /// 'QueueID', 'DrawerID', 'AddressID', 'ObjectID', 'ObjectType', 'State',
            /// 'Priority', 'Description', 'Message1', 'Message2', 'Message3', 'Message4',
            /// 'Message5', 'OwnerUserID', 'OwnerGroupID', 'EffectiveUserID',
            /// 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID', 'InsertionTime',
            /// 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1', 'ReservedString1'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Unspecified', 'Inactive',
            /// 'Active'
            /// </param>
            /// <param name='fetchType'>
            /// Gets or sets the type of the fetch. Possible values include: 'Unspecified',
            /// 'Manual', 'Push'
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'QueueID',
            /// 'UserID', 'GroupID', 'Type', 'State', 'Order', 'FetchType'
            /// </param>
            public static IList<QueueAssignmentModel> GetQueueAssignmentsByFilter(this ISoftheonEnterpriseAPI operations, int? queueID = default(int?), int? userID = default(int?), int? groupID = default(int?), string type = default(string), int? order = default(int?), string taskSortColumn = default(string), string state = default(string), string fetchType = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetQueueAssignmentsByFilterAsync(queueID, userID, groupID, type, order, taskSortColumn, state, fetchType, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of queue assignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queueID'>
            /// Gets or sets the unique queue identifier.
            /// </param>
            /// <param name='userID'>
            /// Gets or sets the user identifier.
            /// </param>
            /// <param name='groupID'>
            /// Gets or sets the group identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the queue assignment type. Possible values include:
            /// 'Unspecified', 'Primary', 'Secondary'
            /// </param>
            /// <param name='order'>
            /// Gets or sets the sort order.
            /// </param>
            /// <param name='taskSortColumn'>
            /// Gets or sets the task sort column. Possible values include: 'TaskID',
            /// 'QueueID', 'DrawerID', 'AddressID', 'ObjectID', 'ObjectType', 'State',
            /// 'Priority', 'Description', 'Message1', 'Message2', 'Message3', 'Message4',
            /// 'Message5', 'OwnerUserID', 'OwnerGroupID', 'EffectiveUserID',
            /// 'EffectiveGroupID', 'PreviousQueueID', 'NextQueueID', 'InsertionTime',
            /// 'ResolutionTime', 'TaskFileAttachment', 'ReservedInt1', 'ReservedString1'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Unspecified', 'Inactive',
            /// 'Active'
            /// </param>
            /// <param name='fetchType'>
            /// Gets or sets the type of the fetch. Possible values include: 'Unspecified',
            /// 'Manual', 'Push'
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'QueueID',
            /// 'UserID', 'GroupID', 'Type', 'State', 'Order', 'FetchType'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<QueueAssignmentModel>> GetQueueAssignmentsByFilterAsync(this ISoftheonEnterpriseAPI operations, int? queueID = default(int?), int? userID = default(int?), int? groupID = default(int?), string type = default(string), int? order = default(int?), string taskSortColumn = default(string), string state = default(string), string fetchType = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueAssignmentsByFilterWithHttpMessagesAsync(queueID, userID, groupID, type, order, taskSortColumn, state, fetchType, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified queue assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static object UpdateQueueAssignemnt(this ISoftheonEnterpriseAPI operations, QueueAssignmentModel model)
            {
                return operations.UpdateQueueAssignemntAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified queue assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateQueueAssignemntAsync(this ISoftheonEnterpriseAPI operations, QueueAssignmentModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateQueueAssignemntWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new queue assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static QueueAssignmentModel CreateQueueAssignment(this ISoftheonEnterpriseAPI operations, InsertQueueAssignmentRequestModel model)
            {
                return operations.CreateQueueAssignmentAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new queue assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueueAssignmentModel> CreateQueueAssignmentAsync(this ISoftheonEnterpriseAPI operations, InsertQueueAssignmentRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateQueueAssignmentWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single queue assignment based on user and queue identifiers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='queueId'>
            /// The queue identifier.
            /// </param>
            public static QueueAssignmentModel GetQueueAssignmentsById(this ISoftheonEnterpriseAPI operations, int userId, int queueId)
            {
                return operations.GetQueueAssignmentsByIdAsync(userId, queueId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single queue assignment based on user and queue identifiers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='queueId'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueueAssignmentModel> GetQueueAssignmentsByIdAsync(this ISoftheonEnterpriseAPI operations, int userId, int queueId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueAssignmentsByIdWithHttpMessagesAsync(userId, queueId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified queue assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='queueId'>
            /// The queue identifier.
            /// </param>
            public static object DeleteQueueAssignment(this ISoftheonEnterpriseAPI operations, int userId, int queueId)
            {
                return operations.DeleteQueueAssignmentAsync(userId, queueId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified queue assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user identifier.
            /// </param>
            /// <param name='queueId'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteQueueAssignmentAsync(this ISoftheonEnterpriseAPI operations, int userId, int queueId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteQueueAssignmentWithHttpMessagesAsync(userId, queueId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of queues.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the queue identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='alias'>
            /// Gets or sets the alias.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Inbound', 'Outbound',
            /// 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax', 'Print', 'Scan',
            /// 'Ocr', 'Workflow', 'Schedule', 'System', 'Other', 'CdoInfostore',
            /// 'CdoFolder'
            /// </param>
            /// <param name='access'>
            /// Gets or sets the access level.
            /// </param>
            /// <param name='bypassSecurity'>
            /// Gets or sets a value indicating whether to bypass security checks.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'Name', 'Alias'
            /// </param>
            public static IList<QueueModel> GetQueuesByFilter(this ISoftheonEnterpriseAPI operations, int? iD = default(int?), string name = default(string), string alias = default(string), string type = default(string), int? access = default(int?), bool? bypassSecurity = default(bool?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetQueuesByFilterAsync(iD, name, alias, type, access, bypassSecurity, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of queues.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the queue identifier.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='alias'>
            /// Gets or sets the alias.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'Inbound', 'Outbound',
            /// 'Access', 'Any', 'Shared', 'Public', 'Recycle', 'Fax', 'Print', 'Scan',
            /// 'Ocr', 'Workflow', 'Schedule', 'System', 'Other', 'CdoInfostore',
            /// 'CdoFolder'
            /// </param>
            /// <param name='access'>
            /// Gets or sets the access level.
            /// </param>
            /// <param name='bypassSecurity'>
            /// Gets or sets a value indicating whether to bypass security checks.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID', 'Type',
            /// 'Name', 'Alias'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<QueueModel>> GetQueuesByFilterAsync(this ISoftheonEnterpriseAPI operations, int? iD = default(int?), string name = default(string), string alias = default(string), string type = default(string), int? access = default(int?), bool? bypassSecurity = default(bool?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueuesByFilterWithHttpMessagesAsync(iD, name, alias, type, access, bypassSecurity, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new queue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The queue model.
            /// </param>
            public static QueueModel CreateQueue(this ISoftheonEnterpriseAPI operations, InsertQueueRequestModel model)
            {
                return operations.CreateQueueAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new queue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The queue model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueueModel> CreateQueueAsync(this ISoftheonEnterpriseAPI operations, InsertQueueRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateQueueWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single queue by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The queue identifier.
            /// </param>
            public static QueueModel GetQueueById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetQueueByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single queue by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueueModel> GetQueueByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified queue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique queue identifier.
            /// </param>
            /// <param name='model'>
            /// The queue model.
            /// </param>
            public static object UpdateQueue(this ISoftheonEnterpriseAPI operations, int id, QueueBase model)
            {
                return operations.UpdateQueueAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified queue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The unique queue identifier.
            /// </param>
            /// <param name='model'>
            /// The queue model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateQueueAsync(this ISoftheonEnterpriseAPI operations, int id, QueueBase model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateQueueWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified queue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The queue identifier.
            /// </param>
            public static object DeleteQueue(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.DeleteQueueAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified queue.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The queue identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteQueueAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteQueueWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single queue by its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The queue name.
            /// </param>
            public static QueueModel GetQueueByName(this ISoftheonEnterpriseAPI operations, string name)
            {
                return operations.GetQueueByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single queue by its name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The queue name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueueModel> GetQueueByNameAsync(this ISoftheonEnterpriseAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueueByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of tasks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lastTaskID'>
            /// Gets or sets the last task identifier.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type of the entity.
            /// </param>
            /// <param name='queueID'>
            /// Gets or sets the queue identifier.
            /// </param>
            /// <param name='queueType'>
            /// Gets or sets the type of the queue.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='description'>
            /// Gets or sets the task description.
            /// </param>
            /// <param name='taskID'>
            /// Gets or sets the task identifier.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'TaskID',
            /// 'QueueID', 'ObjectID', 'Priority', 'Description', 'InsertionTime',
            /// 'ResolutionTime', 'ReservedInt1'
            /// </param>
            public static IList<TaskModel> GetTasksByFilter(this ISoftheonEnterpriseAPI operations, int? lastTaskID = default(int?), int? iD = default(int?), int? type = default(int?), int? queueID = default(int?), int? queueType = default(int?), int? drawerID = default(int?), string description = default(string), int? taskID = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetTasksByFilterAsync(lastTaskID, iD, type, queueID, queueType, drawerID, description, taskID, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of tasks.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lastTaskID'>
            /// Gets or sets the last task identifier.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the entity identifier.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type of the entity.
            /// </param>
            /// <param name='queueID'>
            /// Gets or sets the queue identifier.
            /// </param>
            /// <param name='queueType'>
            /// Gets or sets the type of the queue.
            /// </param>
            /// <param name='drawerID'>
            /// Gets or sets the drawer identifier.
            /// </param>
            /// <param name='description'>
            /// Gets or sets the task description.
            /// </param>
            /// <param name='taskID'>
            /// Gets or sets the task identifier.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'TaskID',
            /// 'QueueID', 'ObjectID', 'Priority', 'Description', 'InsertionTime',
            /// 'ResolutionTime', 'ReservedInt1'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaskModel>> GetTasksByFilterAsync(this ISoftheonEnterpriseAPI operations, int? lastTaskID = default(int?), int? iD = default(int?), int? type = default(int?), int? queueID = default(int?), int? queueType = default(int?), int? drawerID = default(int?), string description = default(string), int? taskID = default(int?), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTasksByFilterWithHttpMessagesAsync(lastTaskID, iD, type, queueID, queueType, drawerID, description, taskID, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The task model.
            /// </param>
            public static object CreateTask(this ISoftheonEnterpriseAPI operations, InsertTaskRequestModel model)
            {
                return operations.CreateTaskAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The task model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTaskAsync(this ISoftheonEnterpriseAPI operations, InsertTaskRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single task based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            public static TaskModel GetTaskById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetTaskByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single task based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskModel> GetTaskByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='model'>
            /// The task model.
            /// </param>
            public static object UpdateTask(this ISoftheonEnterpriseAPI operations, int id, TaskBase model)
            {
                return operations.UpdateTaskAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='model'>
            /// The task model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTaskAsync(this ISoftheonEnterpriseAPI operations, int id, TaskBase model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaskWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            public static object DeleteTask(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.DeleteTaskAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTaskAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTaskWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single task based on user predefined queue assignment criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TaskModel FetchTaskFromQueueAssignment(this ISoftheonEnterpriseAPI operations)
            {
                return operations.FetchTaskFromQueueAssignmentAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single task based on user predefined queue assignment criteria.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskModel> FetchTaskFromQueueAssignmentAsync(this ISoftheonEnterpriseAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FetchTaskFromQueueAssignmentWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of users.Gets a paged list of users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the identifier.
            /// </param>
            /// <param name='primaryGroupID'>
            /// Gets or sets the primary group identifier.
            /// </param>
            /// <param name='groupID'>
            /// Gets or sets the group identifier.
            /// </param>
            /// <param name='groupName'>
            /// Gets or sets the name of the group.
            /// </param>
            /// <param name='username'>
            /// Gets or sets the username.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'ImageDesk', 'PublishDesk',
            /// 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk',
            /// 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk',
            /// 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Active', 'Inactive'
            /// </param>
            /// <param name='fullName'>
            /// Gets or sets the full name.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID',
            /// 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
            /// </param>
            public static IList<UserModel> GetUsersByFilter(this ISoftheonEnterpriseAPI operations, int? iD = default(int?), int? primaryGroupID = default(int?), int? groupID = default(int?), string groupName = default(string), string username = default(string), string type = default(string), string state = default(string), string fullName = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string))
            {
                return operations.GetUsersByFilterAsync(iD, primaryGroupID, groupID, groupName, username, type, state, fullName, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of users.Gets a paged list of users.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='iD'>
            /// Gets or sets the identifier.
            /// </param>
            /// <param name='primaryGroupID'>
            /// Gets or sets the primary group identifier.
            /// </param>
            /// <param name='groupID'>
            /// Gets or sets the group identifier.
            /// </param>
            /// <param name='groupName'>
            /// Gets or sets the name of the group.
            /// </param>
            /// <param name='username'>
            /// Gets or sets the username.
            /// </param>
            /// <param name='type'>
            /// Gets or sets the type. Possible values include: 'ImageDesk', 'PublishDesk',
            /// 'FaxDesk', 'CaptureDesk', 'RecognitionDesk', 'PortalUser', 'AdminDesk',
            /// 'WorkflowDesk', 'Benchmark', 'ReportDesk', 'ColdDesk', 'PortalDesk',
            /// 'WorkflowArchitect', 'DocumentDesk', 'Poweruser'
            /// </param>
            /// <param name='state'>
            /// Gets or sets the state. Possible values include: 'Active', 'Inactive'
            /// </param>
            /// <param name='fullName'>
            /// Gets or sets the full name.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by. Possible values include: 'ID',
            /// 'PrimaryGroupID', 'Username', 'UserFullName', 'Type', 'State'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserModel>> GetUsersByFilterAsync(this ISoftheonEnterpriseAPI operations, int? iD = default(int?), int? primaryGroupID = default(int?), int? groupID = default(int?), string groupName = default(string), string username = default(string), string type = default(string), string state = default(string), string fullName = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), string sortBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersByFilterWithHttpMessagesAsync(iD, primaryGroupID, groupID, groupName, username, type, state, fullName, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The user model.
            /// </param>
            public static UserModel CreateUser(this ISoftheonEnterpriseAPI operations, InsertUserRequestModel model)
            {
                return operations.CreateUserAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The user model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserModel> CreateUserAsync(this ISoftheonEnterpriseAPI operations, InsertUserRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single user by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user identifier.
            /// </param>
            public static UserModel GetUserById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetUserByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single user by its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserModel> GetUserByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a specified user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user identifier.
            /// </param>
            /// <param name='model'>
            /// The user model.
            /// </param>
            public static object UpdateUser(this ISoftheonEnterpriseAPI operations, int id, UserBase model)
            {
                return operations.UpdateUserAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a specified user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user identifier.
            /// </param>
            /// <param name='model'>
            /// The user model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserAsync(this ISoftheonEnterpriseAPI operations, int id, UserBase model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deactivates a specified user and removes all user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user identifier.
            /// </param>
            public static object DeleteUser(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.DeleteUserAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivates a specified user and removes all user associations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The user identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteUserAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a paged list of workflows.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationID'>
            /// Gets or sets the application identifier.
            /// </param>
            /// <param name='entityType'>
            /// Gets or sets the type of the entity.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by.
            /// </param>
            public static IList<WorkflowModel> GetWorkflowsByFilter(this ISoftheonEnterpriseAPI operations, int? applicationID = default(int?), int? entityType = default(int?), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?))
            {
                return operations.GetWorkflowsByFilterAsync(applicationID, entityType, name, page, pageSize, sortOrder, sortBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a paged list of workflows.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationID'>
            /// Gets or sets the application identifier.
            /// </param>
            /// <param name='entityType'>
            /// Gets or sets the type of the entity.
            /// </param>
            /// <param name='name'>
            /// Gets or sets the name.
            /// </param>
            /// <param name='page'>
            /// Gets or sets the page number.
            /// </param>
            /// <param name='pageSize'>
            /// Gets or sets the size of the page.
            /// </param>
            /// <param name='sortOrder'>
            /// Gets or sets the order. Possible values include: 'Unspecified',
            /// 'Ascending', 'Descending'
            /// </param>
            /// <param name='sortBy'>
            /// Gets or sets the column to order by.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkflowModel>> GetWorkflowsByFilterAsync(this ISoftheonEnterpriseAPI operations, int? applicationID = default(int?), int? entityType = default(int?), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOrder = default(string), int? sortBy = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkflowsByFilterWithHttpMessagesAsync(applicationID, entityType, name, page, pageSize, sortOrder, sortBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single workflow based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The workflow identifier.
            /// </param>
            public static WorkflowModel GetWorkflowById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetWorkflowByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single workflow based on its unique identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The workflow identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkflowModel> GetWorkflowByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkflowByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets queues for a specific workflow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The workflow identifier.
            /// </param>
            public static IList<WorkflowQueueModel> GetWorkflowQueuesById(this ISoftheonEnterpriseAPI operations, int id)
            {
                return operations.GetWorkflowQueuesByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets queues for a specific workflow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The workflow identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkflowQueueModel>> GetWorkflowQueuesByIdAsync(this ISoftheonEnterpriseAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkflowQueuesByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single entity template definition completed with all profiles
            /// definitions as XML entity definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            public static string GetXMLTemplateByType(this ISoftheonEnterpriseAPI operations, int type)
            {
                return operations.GetXMLTemplateByTypeAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single entity template definition completed with all profiles
            /// definitions as XML entity definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// The unique template type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetXMLTemplateByTypeAsync(this ISoftheonEnterpriseAPI operations, int type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetXMLTemplateByTypeWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new entity template definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string CreateXMLTemplate(this ISoftheonEnterpriseAPI operations)
            {
                return operations.CreateXMLTemplateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new entity template definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateXMLTemplateAsync(this ISoftheonEnterpriseAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateXMLTemplateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
